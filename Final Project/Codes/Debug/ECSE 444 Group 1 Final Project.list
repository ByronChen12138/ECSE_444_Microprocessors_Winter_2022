
ECSE 444 Group 1 Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df00  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  0800e0c0  0800e0c0  0001e0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed30  0800ed30  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed30  0800ed30  0001ed30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed38  0800ed38  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed38  0800ed38  0001ed38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed3c  0800ed3c  0001ed3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800ed40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001544  2000025c  0800ef9c  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017a0  0800ef9c  000217a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249a6  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff2  00000000  00000000  00044c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00048c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  0004a620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e97c  00000000  00000000  0004be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002175d  00000000  00000000  0007a7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001197b6  00000000  00000000  0009bf41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001b56f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079b0  00000000  00000000  001b57bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001bd16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e0a8 	.word	0x0800e0a8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000260 	.word	0x20000260
 80001fc:	0800e0a8 	.word	0x0800e0a8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b974 	b.w	8000e2c <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468e      	mov	lr, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14d      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4694      	mov	ip, r2
 8000b6e:	d969      	bls.n	8000c44 <__udivmoddi4+0xe8>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b152      	cbz	r2, 8000b8c <__udivmoddi4+0x30>
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	f1c2 0120 	rsb	r1, r2, #32
 8000b7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b86:	ea41 0e03 	orr.w	lr, r1, r3
 8000b8a:	4094      	lsls	r4, r2
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	0c21      	lsrs	r1, r4, #16
 8000b92:	fbbe f6f8 	udiv	r6, lr, r8
 8000b96:	fa1f f78c 	uxth.w	r7, ip
 8000b9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ba2:	fb06 f107 	mul.w	r1, r6, r7
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb2:	f080 811f 	bcs.w	8000df4 <__udivmoddi4+0x298>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 811c 	bls.w	8000df4 <__udivmoddi4+0x298>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 f707 	mul.w	r7, r0, r7
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x92>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be0:	f080 810a 	bcs.w	8000df8 <__udivmoddi4+0x29c>
 8000be4:	42a7      	cmp	r7, r4
 8000be6:	f240 8107 	bls.w	8000df8 <__udivmoddi4+0x29c>
 8000bea:	4464      	add	r4, ip
 8000bec:	3802      	subs	r0, #2
 8000bee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf2:	1be4      	subs	r4, r4, r7
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa4>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0xc2>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	f000 80ef 	beq.w	8000dee <__udivmoddi4+0x292>
 8000c10:	2600      	movs	r6, #0
 8000c12:	e9c5 0100 	strd	r0, r1, [r5]
 8000c16:	4630      	mov	r0, r6
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f683 	clz	r6, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d14a      	bne.n	8000cbc <__udivmoddi4+0x160>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd4>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80f9 	bhi.w	8000e22 <__udivmoddi4+0x2c6>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb61 0303 	sbc.w	r3, r1, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	469e      	mov	lr, r3
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d0e0      	beq.n	8000c00 <__udivmoddi4+0xa4>
 8000c3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c42:	e7dd      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xec>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 8092 	bne.w	8000d76 <__udivmoddi4+0x21a>
 8000c52:	eba1 010c 	sub.w	r1, r1, ip
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f fe8c 	uxth.w	lr, ip
 8000c5e:	2601      	movs	r6, #1
 8000c60:	0c20      	lsrs	r0, r4, #16
 8000c62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c66:	fb07 1113 	mls	r1, r7, r3, r1
 8000c6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6e:	fb0e f003 	mul.w	r0, lr, r3
 8000c72:	4288      	cmp	r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x12c>
 8000c76:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x12a>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f200 80cb 	bhi.w	8000e1c <__udivmoddi4+0x2c0>
 8000c86:	4643      	mov	r3, r8
 8000c88:	1a09      	subs	r1, r1, r0
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c90:	fb07 1110 	mls	r1, r7, r0, r1
 8000c94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c98:	fb0e fe00 	mul.w	lr, lr, r0
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x156>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x154>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f200 80bb 	bhi.w	8000e26 <__udivmoddi4+0x2ca>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x9a>
 8000cbc:	f1c6 0720 	rsb	r7, r6, #32
 8000cc0:	40b3      	lsls	r3, r6
 8000cc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cca:	fa20 f407 	lsr.w	r4, r0, r7
 8000cce:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	40f9      	lsrs	r1, r7
 8000cd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cda:	fa00 f306 	lsl.w	r3, r0, r6
 8000cde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ce2:	0c20      	lsrs	r0, r4, #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0x1b8>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d04:	f080 8088 	bcs.w	8000e18 <__udivmoddi4+0x2bc>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f240 8085 	bls.w	8000e18 <__udivmoddi4+0x2bc>
 8000d0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d28:	458e      	cmp	lr, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1e2>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d34:	d26c      	bcs.n	8000e10 <__udivmoddi4+0x2b4>
 8000d36:	458e      	cmp	lr, r1
 8000d38:	d96a      	bls.n	8000e10 <__udivmoddi4+0x2b4>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d42:	fba0 9402 	umull	r9, r4, r0, r2
 8000d46:	eba1 010e 	sub.w	r1, r1, lr
 8000d4a:	42a1      	cmp	r1, r4
 8000d4c:	46c8      	mov	r8, r9
 8000d4e:	46a6      	mov	lr, r4
 8000d50:	d356      	bcc.n	8000e00 <__udivmoddi4+0x2a4>
 8000d52:	d053      	beq.n	8000dfc <__udivmoddi4+0x2a0>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x212>
 8000d56:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d62:	fa22 f306 	lsr.w	r3, r2, r6
 8000d66:	40f1      	lsrs	r1, r6
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d8      	lsrs	r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa21 f303 	lsr.w	r3, r1, r3
 8000d84:	4091      	lsls	r1, r2
 8000d86:	4301      	orrs	r1, r0
 8000d88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8c:	fa1f fe8c 	uxth.w	lr, ip
 8000d90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d94:	fb07 3610 	mls	r6, r7, r0, r3
 8000d98:	0c0b      	lsrs	r3, r1, #16
 8000d9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000da2:	429e      	cmp	r6, r3
 8000da4:	fa04 f402 	lsl.w	r4, r4, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x260>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db2:	d22f      	bcs.n	8000e14 <__udivmoddi4+0x2b8>
 8000db4:	429e      	cmp	r6, r3
 8000db6:	d92d      	bls.n	8000e14 <__udivmoddi4+0x2b8>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	b289      	uxth	r1, r1
 8000dc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x28a>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ddc:	d216      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d914      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000de2:	3e02      	subs	r6, #2
 8000de4:	4461      	add	r1, ip
 8000de6:	1ac9      	subs	r1, r1, r3
 8000de8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dec:	e738      	b.n	8000c60 <__udivmoddi4+0x104>
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e705      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e3      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6f8      	b.n	8000bee <__udivmoddi4+0x92>
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	d2a9      	bcs.n	8000d54 <__udivmoddi4+0x1f8>
 8000e00:	ebb9 0802 	subs.w	r8, r9, r2
 8000e04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7a3      	b.n	8000d54 <__udivmoddi4+0x1f8>
 8000e0c:	4646      	mov	r6, r8
 8000e0e:	e7ea      	b.n	8000de6 <__udivmoddi4+0x28a>
 8000e10:	4620      	mov	r0, r4
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e2>
 8000e14:	4640      	mov	r0, r8
 8000e16:	e7d1      	b.n	8000dbc <__udivmoddi4+0x260>
 8000e18:	46d0      	mov	r8, sl
 8000e1a:	e77b      	b.n	8000d14 <__udivmoddi4+0x1b8>
 8000e1c:	3b02      	subs	r3, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	e732      	b.n	8000c88 <__udivmoddi4+0x12c>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e709      	b.n	8000c3a <__udivmoddi4+0xde>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e742      	b.n	8000cb2 <__udivmoddi4+0x156>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <gyroIntegrate>:
  * @param sample_z: value of z
  *
  * @retval None
  */
void gyroIntegrate(int sample_x, int sample_y, int sample_z)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
    ax += sample_x - previous_gyro[0];
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <gyroIntegrate+0xa8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <gyroIntegrate+0xac>)
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e64:	ee17 2a90 	vmov	r2, s15
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <gyroIntegrate+0xa8>)
 8000e6a:	601a      	str	r2, [r3, #0]
    ay += sample_y - previous_gyro[1];
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <gyroIntegrate+0xb0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <gyroIntegrate+0xac>)
 8000e84:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e94:	ee17 2a90 	vmov	r2, s15
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <gyroIntegrate+0xb0>)
 8000e9a:	601a      	str	r2, [r3, #0]
    az += sample_z - previous_gyro[2];
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <gyroIntegrate+0xb4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <gyroIntegrate+0xac>)
 8000eb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec4:	ee17 2a90 	vmov	r2, s15
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <gyroIntegrate+0xb4>)
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	20000658 	.word	0x20000658
 8000edc:	20000664 	.word	0x20000664
 8000ee0:	2000065c 	.word	0x2000065c
 8000ee4:	20000660 	.word	0x20000660

08000ee8 <getAngleXYZ>:
  * @note Times by 100 to change to integer instead of float
  *
  * @retval None
  */
void getAngleXYZ(int *deg_values)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	deg_values[0] = (ax * 10) / GYRO_SIGMA_TO_DEGREESx10;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <getAngleXYZ+0x6c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <getAngleXYZ+0x70>)
 8000efe:	fb82 1203 	smull	r1, r2, r2, r3
 8000f02:	1312      	asrs	r2, r2, #12
 8000f04:	17db      	asrs	r3, r3, #31
 8000f06:	1ad2      	subs	r2, r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]
	deg_values[1] = (ay * 10) / GYRO_SIGMA_TO_DEGREESx10;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <getAngleXYZ+0x74>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	3204      	adds	r2, #4
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <getAngleXYZ+0x70>)
 8000f1e:	fb81 0103 	smull	r0, r1, r1, r3
 8000f22:	1309      	asrs	r1, r1, #12
 8000f24:	17db      	asrs	r3, r3, #31
 8000f26:	1acb      	subs	r3, r1, r3
 8000f28:	6013      	str	r3, [r2, #0]
	deg_values[2] = (az * 10) / GYRO_SIGMA_TO_DEGREESx10;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <getAngleXYZ+0x78>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	4907      	ldr	r1, [pc, #28]	; (8000f58 <getAngleXYZ+0x70>)
 8000f3c:	fb81 0103 	smull	r0, r1, r1, r3
 8000f40:	1309      	asrs	r1, r1, #12
 8000f42:	17db      	asrs	r3, r3, #31
 8000f44:	1acb      	subs	r3, r1, r3
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	20000658 	.word	0x20000658
 8000f58:	49661b2b 	.word	0x49661b2b
 8000f5c:	2000065c 	.word	0x2000065c
 8000f60:	20000660 	.word	0x20000660

08000f64 <updateMap>:

/**
  * @brief Update the map by copying each row
  */
void updateMap()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0
	// Copy the last row and paste to first row later
	char temp[40] = "";
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2224      	movs	r2, #36	; 0x24
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f00b fe89 	bl	800cc8c <memset>
	for (int j = 0; j < 33; j++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7e:	e00c      	b.n	8000f9a <updateMap+0x36>
		temp[j] =  map[33 * 9 + j];
 8000f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f82:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000f86:	4a37      	ldr	r2, [pc, #220]	; (8001064 <updateMap+0x100>)
 8000f88:	5cd1      	ldrb	r1, [r2, r3]
 8000f8a:	463a      	mov	r2, r7
 8000f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8e:	4413      	add	r3, r2
 8000f90:	460a      	mov	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 33; j++){
 8000f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f96:	3301      	adds	r3, #1
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
 8000f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	ddef      	ble.n	8000f80 <updateMap+0x1c>
	}

	// Copy the first row to the second row, second to third, and third to forth
	int i = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 9; i > 0; i--){
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8000fa8:	e01c      	b.n	8000fe4 <updateMap+0x80>
		for (int j = 0; j < 33; j++){
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fae:	e013      	b.n	8000fd8 <updateMap+0x74>
			map[33 * i + j] =  map[33 * (i - 1) + j];
 8000fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	015b      	lsls	r3, r3, #5
 8000fb8:	441a      	add	r2, r3
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	18d1      	adds	r1, r2, r3
 8000fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	441a      	add	r2, r3
 8000fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a26      	ldr	r2, [pc, #152]	; (8001064 <updateMap+0x100>)
 8000fcc:	5c51      	ldrb	r1, [r2, r1]
 8000fce:	4a25      	ldr	r2, [pc, #148]	; (8001064 <updateMap+0x100>)
 8000fd0:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 33; j++){
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	2b20      	cmp	r3, #32
 8000fdc:	dde8      	ble.n	8000fb0 <updateMap+0x4c>
	for (i = 9; i > 0; i--){
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dcdf      	bgt.n	8000faa <updateMap+0x46>
		}
	}

	// Update first row
	map[0]  = temp[0];
 8000fea:	783a      	ldrb	r2, [r7, #0]
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <updateMap+0x100>)
 8000fee:	701a      	strb	r2, [r3, #0]
	map[6]  = temp[6];
 8000ff0:	79ba      	ldrb	r2, [r7, #6]
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <updateMap+0x100>)
 8000ff4:	719a      	strb	r2, [r3, #6]
	map[12] = temp[12];
 8000ff6:	7b3a      	ldrb	r2, [r7, #12]
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <updateMap+0x100>)
 8000ffa:	731a      	strb	r2, [r3, #12]
	map[18] = temp[18];
 8000ffc:	7cba      	ldrb	r2, [r7, #18]
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <updateMap+0x100>)
 8001000:	749a      	strb	r2, [r3, #18]
	map[24] = temp[24];
 8001002:	7e3a      	ldrb	r2, [r7, #24]
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <updateMap+0x100>)
 8001006:	761a      	strb	r2, [r3, #24]
	map[30] = temp[30];
 8001008:	7fba      	ldrb	r2, [r7, #30]
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <updateMap+0x100>)
 800100c:	779a      	strb	r2, [r3, #30]

	for (int j = 1; j < 6; j++){
 800100e:	2301      	movs	r3, #1
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
 8001012:	e01f      	b.n	8001054 <updateMap+0xf0>
		map[j] = temp[j];
 8001014:	463a      	mov	r2, r7
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	4413      	add	r3, r2
 800101a:	7819      	ldrb	r1, [r3, #0]
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <updateMap+0x100>)
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	4413      	add	r3, r2
 8001022:	460a      	mov	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
		map[6 + j]  = ' ';
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	3306      	adds	r3, #6
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <updateMap+0x100>)
 800102c:	2120      	movs	r1, #32
 800102e:	54d1      	strb	r1, [r2, r3]
		map[12 + j] = ' ';
 8001030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001032:	330c      	adds	r3, #12
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <updateMap+0x100>)
 8001036:	2120      	movs	r1, #32
 8001038:	54d1      	strb	r1, [r2, r3]
		map[18 + j] = ' ';
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	3312      	adds	r3, #18
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <updateMap+0x100>)
 8001040:	2120      	movs	r1, #32
 8001042:	54d1      	strb	r1, [r2, r3]
		map[24 + j] = ' ';
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	3318      	adds	r3, #24
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <updateMap+0x100>)
 800104a:	2120      	movs	r1, #32
 800104c:	54d1      	strb	r1, [r2, r3]
	for (int j = 1; j < 6; j++){
 800104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001050:	3301      	adds	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
 8001054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001056:	2b05      	cmp	r3, #5
 8001058:	dddc      	ble.n	8001014 <updateMap+0xb0>
	}
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3738      	adds	r7, #56	; 0x38
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000008 	.word	0x20000008

08001068 <updateSatellite>:
  * @brief Update the satellite in UI
  *
  * @param x: the new position of the satellite in UI
  *
  */
void updateSatellite(int x){
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	// clear the old position first
	for (int i = 0; i < 5; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e00f      	b.n	8001096 <updateSatellite+0x2e>
		map[33 * 9 + 6 + 6 * satellite_pos + 1 + i] = ' ';
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <updateSatellite+0x8c>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	f503 7298 	add.w	r2, r3, #304	; 0x130
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <updateSatellite+0x90>)
 800108c:	2120      	movs	r1, #32
 800108e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 5; i++){
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b04      	cmp	r3, #4
 800109a:	ddec      	ble.n	8001076 <updateSatellite+0xe>
	}

	if (x >= 0 && x <= 3){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db1e      	blt.n	80010e0 <updateSatellite+0x78>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	dc1b      	bgt.n	80010e0 <updateSatellite+0x78>
		for (int j = 0; j < 5; j++){
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	e011      	b.n	80010d2 <updateSatellite+0x6a>
			map[33 * 9 + 6 + 1 + (6 * x) + j] = satellite_UI[j];
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	f503 7298 	add.w	r2, r3, #304	; 0x130
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4413      	add	r3, r2
 80010c0:	490e      	ldr	r1, [pc, #56]	; (80010fc <updateSatellite+0x94>)
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	440a      	add	r2, r1
 80010c6:	7811      	ldrb	r1, [r2, #0]
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <updateSatellite+0x90>)
 80010ca:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 5; j++){
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3301      	adds	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	ddea      	ble.n	80010ae <updateSatellite+0x46>
		}
		satellite_pos = x;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <updateSatellite+0x8c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e005      	b.n	80010ec <updateSatellite+0x84>

	} else {
		updateSatellite(satellite_pos);
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <updateSatellite+0x8c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ffbf 	bl	8001068 <updateSatellite>
	}
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000069c 	.word	0x2000069c
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000198 	.word	0x20000198

08001100 <generateObstacle>:
  * @brief Put a obstacle in UI
  *
  * @param x: the position of the obstacle in UI
  *
  */
void generateObstacle(int track){
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	if(track >= 0 && track <= 3){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db1a      	blt.n	8001144 <generateObstacle+0x44>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b03      	cmp	r3, #3
 8001112:	dc17      	bgt.n	8001144 <generateObstacle+0x44>
		for (int j = 0; j < 5; j++){
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e011      	b.n	800113e <generateObstacle+0x3e>
			map[6 + 6 * track + 1 + j] = obs_UI[j];
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	4908      	ldr	r1, [pc, #32]	; (8001150 <generateObstacle+0x50>)
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	440a      	add	r2, r1
 8001132:	7811      	ldrb	r1, [r2, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <generateObstacle+0x54>)
 8001136:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 5; j++){
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b04      	cmp	r3, #4
 8001142:	ddea      	ble.n	800111a <generateObstacle+0x1a>
		}
	}
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	200001ac 	.word	0x200001ac
 8001154:	20000008 	.word	0x20000008

08001158 <printMessage>:
  * @brief Clean the screen and print the message inputed
  *
  * @param msg: The message to be printed
  *
  */
void printMessage(char *msg){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	// Clear the content first
	memset(UI_buf, 0, strlen(UI_buf));
 8001160:	4819      	ldr	r0, [pc, #100]	; (80011c8 <printMessage+0x70>)
 8001162:	f7ff f84d 	bl	8000200 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	2100      	movs	r1, #0
 800116c:	4816      	ldr	r0, [pc, #88]	; (80011c8 <printMessage+0x70>)
 800116e:	f00b fd8d 	bl	800cc8c <memset>
	sprintf(UI_buf, "\033[10A");
 8001172:	4916      	ldr	r1, [pc, #88]	; (80011cc <printMessage+0x74>)
 8001174:	4814      	ldr	r0, [pc, #80]	; (80011c8 <printMessage+0x70>)
 8001176:	f00b fdcf 	bl	800cd18 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) UI_buf, (uint16_t) strlen(UI_buf), 30000);
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <printMessage+0x70>)
 800117c:	f7ff f840 	bl	8000200 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f247 5330 	movw	r3, #30000	; 0x7530
 8001188:	490f      	ldr	r1, [pc, #60]	; (80011c8 <printMessage+0x70>)
 800118a:	4811      	ldr	r0, [pc, #68]	; (80011d0 <printMessage+0x78>)
 800118c:	f00a feb4 	bl	800bef8 <HAL_UART_Transmit>

	// Clean UI_buf
	memset(UI_buf, 0, strlen(UI_buf));
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <printMessage+0x70>)
 8001192:	f7ff f835 	bl	8000200 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	480a      	ldr	r0, [pc, #40]	; (80011c8 <printMessage+0x70>)
 800119e:	f00b fd75 	bl	800cc8c <memset>
	sprintf(UI_buf, msg);
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <printMessage+0x70>)
 80011a6:	f00b fdb7 	bl	800cd18 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) UI_buf, strlen(UI_buf), 10000);
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <printMessage+0x70>)
 80011ac:	f7ff f828 	bl	8000200 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80011b8:	4903      	ldr	r1, [pc, #12]	; (80011c8 <printMessage+0x70>)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <printMessage+0x78>)
 80011bc:	f00a fe9c 	bl	800bef8 <HAL_UART_Transmit>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200004c8 	.word	0x200004c8
 80011cc:	0800e33c 	.word	0x0800e33c
 80011d0:	200003d4 	.word	0x200003d4

080011d4 <printEndingMessage>:


/**
  * @brief Print the ending UI
  */
void printEndingMessage(){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	memset(UI_buf, 0, strlen(UI_buf));
 80011d8:	482f      	ldr	r0, [pc, #188]	; (8001298 <printEndingMessage+0xc4>)
 80011da:	f7ff f811 	bl	8000200 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	482c      	ldr	r0, [pc, #176]	; (8001298 <printEndingMessage+0xc4>)
 80011e6:	f00b fd51 	bl	800cc8c <memset>
	sprintf(UI_buf, "\033[2J\033[10A");
 80011ea:	492c      	ldr	r1, [pc, #176]	; (800129c <printEndingMessage+0xc8>)
 80011ec:	482a      	ldr	r0, [pc, #168]	; (8001298 <printEndingMessage+0xc4>)
 80011ee:	f00b fd93 	bl	800cd18 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) UI_buf, (uint16_t) strlen(UI_buf), 30000);
 80011f2:	4829      	ldr	r0, [pc, #164]	; (8001298 <printEndingMessage+0xc4>)
 80011f4:	f7ff f804 	bl	8000200 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f247 5330 	movw	r3, #30000	; 0x7530
 8001200:	4925      	ldr	r1, [pc, #148]	; (8001298 <printEndingMessage+0xc4>)
 8001202:	4827      	ldr	r0, [pc, #156]	; (80012a0 <printEndingMessage+0xcc>)
 8001204:	f00a fe78 	bl	800bef8 <HAL_UART_Transmit>


	memset(UI_buf, 0, strlen(UI_buf));	//clears UI_buf
 8001208:	4823      	ldr	r0, [pc, #140]	; (8001298 <printEndingMessage+0xc4>)
 800120a:	f7fe fff9 	bl	8000200 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	4820      	ldr	r0, [pc, #128]	; (8001298 <printEndingMessage+0xc4>)
 8001216:	f00b fd39 	bl	800cc8c <memset>
	sprintf(UI_buf, end_1);
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <printEndingMessage+0xd0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	481d      	ldr	r0, [pc, #116]	; (8001298 <printEndingMessage+0xc4>)
 8001222:	f00b fd79 	bl	800cd18 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) UI_buf, sizeof(UI_buf), 10000);
 8001226:	f242 7310 	movw	r3, #10000	; 0x2710
 800122a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800122e:	491a      	ldr	r1, [pc, #104]	; (8001298 <printEndingMessage+0xc4>)
 8001230:	481b      	ldr	r0, [pc, #108]	; (80012a0 <printEndingMessage+0xcc>)
 8001232:	f00a fe61 	bl	800bef8 <HAL_UART_Transmit>

	memset(UI_buf, 0, strlen(UI_buf));	//clears UI_buf
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <printEndingMessage+0xc4>)
 8001238:	f7fe ffe2 	bl	8000200 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	2100      	movs	r1, #0
 8001242:	4815      	ldr	r0, [pc, #84]	; (8001298 <printEndingMessage+0xc4>)
 8001244:	f00b fd22 	bl	800cc8c <memset>
	sprintf(UI_buf, "|             %4d            |\r\n", score);
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <printEndingMessage+0xd4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4917      	ldr	r1, [pc, #92]	; (80012ac <printEndingMessage+0xd8>)
 8001250:	4811      	ldr	r0, [pc, #68]	; (8001298 <printEndingMessage+0xc4>)
 8001252:	f00b fd61 	bl	800cd18 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) UI_buf, sizeof(UI_buf), 10000);
 8001256:	f242 7310 	movw	r3, #10000	; 0x2710
 800125a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800125e:	490e      	ldr	r1, [pc, #56]	; (8001298 <printEndingMessage+0xc4>)
 8001260:	480f      	ldr	r0, [pc, #60]	; (80012a0 <printEndingMessage+0xcc>)
 8001262:	f00a fe49 	bl	800bef8 <HAL_UART_Transmit>

	memset(UI_buf, 0, strlen(UI_buf));	//clears UI_buf
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <printEndingMessage+0xc4>)
 8001268:	f7fe ffca 	bl	8000200 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <printEndingMessage+0xc4>)
 8001274:	f00b fd0a 	bl	800cc8c <memset>
	sprintf(UI_buf, end_2);
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <printEndingMessage+0xdc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <printEndingMessage+0xc4>)
 8001280:	f00b fd4a 	bl	800cd18 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) UI_buf, sizeof(UI_buf), 10000);
 8001284:	f242 7310 	movw	r3, #10000	; 0x2710
 8001288:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800128c:	4902      	ldr	r1, [pc, #8]	; (8001298 <printEndingMessage+0xc4>)
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <printEndingMessage+0xcc>)
 8001290:	f00a fe32 	bl	800bef8 <HAL_UART_Transmit>

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200004c8 	.word	0x200004c8
 800129c:	0800e344 	.word	0x0800e344
 80012a0:	200003d4 	.word	0x200003d4
 80012a4:	200001a4 	.word	0x200001a4
 80012a8:	200006ac 	.word	0x200006ac
 80012ac:	0800e350 	.word	0x0800e350
 80012b0:	200001a8 	.word	0x200001a8
 80012b4:	00000000 	.word	0x00000000

080012b8 <createTones>:


/**
 * @brief Create the tones needed for the music and sound effect
 */
void createTones(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0c2      	sub	sp, #264	; 0x108
 80012bc:	af00      	add	r7, sp, #0

	// Pause
	for(int i = 0; i < 1; i++){
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012c4:	e00a      	b.n	80012dc <createTones+0x24>
		Pause[i] = (uint8_t) 0;
 80012c6:	4ade      	ldr	r2, [pc, #888]	; (8001640 <createTones+0x388>)
 80012c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80012cc:	4413      	add	r3, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1; i++){
 80012d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80012d6:	3301      	adds	r3, #1
 80012d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	ddf0      	ble.n	80012c6 <createTones+0xe>
	/**
	 * ===================== Octave 3 =====================
	 */

	// Tone F3 = 174.61 Hz
	for(int i = 0; i < 253; i++){
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80012ea:	e047      	b.n	800137c <createTones+0xc4>
		F3[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 253)) * 256);
 80012ec:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80012f0:	f7ff f930 	bl	8000554 <__aeabi_i2d>
 80012f4:	a3c6      	add	r3, pc, #792	; (adr r3, 8001610 <createTones+0x358>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f995 	bl	8000628 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	a3c4      	add	r3, pc, #784	; (adr r3, 8001618 <createTones+0x360>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff fab6 	bl	800087c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fbb8 	bl	8000a8c <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	ee00 3a10 	vmov	s0, r3
 8001322:	f00b fc35 	bl	800cb90 <arm_sin_f32>
 8001326:	eef0 7a40 	vmov.f32	s15, s0
 800132a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800132e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f91f 	bl	8000578 <__aeabi_f2d>
 800133a:	a3b9      	add	r3, pc, #740	; (adr r3, 8001620 <createTones+0x368>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f972 	bl	8000628 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4bbc      	ldr	r3, [pc, #752]	; (8001644 <createTones+0x38c>)
 8001352:	f7ff f969 	bl	8000628 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fb75 	bl	8000a4c <__aeabi_d2uiz>
 8001362:	4603      	mov	r3, r0
 8001364:	b2d9      	uxtb	r1, r3
 8001366:	4ab8      	ldr	r2, [pc, #736]	; (8001648 <createTones+0x390>)
 8001368:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800136c:	4413      	add	r3, r2
 800136e:	460a      	mov	r2, r1
 8001370:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 253; i++){
 8001372:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001376:	3301      	adds	r3, #1
 8001378:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800137c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001380:	2bfc      	cmp	r3, #252	; 0xfc
 8001382:	ddb3      	ble.n	80012ec <createTones+0x34>
	}

	// Tone G3 = 196.00 Hz
	for(int i = 0; i < 225; i++){
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800138a:	e047      	b.n	800141c <createTones+0x164>
		G3[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 225)) * 256);
 800138c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001390:	f7ff f8e0 	bl	8000554 <__aeabi_i2d>
 8001394:	a39e      	add	r3, pc, #632	; (adr r3, 8001610 <createTones+0x358>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff f945 	bl	8000628 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8001628 <createTones+0x370>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fa66 	bl	800087c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb68 	bl	8000a8c <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	ee00 3a10 	vmov	s0, r3
 80013c2:	f00b fbe5 	bl	800cb90 <arm_sin_f32>
 80013c6:	eef0 7a40 	vmov.f32	s15, s0
 80013ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d2:	ee17 0a90 	vmov	r0, s15
 80013d6:	f7ff f8cf 	bl	8000578 <__aeabi_f2d>
 80013da:	a391      	add	r3, pc, #580	; (adr r3, 8001620 <createTones+0x368>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f922 	bl	8000628 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b94      	ldr	r3, [pc, #592]	; (8001644 <createTones+0x38c>)
 80013f2:	f7ff f919 	bl	8000628 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fb25 	bl	8000a4c <__aeabi_d2uiz>
 8001402:	4603      	mov	r3, r0
 8001404:	b2d9      	uxtb	r1, r3
 8001406:	4a91      	ldr	r2, [pc, #580]	; (800164c <createTones+0x394>)
 8001408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800140c:	4413      	add	r3, r2
 800140e:	460a      	mov	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 225; i++){
 8001412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001416:	3301      	adds	r3, #1
 8001418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800141c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001420:	2be0      	cmp	r3, #224	; 0xe0
 8001422:	ddb3      	ble.n	800138c <createTones+0xd4>
	}

	// Tone A3 = 220.00 Hz
	for(int i = 0; i < 200; i++){
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800142a:	e047      	b.n	80014bc <createTones+0x204>
		A3[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 200)) * 256);
 800142c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8001430:	f7ff f890 	bl	8000554 <__aeabi_i2d>
 8001434:	a376      	add	r3, pc, #472	; (adr r3, 8001610 <createTones+0x358>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f8f5 	bl	8000628 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b81      	ldr	r3, [pc, #516]	; (8001650 <createTones+0x398>)
 800144c:	f7ff fa16 	bl	800087c <__aeabi_ddiv>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fb18 	bl	8000a8c <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	ee00 3a10 	vmov	s0, r3
 8001462:	f00b fb95 	bl	800cb90 <arm_sin_f32>
 8001466:	eef0 7a40 	vmov.f32	s15, s0
 800146a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800146e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001472:	ee17 0a90 	vmov	r0, s15
 8001476:	f7ff f87f 	bl	8000578 <__aeabi_f2d>
 800147a:	a369      	add	r3, pc, #420	; (adr r3, 8001620 <createTones+0x368>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff f8d2 	bl	8000628 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b6c      	ldr	r3, [pc, #432]	; (8001644 <createTones+0x38c>)
 8001492:	f7ff f8c9 	bl	8000628 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fad5 	bl	8000a4c <__aeabi_d2uiz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b2d9      	uxtb	r1, r3
 80014a6:	4a6b      	ldr	r2, [pc, #428]	; (8001654 <createTones+0x39c>)
 80014a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80014ac:	4413      	add	r3, r2
 80014ae:	460a      	mov	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 200; i++){
 80014b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80014b6:	3301      	adds	r3, #1
 80014b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80014bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80014c0:	2bc7      	cmp	r3, #199	; 0xc7
 80014c2:	ddb3      	ble.n	800142c <createTones+0x174>
	}

	// Tone AA3 = 233.08 Hz
	for(int i = 0; i < 189; i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80014ca:	e047      	b.n	800155c <createTones+0x2a4>
		AA3[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 189)) * 256);
 80014cc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80014d0:	f7ff f840 	bl	8000554 <__aeabi_i2d>
 80014d4:	a34e      	add	r3, pc, #312	; (adr r3, 8001610 <createTones+0x358>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff f8a5 	bl	8000628 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	a352      	add	r3, pc, #328	; (adr r3, 8001630 <createTones+0x378>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f9c6 	bl	800087c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fac8 	bl	8000a8c <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	ee00 3a10 	vmov	s0, r3
 8001502:	f00b fb45 	bl	800cb90 <arm_sin_f32>
 8001506:	eef0 7a40 	vmov.f32	s15, s0
 800150a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800150e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001512:	ee17 0a90 	vmov	r0, s15
 8001516:	f7ff f82f 	bl	8000578 <__aeabi_f2d>
 800151a:	a341      	add	r3, pc, #260	; (adr r3, 8001620 <createTones+0x368>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f882 	bl	8000628 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <createTones+0x38c>)
 8001532:	f7ff f879 	bl	8000628 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fa85 	bl	8000a4c <__aeabi_d2uiz>
 8001542:	4603      	mov	r3, r0
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	4a44      	ldr	r2, [pc, #272]	; (8001658 <createTones+0x3a0>)
 8001548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800154c:	4413      	add	r3, r2
 800154e:	460a      	mov	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 189; i++){
 8001552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001556:	3301      	adds	r3, #1
 8001558:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800155c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001560:	2bbc      	cmp	r3, #188	; 0xbc
 8001562:	ddb3      	ble.n	80014cc <createTones+0x214>
	}

	// Tone B3 = 246.94 Hz
	for(int i = 0; i < 179; i++){
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800156a:	e047      	b.n	80015fc <createTones+0x344>
		B3[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 179)) * 256);
 800156c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001570:	f7fe fff0 	bl	8000554 <__aeabi_i2d>
 8001574:	a326      	add	r3, pc, #152	; (adr r3, 8001610 <createTones+0x358>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f855 	bl	8000628 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	a32c      	add	r3, pc, #176	; (adr r3, 8001638 <createTones+0x380>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f976 	bl	800087c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fa78 	bl	8000a8c <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	ee00 3a10 	vmov	s0, r3
 80015a2:	f00b faf5 	bl	800cb90 <arm_sin_f32>
 80015a6:	eef0 7a40 	vmov.f32	s15, s0
 80015aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b2:	ee17 0a90 	vmov	r0, s15
 80015b6:	f7fe ffdf 	bl	8000578 <__aeabi_f2d>
 80015ba:	a319      	add	r3, pc, #100	; (adr r3, 8001620 <createTones+0x368>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f832 	bl	8000628 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <createTones+0x38c>)
 80015d2:	f7ff f829 	bl	8000628 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fa35 	bl	8000a4c <__aeabi_d2uiz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b2d9      	uxtb	r1, r3
 80015e6:	4a1d      	ldr	r2, [pc, #116]	; (800165c <createTones+0x3a4>)
 80015e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80015ec:	4413      	add	r3, r2
 80015ee:	460a      	mov	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 179; i++){
 80015f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80015f6:	3301      	adds	r3, #1
 80015f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80015fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001600:	2bb2      	cmp	r3, #178	; 0xb2
 8001602:	ddb3      	ble.n	800156c <createTones+0x2b4>

	/**
	 * ===================== Octave 4 =====================
	 */
	// Tone C4 = 261.63 Hz
	for(int i = 0; i < 169; i++){
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800160a:	e071      	b.n	80016f0 <createTones+0x438>
 800160c:	f3af 8000 	nop.w
 8001610:	53c8d4f1 	.word	0x53c8d4f1
 8001614:	401921fb 	.word	0x401921fb
 8001618:	00000000 	.word	0x00000000
 800161c:	406fa000 	.word	0x406fa000
 8001620:	51eb851f 	.word	0x51eb851f
 8001624:	3fd51eb8 	.word	0x3fd51eb8
 8001628:	00000000 	.word	0x00000000
 800162c:	406c2000 	.word	0x406c2000
 8001630:	00000000 	.word	0x00000000
 8001634:	4067a000 	.word	0x4067a000
 8001638:	00000000 	.word	0x00000000
 800163c:	40666000 	.word	0x40666000
 8001640:	20001690 	.word	0x20001690
 8001644:	40700000 	.word	0x40700000
 8001648:	200006b8 	.word	0x200006b8
 800164c:	200007b8 	.word	0x200007b8
 8001650:	40690000 	.word	0x40690000
 8001654:	2000089c 	.word	0x2000089c
 8001658:	20000964 	.word	0x20000964
 800165c:	20000a24 	.word	0x20000a24
		C4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 169)) * 256);
 8001660:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8001664:	f7fe ff76 	bl	8000554 <__aeabi_i2d>
 8001668:	a3c5      	add	r3, pc, #788	; (adr r3, 8001980 <createTones+0x6c8>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ffdb 	bl	8000628 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	a3d3      	add	r3, pc, #844	; (adr r3, 80019c8 <createTones+0x710>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7ff f8fc 	bl	800087c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff f9fe 	bl	8000a8c <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	ee00 3a10 	vmov	s0, r3
 8001696:	f00b fa7b 	bl	800cb90 <arm_sin_f32>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a6:	ee17 0a90 	vmov	r0, s15
 80016aa:	f7fe ff65 	bl	8000578 <__aeabi_f2d>
 80016ae:	a3b8      	add	r3, pc, #736	; (adr r3, 8001990 <createTones+0x6d8>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffb8 	bl	8000628 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4bba      	ldr	r3, [pc, #744]	; (80019b0 <createTones+0x6f8>)
 80016c6:	f7fe ffaf 	bl	8000628 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff f9bb 	bl	8000a4c <__aeabi_d2uiz>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b2d9      	uxtb	r1, r3
 80016da:	4ab6      	ldr	r2, [pc, #728]	; (80019b4 <createTones+0x6fc>)
 80016dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016e0:	4413      	add	r3, r2
 80016e2:	460a      	mov	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 169; i++){
 80016e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016ea:	3301      	adds	r3, #1
 80016ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016f4:	2ba8      	cmp	r3, #168	; 0xa8
 80016f6:	ddb3      	ble.n	8001660 <createTones+0x3a8>
	}

	// Tone CC4 = 277.18 Hz
	for(int i = 0; i < 159; i++){
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016fe:	e047      	b.n	8001790 <createTones+0x4d8>
		CC4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 159)) * 256);
 8001700:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001704:	f7fe ff26 	bl	8000554 <__aeabi_i2d>
 8001708:	a39d      	add	r3, pc, #628	; (adr r3, 8001980 <createTones+0x6c8>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe ff8b 	bl	8000628 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	a39b      	add	r3, pc, #620	; (adr r3, 8001988 <createTones+0x6d0>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7ff f8ac 	bl	800087c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff f9ae 	bl	8000a8c <__aeabi_d2f>
 8001730:	4603      	mov	r3, r0
 8001732:	ee00 3a10 	vmov	s0, r3
 8001736:	f00b fa2b 	bl	800cb90 <arm_sin_f32>
 800173a:	eef0 7a40 	vmov.f32	s15, s0
 800173e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001746:	ee17 0a90 	vmov	r0, s15
 800174a:	f7fe ff15 	bl	8000578 <__aeabi_f2d>
 800174e:	a390      	add	r3, pc, #576	; (adr r3, 8001990 <createTones+0x6d8>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff68 	bl	8000628 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <createTones+0x6f8>)
 8001766:	f7fe ff5f 	bl	8000628 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f96b 	bl	8000a4c <__aeabi_d2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	b2d9      	uxtb	r1, r3
 800177a:	4a8f      	ldr	r2, [pc, #572]	; (80019b8 <createTones+0x700>)
 800177c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001780:	4413      	add	r3, r2
 8001782:	460a      	mov	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 159; i++){
 8001786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800178a:	3301      	adds	r3, #1
 800178c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001790:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001794:	2b9e      	cmp	r3, #158	; 0x9e
 8001796:	ddb3      	ble.n	8001700 <createTones+0x448>
	}

	// Tone D4 = 293.66 Hz
	for(int i = 0; i < 150; i++){
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800179e:	e047      	b.n	8001830 <createTones+0x578>
		D4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 150)) * 256);
 80017a0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80017a4:	f7fe fed6 	bl	8000554 <__aeabi_i2d>
 80017a8:	a375      	add	r3, pc, #468	; (adr r3, 8001980 <createTones+0x6c8>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff3b 	bl	8000628 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	a377      	add	r3, pc, #476	; (adr r3, 8001998 <createTones+0x6e0>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7ff f85c 	bl	800087c <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f95e 	bl	8000a8c <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	ee00 3a10 	vmov	s0, r3
 80017d6:	f00b f9db 	bl	800cb90 <arm_sin_f32>
 80017da:	eef0 7a40 	vmov.f32	s15, s0
 80017de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e6:	ee17 0a90 	vmov	r0, s15
 80017ea:	f7fe fec5 	bl	8000578 <__aeabi_f2d>
 80017ee:	a368      	add	r3, pc, #416	; (adr r3, 8001990 <createTones+0x6d8>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe ff18 	bl	8000628 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <createTones+0x6f8>)
 8001806:	f7fe ff0f 	bl	8000628 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f91b 	bl	8000a4c <__aeabi_d2uiz>
 8001816:	4603      	mov	r3, r0
 8001818:	b2d9      	uxtb	r1, r3
 800181a:	4a68      	ldr	r2, [pc, #416]	; (80019bc <createTones+0x704>)
 800181c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001820:	4413      	add	r3, r2
 8001822:	460a      	mov	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 150; i++){
 8001826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800182a:	3301      	adds	r3, #1
 800182c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001834:	2b95      	cmp	r3, #149	; 0x95
 8001836:	ddb3      	ble.n	80017a0 <createTones+0x4e8>
	}

	// Tone DD4 = 311.13 Hz
	for(int i = 0; i < 142; i++){
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800183e:	e047      	b.n	80018d0 <createTones+0x618>
		DD4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 142)) * 256);
 8001840:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8001844:	f7fe fe86 	bl	8000554 <__aeabi_i2d>
 8001848:	a34d      	add	r3, pc, #308	; (adr r3, 8001980 <createTones+0x6c8>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe feeb 	bl	8000628 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	a351      	add	r3, pc, #324	; (adr r3, 80019a0 <createTones+0x6e8>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7ff f80c 	bl	800087c <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f90e 	bl	8000a8c <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	ee00 3a10 	vmov	s0, r3
 8001876:	f00b f98b 	bl	800cb90 <arm_sin_f32>
 800187a:	eef0 7a40 	vmov.f32	s15, s0
 800187e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001882:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001886:	ee17 0a90 	vmov	r0, s15
 800188a:	f7fe fe75 	bl	8000578 <__aeabi_f2d>
 800188e:	a340      	add	r3, pc, #256	; (adr r3, 8001990 <createTones+0x6d8>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fec8 	bl	8000628 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <createTones+0x6f8>)
 80018a6:	f7fe febf 	bl	8000628 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f8cb 	bl	8000a4c <__aeabi_d2uiz>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b2d9      	uxtb	r1, r3
 80018ba:	4a41      	ldr	r2, [pc, #260]	; (80019c0 <createTones+0x708>)
 80018bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018c0:	4413      	add	r3, r2
 80018c2:	460a      	mov	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 142; i++){
 80018c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018ca:	3301      	adds	r3, #1
 80018cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80018d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018d4:	2b8d      	cmp	r3, #141	; 0x8d
 80018d6:	ddb3      	ble.n	8001840 <createTones+0x588>
	}

	// Tone E4 = 329.63 Hz
	for(int i = 0; i < 134; i++){
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018de:	e047      	b.n	8001970 <createTones+0x6b8>
		E4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 134)) * 256);
 80018e0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80018e4:	f7fe fe36 	bl	8000554 <__aeabi_i2d>
 80018e8:	a325      	add	r3, pc, #148	; (adr r3, 8001980 <createTones+0x6c8>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fe9b 	bl	8000628 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	a32b      	add	r3, pc, #172	; (adr r3, 80019a8 <createTones+0x6f0>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe ffbc 	bl	800087c <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f8be 	bl	8000a8c <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	ee00 3a10 	vmov	s0, r3
 8001916:	f00b f93b 	bl	800cb90 <arm_sin_f32>
 800191a:	eef0 7a40 	vmov.f32	s15, s0
 800191e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001926:	ee17 0a90 	vmov	r0, s15
 800192a:	f7fe fe25 	bl	8000578 <__aeabi_f2d>
 800192e:	a318      	add	r3, pc, #96	; (adr r3, 8001990 <createTones+0x6d8>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe78 	bl	8000628 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <createTones+0x6f8>)
 8001946:	f7fe fe6f 	bl	8000628 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f87b 	bl	8000a4c <__aeabi_d2uiz>
 8001956:	4603      	mov	r3, r0
 8001958:	b2d9      	uxtb	r1, r3
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <createTones+0x70c>)
 800195c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001960:	4413      	add	r3, r2
 8001962:	460a      	mov	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 134; i++){
 8001966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800196a:	3301      	adds	r3, #1
 800196c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001974:	2b85      	cmp	r3, #133	; 0x85
 8001976:	ddb3      	ble.n	80018e0 <createTones+0x628>
	}

	// Tone F4 = 349.23 Hz
	for(int i = 0; i < 126; i++){
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800197e:	e06f      	b.n	8001a60 <createTones+0x7a8>
 8001980:	53c8d4f1 	.word	0x53c8d4f1
 8001984:	401921fb 	.word	0x401921fb
 8001988:	00000000 	.word	0x00000000
 800198c:	4063e000 	.word	0x4063e000
 8001990:	51eb851f 	.word	0x51eb851f
 8001994:	3fd51eb8 	.word	0x3fd51eb8
 8001998:	00000000 	.word	0x00000000
 800199c:	4062c000 	.word	0x4062c000
 80019a0:	00000000 	.word	0x00000000
 80019a4:	4061c000 	.word	0x4061c000
 80019a8:	00000000 	.word	0x00000000
 80019ac:	4060c000 	.word	0x4060c000
 80019b0:	40700000 	.word	0x40700000
 80019b4:	20000ad8 	.word	0x20000ad8
 80019b8:	20000b84 	.word	0x20000b84
 80019bc:	20000c24 	.word	0x20000c24
 80019c0:	20000cbc 	.word	0x20000cbc
 80019c4:	20000d4c 	.word	0x20000d4c
 80019c8:	00000000 	.word	0x00000000
 80019cc:	40652000 	.word	0x40652000
		F4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 126)) * 256);
 80019d0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80019d4:	f7fe fdbe 	bl	8000554 <__aeabi_i2d>
 80019d8:	a3c7      	add	r3, pc, #796	; (adr r3, 8001cf8 <createTones+0xa40>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fe23 	bl	8000628 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4bc4      	ldr	r3, [pc, #784]	; (8001d00 <createTones+0xa48>)
 80019f0:	f7fe ff44 	bl	800087c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f846 	bl	8000a8c <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	ee00 3a10 	vmov	s0, r3
 8001a06:	f00b f8c3 	bl	800cb90 <arm_sin_f32>
 8001a0a:	eef0 7a40 	vmov.f32	s15, s0
 8001a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a16:	ee17 0a90 	vmov	r0, s15
 8001a1a:	f7fe fdad 	bl	8000578 <__aeabi_f2d>
 8001a1e:	a3b4      	add	r3, pc, #720	; (adr r3, 8001cf0 <createTones+0xa38>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fe00 	bl	8000628 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4bb3      	ldr	r3, [pc, #716]	; (8001d04 <createTones+0xa4c>)
 8001a36:	f7fe fdf7 	bl	8000628 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff f803 	bl	8000a4c <__aeabi_d2uiz>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b2d9      	uxtb	r1, r3
 8001a4a:	4aaf      	ldr	r2, [pc, #700]	; (8001d08 <createTones+0xa50>)
 8001a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a50:	4413      	add	r3, r2
 8001a52:	460a      	mov	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 126; i++){
 8001a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a64:	2b7d      	cmp	r3, #125	; 0x7d
 8001a66:	ddb3      	ble.n	80019d0 <createTones+0x718>
	}

	// Tone FF4 = 369.99 Hz
	for(int i = 0; i < 120; i++){
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a6e:	e047      	b.n	8001b00 <createTones+0x848>
		FF4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 120)) * 256);
 8001a70:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001a74:	f7fe fd6e 	bl	8000554 <__aeabi_i2d>
 8001a78:	a39f      	add	r3, pc, #636	; (adr r3, 8001cf8 <createTones+0xa40>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fdd3 	bl	8000628 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b9f      	ldr	r3, [pc, #636]	; (8001d0c <createTones+0xa54>)
 8001a90:	f7fe fef4 	bl	800087c <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7fe fff6 	bl	8000a8c <__aeabi_d2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	ee00 3a10 	vmov	s0, r3
 8001aa6:	f00b f873 	bl	800cb90 <arm_sin_f32>
 8001aaa:	eef0 7a40 	vmov.f32	s15, s0
 8001aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ab6:	ee17 0a90 	vmov	r0, s15
 8001aba:	f7fe fd5d 	bl	8000578 <__aeabi_f2d>
 8001abe:	a38c      	add	r3, pc, #560	; (adr r3, 8001cf0 <createTones+0xa38>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fdb0 	bl	8000628 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <createTones+0xa4c>)
 8001ad6:	f7fe fda7 	bl	8000628 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7fe ffb3 	bl	8000a4c <__aeabi_d2uiz>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b2d9      	uxtb	r1, r3
 8001aea:	4a89      	ldr	r2, [pc, #548]	; (8001d10 <createTones+0xa58>)
 8001aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001af0:	4413      	add	r3, r2
 8001af2:	460a      	mov	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 120; i++){
 8001af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001afa:	3301      	adds	r3, #1
 8001afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b04:	2b77      	cmp	r3, #119	; 0x77
 8001b06:	ddb3      	ble.n	8001a70 <createTones+0x7b8>
	}

	// Tone G4 = 392.00 Hz
	for(int i = 0; i < 113; i++){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b0e:	e047      	b.n	8001ba0 <createTones+0x8e8>
		G4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 113)) * 256);
 8001b10:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001b14:	f7fe fd1e 	bl	8000554 <__aeabi_i2d>
 8001b18:	a377      	add	r3, pc, #476	; (adr r3, 8001cf8 <createTones+0xa40>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fd83 	bl	8000628 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4b79      	ldr	r3, [pc, #484]	; (8001d14 <createTones+0xa5c>)
 8001b30:	f7fe fea4 	bl	800087c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe ffa6 	bl	8000a8c <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	ee00 3a10 	vmov	s0, r3
 8001b46:	f00b f823 	bl	800cb90 <arm_sin_f32>
 8001b4a:	eef0 7a40 	vmov.f32	s15, s0
 8001b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b56:	ee17 0a90 	vmov	r0, s15
 8001b5a:	f7fe fd0d 	bl	8000578 <__aeabi_f2d>
 8001b5e:	a364      	add	r3, pc, #400	; (adr r3, 8001cf0 <createTones+0xa38>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd60 	bl	8000628 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <createTones+0xa4c>)
 8001b76:	f7fe fd57 	bl	8000628 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7fe ff63 	bl	8000a4c <__aeabi_d2uiz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b2d9      	uxtb	r1, r3
 8001b8a:	4a63      	ldr	r2, [pc, #396]	; (8001d18 <createTones+0xa60>)
 8001b8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b90:	4413      	add	r3, r2
 8001b92:	460a      	mov	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 113; i++){
 8001b96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ba0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ba4:	2b70      	cmp	r3, #112	; 0x70
 8001ba6:	ddb3      	ble.n	8001b10 <createTones+0x858>
	}

	// Tone GG4 = 415.30 Hz
	for(int i = 0; i < 106; i++){
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bae:	e047      	b.n	8001c40 <createTones+0x988>
		GG4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 106)) * 256);
 8001bb0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001bb4:	f7fe fcce 	bl	8000554 <__aeabi_i2d>
 8001bb8:	a34f      	add	r3, pc, #316	; (adr r3, 8001cf8 <createTones+0xa40>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fd33 	bl	8000628 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <createTones+0xa64>)
 8001bd0:	f7fe fe54 	bl	800087c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe ff56 	bl	8000a8c <__aeabi_d2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	ee00 3a10 	vmov	s0, r3
 8001be6:	f00a ffd3 	bl	800cb90 <arm_sin_f32>
 8001bea:	eef0 7a40 	vmov.f32	s15, s0
 8001bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf6:	ee17 0a90 	vmov	r0, s15
 8001bfa:	f7fe fcbd 	bl	8000578 <__aeabi_f2d>
 8001bfe:	a33c      	add	r3, pc, #240	; (adr r3, 8001cf0 <createTones+0xa38>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fd10 	bl	8000628 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <createTones+0xa4c>)
 8001c16:	f7fe fd07 	bl	8000628 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe ff13 	bl	8000a4c <__aeabi_d2uiz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b2d9      	uxtb	r1, r3
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <createTones+0xa68>)
 8001c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c30:	4413      	add	r3, r2
 8001c32:	460a      	mov	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 106; i++){
 8001c36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c44:	2b69      	cmp	r3, #105	; 0x69
 8001c46:	ddb3      	ble.n	8001bb0 <createTones+0x8f8>
	}

	// Tone A4 = 440.00 Hz
	for(int i = 0; i < 100; i++){
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c4e:	e047      	b.n	8001ce0 <createTones+0xa28>
		A4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 100)) * 256);
 8001c50:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001c54:	f7fe fc7e 	bl	8000554 <__aeabi_i2d>
 8001c58:	a327      	add	r3, pc, #156	; (adr r3, 8001cf8 <createTones+0xa40>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fce3 	bl	8000628 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <createTones+0xa6c>)
 8001c70:	f7fe fe04 	bl	800087c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe ff06 	bl	8000a8c <__aeabi_d2f>
 8001c80:	4603      	mov	r3, r0
 8001c82:	ee00 3a10 	vmov	s0, r3
 8001c86:	f00a ff83 	bl	800cb90 <arm_sin_f32>
 8001c8a:	eef0 7a40 	vmov.f32	s15, s0
 8001c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c96:	ee17 0a90 	vmov	r0, s15
 8001c9a:	f7fe fc6d 	bl	8000578 <__aeabi_f2d>
 8001c9e:	a314      	add	r3, pc, #80	; (adr r3, 8001cf0 <createTones+0xa38>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fcc0 	bl	8000628 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <createTones+0xa4c>)
 8001cb6:	f7fe fcb7 	bl	8000628 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe fec3 	bl	8000a4c <__aeabi_d2uiz>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b2d9      	uxtb	r1, r3
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <createTones+0xa70>)
 8001ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cd0:	4413      	add	r3, r2
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; i++){
 8001cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ce4:	2b63      	cmp	r3, #99	; 0x63
 8001ce6:	ddb3      	ble.n	8001c50 <createTones+0x998>
	}

	// Tone AA4 = 466.16 Hz
	for(int i = 0; i < 95; i++){
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cee:	e065      	b.n	8001dbc <createTones+0xb04>
 8001cf0:	51eb851f 	.word	0x51eb851f
 8001cf4:	3fd51eb8 	.word	0x3fd51eb8
 8001cf8:	53c8d4f1 	.word	0x53c8d4f1
 8001cfc:	401921fb 	.word	0x401921fb
 8001d00:	405f8000 	.word	0x405f8000
 8001d04:	40700000 	.word	0x40700000
 8001d08:	20000dd4 	.word	0x20000dd4
 8001d0c:	405e0000 	.word	0x405e0000
 8001d10:	20000e54 	.word	0x20000e54
 8001d14:	405c4000 	.word	0x405c4000
 8001d18:	20000ecc 	.word	0x20000ecc
 8001d1c:	405a8000 	.word	0x405a8000
 8001d20:	20000f40 	.word	0x20000f40
 8001d24:	40590000 	.word	0x40590000
 8001d28:	20000fac 	.word	0x20000fac
		AA4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 95)) * 256);
 8001d2c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001d30:	f7fe fc10 	bl	8000554 <__aeabi_i2d>
 8001d34:	a3ee      	add	r3, pc, #952	; (adr r3, 80020f0 <createTones+0xe38>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc75 	bl	8000628 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	a3fc      	add	r3, pc, #1008	; (adr r3, 8002138 <createTones+0xe80>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fd96 	bl	800087c <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe fe98 	bl	8000a8c <__aeabi_d2f>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	ee00 3a10 	vmov	s0, r3
 8001d62:	f00a ff15 	bl	800cb90 <arm_sin_f32>
 8001d66:	eef0 7a40 	vmov.f32	s15, s0
 8001d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d72:	ee17 0a90 	vmov	r0, s15
 8001d76:	f7fe fbff 	bl	8000578 <__aeabi_f2d>
 8001d7a:	a3df      	add	r3, pc, #892	; (adr r3, 80020f8 <createTones+0xe40>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc52 	bl	8000628 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4bdf      	ldr	r3, [pc, #892]	; (8002110 <createTones+0xe58>)
 8001d92:	f7fe fc49 	bl	8000628 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe fe55 	bl	8000a4c <__aeabi_d2uiz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b2d9      	uxtb	r1, r3
 8001da6:	4adb      	ldr	r2, [pc, #876]	; (8002114 <createTones+0xe5c>)
 8001da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dac:	4413      	add	r3, r2
 8001dae:	460a      	mov	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 95; i++){
 8001db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db6:	3301      	adds	r3, #1
 8001db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dc0:	2b5e      	cmp	r3, #94	; 0x5e
 8001dc2:	ddb3      	ble.n	8001d2c <createTones+0xa74>
	}

	// Tone B4 = 493.88 Hz
	for(int i = 0; i < 89; i++){
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001dca:	e047      	b.n	8001e5c <createTones+0xba4>
		B4[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 89)) * 256);
 8001dcc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001dd0:	f7fe fbc0 	bl	8000554 <__aeabi_i2d>
 8001dd4:	a3c6      	add	r3, pc, #792	; (adr r3, 80020f0 <createTones+0xe38>)
 8001dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dda:	f7fe fc25 	bl	8000628 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4bcb      	ldr	r3, [pc, #812]	; (8002118 <createTones+0xe60>)
 8001dec:	f7fe fd46 	bl	800087c <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fe48 	bl	8000a8c <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	ee00 3a10 	vmov	s0, r3
 8001e02:	f00a fec5 	bl	800cb90 <arm_sin_f32>
 8001e06:	eef0 7a40 	vmov.f32	s15, s0
 8001e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e12:	ee17 0a90 	vmov	r0, s15
 8001e16:	f7fe fbaf 	bl	8000578 <__aeabi_f2d>
 8001e1a:	a3b7      	add	r3, pc, #732	; (adr r3, 80020f8 <createTones+0xe40>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fc02 	bl	8000628 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4bb7      	ldr	r3, [pc, #732]	; (8002110 <createTones+0xe58>)
 8001e32:	f7fe fbf9 	bl	8000628 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fe05 	bl	8000a4c <__aeabi_d2uiz>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b2d9      	uxtb	r1, r3
 8001e46:	4ab5      	ldr	r2, [pc, #724]	; (800211c <createTones+0xe64>)
 8001e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e4c:	4413      	add	r3, r2
 8001e4e:	460a      	mov	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 89; i++){
 8001e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e56:	3301      	adds	r3, #1
 8001e58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e60:	2b58      	cmp	r3, #88	; 0x58
 8001e62:	ddb3      	ble.n	8001dcc <createTones+0xb14>

	/**
	 * ===================== Octave 5 =====================
	 */
	// Tone C5 = 523.25 Hz
	for(int i = 0; i < 84; i++){
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e6a:	e047      	b.n	8001efc <createTones+0xc44>
		C5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 84)) * 256);
 8001e6c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001e70:	f7fe fb70 	bl	8000554 <__aeabi_i2d>
 8001e74:	a39e      	add	r3, pc, #632	; (adr r3, 80020f0 <createTones+0xe38>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fbd5 	bl	8000628 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4ba5      	ldr	r3, [pc, #660]	; (8002120 <createTones+0xe68>)
 8001e8c:	f7fe fcf6 	bl	800087c <__aeabi_ddiv>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe fdf8 	bl	8000a8c <__aeabi_d2f>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	ee00 3a10 	vmov	s0, r3
 8001ea2:	f00a fe75 	bl	800cb90 <arm_sin_f32>
 8001ea6:	eef0 7a40 	vmov.f32	s15, s0
 8001eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001eae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eb2:	ee17 0a90 	vmov	r0, s15
 8001eb6:	f7fe fb5f 	bl	8000578 <__aeabi_f2d>
 8001eba:	a38f      	add	r3, pc, #572	; (adr r3, 80020f8 <createTones+0xe40>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fbb2 	bl	8000628 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	4b8f      	ldr	r3, [pc, #572]	; (8002110 <createTones+0xe58>)
 8001ed2:	f7fe fba9 	bl	8000628 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fdb5 	bl	8000a4c <__aeabi_d2uiz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	b2d9      	uxtb	r1, r3
 8001ee6:	4a8f      	ldr	r2, [pc, #572]	; (8002124 <createTones+0xe6c>)
 8001ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eec:	4413      	add	r3, r2
 8001eee:	460a      	mov	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 84; i++){
 8001ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f00:	2b53      	cmp	r3, #83	; 0x53
 8001f02:	ddb3      	ble.n	8001e6c <createTones+0xbb4>
	}

	// Tone CC5 = 554.37 Hz
	for(int i = 0; i < 80; i++){
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f0a:	e047      	b.n	8001f9c <createTones+0xce4>
		CC5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 80)) * 256);
 8001f0c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001f10:	f7fe fb20 	bl	8000554 <__aeabi_i2d>
 8001f14:	a376      	add	r3, pc, #472	; (adr r3, 80020f0 <createTones+0xe38>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe fb85 	bl	8000628 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <createTones+0xe70>)
 8001f2c:	f7fe fca6 	bl	800087c <__aeabi_ddiv>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7fe fda8 	bl	8000a8c <__aeabi_d2f>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	ee00 3a10 	vmov	s0, r3
 8001f42:	f00a fe25 	bl	800cb90 <arm_sin_f32>
 8001f46:	eef0 7a40 	vmov.f32	s15, s0
 8001f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f52:	ee17 0a90 	vmov	r0, s15
 8001f56:	f7fe fb0f 	bl	8000578 <__aeabi_f2d>
 8001f5a:	a367      	add	r3, pc, #412	; (adr r3, 80020f8 <createTones+0xe40>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fb62 	bl	8000628 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	4b67      	ldr	r3, [pc, #412]	; (8002110 <createTones+0xe58>)
 8001f72:	f7fe fb59 	bl	8000628 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fd65 	bl	8000a4c <__aeabi_d2uiz>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b2d9      	uxtb	r1, r3
 8001f86:	4a69      	ldr	r2, [pc, #420]	; (800212c <createTones+0xe74>)
 8001f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f8c:	4413      	add	r3, r2
 8001f8e:	460a      	mov	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 80; i++){
 8001f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f96:	3301      	adds	r3, #1
 8001f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fa0:	2b4f      	cmp	r3, #79	; 0x4f
 8001fa2:	ddb3      	ble.n	8001f0c <createTones+0xc54>
	}

	// Tone D5 = 587.33 Hz
	for(int i = 0; i < 75; i++){
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001faa:	e047      	b.n	800203c <createTones+0xd84>
		D5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 75)) * 256);
 8001fac:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001fb0:	f7fe fad0 	bl	8000554 <__aeabi_i2d>
 8001fb4:	a34e      	add	r3, pc, #312	; (adr r3, 80020f0 <createTones+0xe38>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fb35 	bl	8000628 <__aeabi_dmul>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	a34e      	add	r3, pc, #312	; (adr r3, 8002100 <createTones+0xe48>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fc56 	bl	800087c <__aeabi_ddiv>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f7fe fd58 	bl	8000a8c <__aeabi_d2f>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	ee00 3a10 	vmov	s0, r3
 8001fe2:	f00a fdd5 	bl	800cb90 <arm_sin_f32>
 8001fe6:	eef0 7a40 	vmov.f32	s15, s0
 8001fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ff2:	ee17 0a90 	vmov	r0, s15
 8001ff6:	f7fe fabf 	bl	8000578 <__aeabi_f2d>
 8001ffa:	a33f      	add	r3, pc, #252	; (adr r3, 80020f8 <createTones+0xe40>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fb12 	bl	8000628 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <createTones+0xe58>)
 8002012:	f7fe fb09 	bl	8000628 <__aeabi_dmul>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fd15 	bl	8000a4c <__aeabi_d2uiz>
 8002022:	4603      	mov	r3, r0
 8002024:	b2d9      	uxtb	r1, r3
 8002026:	4a42      	ldr	r2, [pc, #264]	; (8002130 <createTones+0xe78>)
 8002028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800202c:	4413      	add	r3, r2
 800202e:	460a      	mov	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 75; i++){
 8002032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002036:	3301      	adds	r3, #1
 8002038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800203c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002040:	2b4a      	cmp	r3, #74	; 0x4a
 8002042:	ddb3      	ble.n	8001fac <createTones+0xcf4>
	}

	// Tone DD5 = 622.25 Hz
	for(int i = 0; i < 71; i++){
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800204a:	e047      	b.n	80020dc <createTones+0xe24>
		DD5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 71)) * 256);
 800204c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002050:	f7fe fa80 	bl	8000554 <__aeabi_i2d>
 8002054:	a326      	add	r3, pc, #152	; (adr r3, 80020f0 <createTones+0xe38>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe fae5 	bl	8000628 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	a328      	add	r3, pc, #160	; (adr r3, 8002108 <createTones+0xe50>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fc06 	bl	800087c <__aeabi_ddiv>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f7fe fd08 	bl	8000a8c <__aeabi_d2f>
 800207c:	4603      	mov	r3, r0
 800207e:	ee00 3a10 	vmov	s0, r3
 8002082:	f00a fd85 	bl	800cb90 <arm_sin_f32>
 8002086:	eef0 7a40 	vmov.f32	s15, s0
 800208a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800208e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002092:	ee17 0a90 	vmov	r0, s15
 8002096:	f7fe fa6f 	bl	8000578 <__aeabi_f2d>
 800209a:	a317      	add	r3, pc, #92	; (adr r3, 80020f8 <createTones+0xe40>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fac2 	bl	8000628 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <createTones+0xe58>)
 80020b2:	f7fe fab9 	bl	8000628 <__aeabi_dmul>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fcc5 	bl	8000a4c <__aeabi_d2uiz>
 80020c2:	4603      	mov	r3, r0
 80020c4:	b2d9      	uxtb	r1, r3
 80020c6:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <createTones+0xe7c>)
 80020c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020cc:	4413      	add	r3, r2
 80020ce:	460a      	mov	r2, r1
 80020d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 71; i++){
 80020d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020d6:	3301      	adds	r3, #1
 80020d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020e0:	2b46      	cmp	r3, #70	; 0x46
 80020e2:	ddb3      	ble.n	800204c <createTones+0xd94>
	}

	// Tone E5 = 659.25 Hz
	for(int i = 0; i < 67; i++){
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020ea:	e071      	b.n	80021d0 <createTones+0xf18>
 80020ec:	f3af 8000 	nop.w
 80020f0:	53c8d4f1 	.word	0x53c8d4f1
 80020f4:	401921fb 	.word	0x401921fb
 80020f8:	51eb851f 	.word	0x51eb851f
 80020fc:	3fd51eb8 	.word	0x3fd51eb8
 8002100:	00000000 	.word	0x00000000
 8002104:	4052c000 	.word	0x4052c000
 8002108:	00000000 	.word	0x00000000
 800210c:	4051c000 	.word	0x4051c000
 8002110:	40700000 	.word	0x40700000
 8002114:	20001010 	.word	0x20001010
 8002118:	40564000 	.word	0x40564000
 800211c:	20001070 	.word	0x20001070
 8002120:	40550000 	.word	0x40550000
 8002124:	200010cc 	.word	0x200010cc
 8002128:	40540000 	.word	0x40540000
 800212c:	20001120 	.word	0x20001120
 8002130:	20001170 	.word	0x20001170
 8002134:	200011bc 	.word	0x200011bc
 8002138:	00000000 	.word	0x00000000
 800213c:	4057c000 	.word	0x4057c000
		E5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 67)) * 256);
 8002140:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002144:	f7fe fa06 	bl	8000554 <__aeabi_i2d>
 8002148:	a3ed      	add	r3, pc, #948	; (adr r3, 8002500 <createTones+0x1248>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe fa6b 	bl	8000628 <__aeabi_dmul>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	a3f9      	add	r3, pc, #996	; (adr r3, 8002540 <createTones+0x1288>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fb8c 	bl	800087c <__aeabi_ddiv>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f7fe fc8e 	bl	8000a8c <__aeabi_d2f>
 8002170:	4603      	mov	r3, r0
 8002172:	ee00 3a10 	vmov	s0, r3
 8002176:	f00a fd0b 	bl	800cb90 <arm_sin_f32>
 800217a:	eef0 7a40 	vmov.f32	s15, s0
 800217e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002186:	ee17 0a90 	vmov	r0, s15
 800218a:	f7fe f9f5 	bl	8000578 <__aeabi_f2d>
 800218e:	a3de      	add	r3, pc, #888	; (adr r3, 8002508 <createTones+0x1250>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe fa48 	bl	8000628 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	4bda      	ldr	r3, [pc, #872]	; (8002510 <createTones+0x1258>)
 80021a6:	f7fe fa3f 	bl	8000628 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fc4b 	bl	8000a4c <__aeabi_d2uiz>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b2d9      	uxtb	r1, r3
 80021ba:	4ad6      	ldr	r2, [pc, #856]	; (8002514 <createTones+0x125c>)
 80021bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021c0:	4413      	add	r3, r2
 80021c2:	460a      	mov	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 67; i++){
 80021c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021ca:	3301      	adds	r3, #1
 80021cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021d4:	2b42      	cmp	r3, #66	; 0x42
 80021d6:	ddb3      	ble.n	8002140 <createTones+0xe88>
	}

	// Tone F5 = 698.46 Hz
	for(int i = 0; i < 63; i++){
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021de:	e047      	b.n	8002270 <createTones+0xfb8>
		F5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 63)) * 256);
 80021e0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	a3c5      	add	r3, pc, #788	; (adr r3, 8002500 <createTones+0x1248>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe fa1b 	bl	8000628 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4bc6      	ldr	r3, [pc, #792]	; (8002518 <createTones+0x1260>)
 8002200:	f7fe fb3c 	bl	800087c <__aeabi_ddiv>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f7fe fc3e 	bl	8000a8c <__aeabi_d2f>
 8002210:	4603      	mov	r3, r0
 8002212:	ee00 3a10 	vmov	s0, r3
 8002216:	f00a fcbb 	bl	800cb90 <arm_sin_f32>
 800221a:	eef0 7a40 	vmov.f32	s15, s0
 800221e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002226:	ee17 0a90 	vmov	r0, s15
 800222a:	f7fe f9a5 	bl	8000578 <__aeabi_f2d>
 800222e:	a3b6      	add	r3, pc, #728	; (adr r3, 8002508 <createTones+0x1250>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe f9f8 	bl	8000628 <__aeabi_dmul>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	4bb2      	ldr	r3, [pc, #712]	; (8002510 <createTones+0x1258>)
 8002246:	f7fe f9ef 	bl	8000628 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	f7fe fbfb 	bl	8000a4c <__aeabi_d2uiz>
 8002256:	4603      	mov	r3, r0
 8002258:	b2d9      	uxtb	r1, r3
 800225a:	4ab0      	ldr	r2, [pc, #704]	; (800251c <createTones+0x1264>)
 800225c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002260:	4413      	add	r3, r2
 8002262:	460a      	mov	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 63; i++){
 8002266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800226a:	3301      	adds	r3, #1
 800226c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002274:	2b3e      	cmp	r3, #62	; 0x3e
 8002276:	ddb3      	ble.n	80021e0 <createTones+0xf28>
	}

	// Tone FF5 = 739.99 Hz
	for(int i = 0; i < 60; i++){
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800227e:	e047      	b.n	8002310 <createTones+0x1058>
		FF5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 60)) * 256);
 8002280:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	a39d      	add	r3, pc, #628	; (adr r3, 8002500 <createTones+0x1248>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fe f9cb 	bl	8000628 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	4ba0      	ldr	r3, [pc, #640]	; (8002520 <createTones+0x1268>)
 80022a0:	f7fe faec 	bl	800087c <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fbee 	bl	8000a8c <__aeabi_d2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	ee00 3a10 	vmov	s0, r3
 80022b6:	f00a fc6b 	bl	800cb90 <arm_sin_f32>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022c6:	ee17 0a90 	vmov	r0, s15
 80022ca:	f7fe f955 	bl	8000578 <__aeabi_f2d>
 80022ce:	a38e      	add	r3, pc, #568	; (adr r3, 8002508 <createTones+0x1250>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fe f9a8 	bl	8000628 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	4b8a      	ldr	r3, [pc, #552]	; (8002510 <createTones+0x1258>)
 80022e6:	f7fe f99f 	bl	8000628 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f7fe fbab 	bl	8000a4c <__aeabi_d2uiz>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b2d9      	uxtb	r1, r3
 80022fa:	4a8a      	ldr	r2, [pc, #552]	; (8002524 <createTones+0x126c>)
 80022fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002300:	4413      	add	r3, r2
 8002302:	460a      	mov	r2, r1
 8002304:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 60; i++){
 8002306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800230a:	3301      	adds	r3, #1
 800230c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002314:	2b3b      	cmp	r3, #59	; 0x3b
 8002316:	ddb3      	ble.n	8002280 <createTones+0xfc8>
	}

	// Tone G5 = 783.99 Hz
	for(int i = 0; i < 56; i++){
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800231e:	e047      	b.n	80023b0 <createTones+0x10f8>
		G5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 56)) * 256);
 8002320:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002324:	f7fe f916 	bl	8000554 <__aeabi_i2d>
 8002328:	a375      	add	r3, pc, #468	; (adr r3, 8002500 <createTones+0x1248>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f97b 	bl	8000628 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <createTones+0x1270>)
 8002340:	f7fe fa9c 	bl	800087c <__aeabi_ddiv>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f7fe fb9e 	bl	8000a8c <__aeabi_d2f>
 8002350:	4603      	mov	r3, r0
 8002352:	ee00 3a10 	vmov	s0, r3
 8002356:	f00a fc1b 	bl	800cb90 <arm_sin_f32>
 800235a:	eef0 7a40 	vmov.f32	s15, s0
 800235e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002366:	ee17 0a90 	vmov	r0, s15
 800236a:	f7fe f905 	bl	8000578 <__aeabi_f2d>
 800236e:	a366      	add	r3, pc, #408	; (adr r3, 8002508 <createTones+0x1250>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f958 	bl	8000628 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	4b62      	ldr	r3, [pc, #392]	; (8002510 <createTones+0x1258>)
 8002386:	f7fe f94f 	bl	8000628 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fb5b 	bl	8000a4c <__aeabi_d2uiz>
 8002396:	4603      	mov	r3, r0
 8002398:	b2d9      	uxtb	r1, r3
 800239a:	4a64      	ldr	r2, [pc, #400]	; (800252c <createTones+0x1274>)
 800239c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023a0:	4413      	add	r3, r2
 80023a2:	460a      	mov	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 56; i++){
 80023a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023aa:	3301      	adds	r3, #1
 80023ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023b4:	2b37      	cmp	r3, #55	; 0x37
 80023b6:	ddb3      	ble.n	8002320 <createTones+0x1068>
	}

	// Tone GG5 = 830.61 Hz
	for(int i = 0; i < 53; i++){
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023be:	e047      	b.n	8002450 <createTones+0x1198>
		GG5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 53)) * 256);
 80023c0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80023c4:	f7fe f8c6 	bl	8000554 <__aeabi_i2d>
 80023c8:	a34d      	add	r3, pc, #308	; (adr r3, 8002500 <createTones+0x1248>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fe f92b 	bl	8000628 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	4b54      	ldr	r3, [pc, #336]	; (8002530 <createTones+0x1278>)
 80023e0:	f7fe fa4c 	bl	800087c <__aeabi_ddiv>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7fe fb4e 	bl	8000a8c <__aeabi_d2f>
 80023f0:	4603      	mov	r3, r0
 80023f2:	ee00 3a10 	vmov	s0, r3
 80023f6:	f00a fbcb 	bl	800cb90 <arm_sin_f32>
 80023fa:	eef0 7a40 	vmov.f32	s15, s0
 80023fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002402:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002406:	ee17 0a90 	vmov	r0, s15
 800240a:	f7fe f8b5 	bl	8000578 <__aeabi_f2d>
 800240e:	a33e      	add	r3, pc, #248	; (adr r3, 8002508 <createTones+0x1250>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fe f908 	bl	8000628 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <createTones+0x1258>)
 8002426:	f7fe f8ff 	bl	8000628 <__aeabi_dmul>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f7fe fb0b 	bl	8000a4c <__aeabi_d2uiz>
 8002436:	4603      	mov	r3, r0
 8002438:	b2d9      	uxtb	r1, r3
 800243a:	4a3e      	ldr	r2, [pc, #248]	; (8002534 <createTones+0x127c>)
 800243c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002440:	4413      	add	r3, r2
 8002442:	460a      	mov	r2, r1
 8002444:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 53; i++){
 8002446:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800244a:	3301      	adds	r3, #1
 800244c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002454:	2b34      	cmp	r3, #52	; 0x34
 8002456:	ddb3      	ble.n	80023c0 <createTones+0x1108>
	}

	// Tone A5 = 880.00 Hz
	for(int i = 0; i < 50; i++){
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800245e:	e047      	b.n	80024f0 <createTones+0x1238>
		A5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 50)) * 256);
 8002460:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002464:	f7fe f876 	bl	8000554 <__aeabi_i2d>
 8002468:	a325      	add	r3, pc, #148	; (adr r3, 8002500 <createTones+0x1248>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fe f8db 	bl	8000628 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <createTones+0x1280>)
 8002480:	f7fe f9fc 	bl	800087c <__aeabi_ddiv>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	f7fe fafe 	bl	8000a8c <__aeabi_d2f>
 8002490:	4603      	mov	r3, r0
 8002492:	ee00 3a10 	vmov	s0, r3
 8002496:	f00a fb7b 	bl	800cb90 <arm_sin_f32>
 800249a:	eef0 7a40 	vmov.f32	s15, s0
 800249e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a6:	ee17 0a90 	vmov	r0, s15
 80024aa:	f7fe f865 	bl	8000578 <__aeabi_f2d>
 80024ae:	a316      	add	r3, pc, #88	; (adr r3, 8002508 <createTones+0x1250>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f8b8 	bl	8000628 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <createTones+0x1258>)
 80024c6:	f7fe f8af 	bl	8000628 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f7fe fabb 	bl	8000a4c <__aeabi_d2uiz>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b2d9      	uxtb	r1, r3
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <createTones+0x1284>)
 80024dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024e0:	4413      	add	r3, r2
 80024e2:	460a      	mov	r2, r1
 80024e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 50; i++){
 80024e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ea:	3301      	adds	r3, #1
 80024ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024f4:	2b31      	cmp	r3, #49	; 0x31
 80024f6:	ddb3      	ble.n	8002460 <createTones+0x11a8>
	}

	// Tone AA5 = 932.33 Hz
	for(int i = 0; i < 47; i++){
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024fe:	e06b      	b.n	80025d8 <createTones+0x1320>
 8002500:	53c8d4f1 	.word	0x53c8d4f1
 8002504:	401921fb 	.word	0x401921fb
 8002508:	51eb851f 	.word	0x51eb851f
 800250c:	3fd51eb8 	.word	0x3fd51eb8
 8002510:	40700000 	.word	0x40700000
 8002514:	20001204 	.word	0x20001204
 8002518:	404f8000 	.word	0x404f8000
 800251c:	20001248 	.word	0x20001248
 8002520:	404e0000 	.word	0x404e0000
 8002524:	20001288 	.word	0x20001288
 8002528:	404c0000 	.word	0x404c0000
 800252c:	200012c4 	.word	0x200012c4
 8002530:	404a8000 	.word	0x404a8000
 8002534:	200012fc 	.word	0x200012fc
 8002538:	40490000 	.word	0x40490000
 800253c:	20001334 	.word	0x20001334
 8002540:	00000000 	.word	0x00000000
 8002544:	4050c000 	.word	0x4050c000
		AA5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 47)) * 256);
 8002548:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800254c:	f7fe f802 	bl	8000554 <__aeabi_i2d>
 8002550:	a3c7      	add	r3, pc, #796	; (adr r3, 8002870 <createTones+0x15b8>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f867 	bl	8000628 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	4bc4      	ldr	r3, [pc, #784]	; (8002878 <createTones+0x15c0>)
 8002568:	f7fe f988 	bl	800087c <__aeabi_ddiv>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fa8a 	bl	8000a8c <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	ee00 3a10 	vmov	s0, r3
 800257e:	f00a fb07 	bl	800cb90 <arm_sin_f32>
 8002582:	eef0 7a40 	vmov.f32	s15, s0
 8002586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800258a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800258e:	ee17 0a90 	vmov	r0, s15
 8002592:	f7fd fff1 	bl	8000578 <__aeabi_f2d>
 8002596:	a3b4      	add	r3, pc, #720	; (adr r3, 8002868 <createTones+0x15b0>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f844 	bl	8000628 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4bb3      	ldr	r3, [pc, #716]	; (800287c <createTones+0x15c4>)
 80025ae:	f7fe f83b 	bl	8000628 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fa47 	bl	8000a4c <__aeabi_d2uiz>
 80025be:	4603      	mov	r3, r0
 80025c0:	b2d9      	uxtb	r1, r3
 80025c2:	4aaf      	ldr	r2, [pc, #700]	; (8002880 <createTones+0x15c8>)
 80025c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025c8:	4413      	add	r3, r2
 80025ca:	460a      	mov	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 47; i++){
 80025ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025d2:	3301      	adds	r3, #1
 80025d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025dc:	2b2e      	cmp	r3, #46	; 0x2e
 80025de:	ddb3      	ble.n	8002548 <createTones+0x1290>
	}

	// Tone B5 = 987.77 Hz
	for(int i = 0; i < 45; i++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025e6:	e047      	b.n	8002678 <createTones+0x13c0>
		B5[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 45)) * 256);
 80025e8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80025ec:	f7fd ffb2 	bl	8000554 <__aeabi_i2d>
 80025f0:	a39f      	add	r3, pc, #636	; (adr r3, 8002870 <createTones+0x15b8>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fe f817 	bl	8000628 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	4b9f      	ldr	r3, [pc, #636]	; (8002884 <createTones+0x15cc>)
 8002608:	f7fe f938 	bl	800087c <__aeabi_ddiv>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f7fe fa3a 	bl	8000a8c <__aeabi_d2f>
 8002618:	4603      	mov	r3, r0
 800261a:	ee00 3a10 	vmov	s0, r3
 800261e:	f00a fab7 	bl	800cb90 <arm_sin_f32>
 8002622:	eef0 7a40 	vmov.f32	s15, s0
 8002626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800262a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800262e:	ee17 0a90 	vmov	r0, s15
 8002632:	f7fd ffa1 	bl	8000578 <__aeabi_f2d>
 8002636:	a38c      	add	r3, pc, #560	; (adr r3, 8002868 <createTones+0x15b0>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fd fff4 	bl	8000628 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	4b8b      	ldr	r3, [pc, #556]	; (800287c <createTones+0x15c4>)
 800264e:	f7fd ffeb 	bl	8000628 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f7fe f9f7 	bl	8000a4c <__aeabi_d2uiz>
 800265e:	4603      	mov	r3, r0
 8002660:	b2d9      	uxtb	r1, r3
 8002662:	4a89      	ldr	r2, [pc, #548]	; (8002888 <createTones+0x15d0>)
 8002664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002668:	4413      	add	r3, r2
 800266a:	460a      	mov	r2, r1
 800266c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 45; i++){
 800266e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002672:	3301      	adds	r3, #1
 8002674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002678:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800267c:	2b2c      	cmp	r3, #44	; 0x2c
 800267e:	ddb3      	ble.n	80025e8 <createTones+0x1330>

	/**
	 * ===================== Octave 6 =====================
	 */
	// Tone C6 = 1046.50 Hz
	for(int i = 0; i < 42; i++){
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002686:	e047      	b.n	8002718 <createTones+0x1460>
		C6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 42)) * 256);
 8002688:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800268c:	f7fd ff62 	bl	8000554 <__aeabi_i2d>
 8002690:	a377      	add	r3, pc, #476	; (adr r3, 8002870 <createTones+0x15b8>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fd ffc7 	bl	8000628 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	4b79      	ldr	r3, [pc, #484]	; (800288c <createTones+0x15d4>)
 80026a8:	f7fe f8e8 	bl	800087c <__aeabi_ddiv>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f7fe f9ea 	bl	8000a8c <__aeabi_d2f>
 80026b8:	4603      	mov	r3, r0
 80026ba:	ee00 3a10 	vmov	s0, r3
 80026be:	f00a fa67 	bl	800cb90 <arm_sin_f32>
 80026c2:	eef0 7a40 	vmov.f32	s15, s0
 80026c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026ce:	ee17 0a90 	vmov	r0, s15
 80026d2:	f7fd ff51 	bl	8000578 <__aeabi_f2d>
 80026d6:	a364      	add	r3, pc, #400	; (adr r3, 8002868 <createTones+0x15b0>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ffa4 	bl	8000628 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b63      	ldr	r3, [pc, #396]	; (800287c <createTones+0x15c4>)
 80026ee:	f7fd ff9b 	bl	8000628 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe f9a7 	bl	8000a4c <__aeabi_d2uiz>
 80026fe:	4603      	mov	r3, r0
 8002700:	b2d9      	uxtb	r1, r3
 8002702:	4a63      	ldr	r2, [pc, #396]	; (8002890 <createTones+0x15d8>)
 8002704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002708:	4413      	add	r3, r2
 800270a:	460a      	mov	r2, r1
 800270c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 42; i++){
 800270e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002712:	3301      	adds	r3, #1
 8002714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800271c:	2b29      	cmp	r3, #41	; 0x29
 800271e:	ddb3      	ble.n	8002688 <createTones+0x13d0>
	}

	// Tone CC6 = 1108.73 Hz
	for(int i = 0; i < 40; i++){
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002726:	e047      	b.n	80027b8 <createTones+0x1500>
		CC6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 40)) * 256);
 8002728:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800272c:	f7fd ff12 	bl	8000554 <__aeabi_i2d>
 8002730:	a34f      	add	r3, pc, #316	; (adr r3, 8002870 <createTones+0x15b8>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f7fd ff77 	bl	8000628 <__aeabi_dmul>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	4b53      	ldr	r3, [pc, #332]	; (8002894 <createTones+0x15dc>)
 8002748:	f7fe f898 	bl	800087c <__aeabi_ddiv>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f7fe f99a 	bl	8000a8c <__aeabi_d2f>
 8002758:	4603      	mov	r3, r0
 800275a:	ee00 3a10 	vmov	s0, r3
 800275e:	f00a fa17 	bl	800cb90 <arm_sin_f32>
 8002762:	eef0 7a40 	vmov.f32	s15, s0
 8002766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800276a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800276e:	ee17 0a90 	vmov	r0, s15
 8002772:	f7fd ff01 	bl	8000578 <__aeabi_f2d>
 8002776:	a33c      	add	r3, pc, #240	; (adr r3, 8002868 <createTones+0x15b0>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fd ff54 	bl	8000628 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <createTones+0x15c4>)
 800278e:	f7fd ff4b 	bl	8000628 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f7fe f957 	bl	8000a4c <__aeabi_d2uiz>
 800279e:	4603      	mov	r3, r0
 80027a0:	b2d9      	uxtb	r1, r3
 80027a2:	4a3d      	ldr	r2, [pc, #244]	; (8002898 <createTones+0x15e0>)
 80027a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a8:	4413      	add	r3, r2
 80027aa:	460a      	mov	r2, r1
 80027ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 40; i++){
 80027ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027b2:	3301      	adds	r3, #1
 80027b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027bc:	2b27      	cmp	r3, #39	; 0x27
 80027be:	ddb3      	ble.n	8002728 <createTones+0x1470>
	}

	// Tone D6 = 1174.66 Hz
	for(int i = 0; i < 38; i++){
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027c6:	e047      	b.n	8002858 <createTones+0x15a0>
		D6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 38)) * 256);
 80027c8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80027cc:	f7fd fec2 	bl	8000554 <__aeabi_i2d>
 80027d0:	a327      	add	r3, pc, #156	; (adr r3, 8002870 <createTones+0x15b8>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff27 	bl	8000628 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b2d      	ldr	r3, [pc, #180]	; (800289c <createTones+0x15e4>)
 80027e8:	f7fe f848 	bl	800087c <__aeabi_ddiv>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe f94a 	bl	8000a8c <__aeabi_d2f>
 80027f8:	4603      	mov	r3, r0
 80027fa:	ee00 3a10 	vmov	s0, r3
 80027fe:	f00a f9c7 	bl	800cb90 <arm_sin_f32>
 8002802:	eef0 7a40 	vmov.f32	s15, s0
 8002806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800280a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800280e:	ee17 0a90 	vmov	r0, s15
 8002812:	f7fd feb1 	bl	8000578 <__aeabi_f2d>
 8002816:	a314      	add	r3, pc, #80	; (adr r3, 8002868 <createTones+0x15b0>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd ff04 	bl	8000628 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <createTones+0x15c4>)
 800282e:	f7fd fefb 	bl	8000628 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7fe f907 	bl	8000a4c <__aeabi_d2uiz>
 800283e:	4603      	mov	r3, r0
 8002840:	b2d9      	uxtb	r1, r3
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <createTones+0x15e8>)
 8002844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002848:	4413      	add	r3, r2
 800284a:	460a      	mov	r2, r1
 800284c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 38; i++){
 800284e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002852:	3301      	adds	r3, #1
 8002854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800285c:	2b25      	cmp	r3, #37	; 0x25
 800285e:	ddb3      	ble.n	80027c8 <createTones+0x1510>
	}

	// Tone DD6 = 1244.51 Hz
	for(int i = 0; i < 35; i++){
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002866:	e065      	b.n	8002934 <createTones+0x167c>
 8002868:	51eb851f 	.word	0x51eb851f
 800286c:	3fd51eb8 	.word	0x3fd51eb8
 8002870:	53c8d4f1 	.word	0x53c8d4f1
 8002874:	401921fb 	.word	0x401921fb
 8002878:	40478000 	.word	0x40478000
 800287c:	40700000 	.word	0x40700000
 8002880:	20001368 	.word	0x20001368
 8002884:	40468000 	.word	0x40468000
 8002888:	20001398 	.word	0x20001398
 800288c:	40450000 	.word	0x40450000
 8002890:	200013c8 	.word	0x200013c8
 8002894:	40440000 	.word	0x40440000
 8002898:	200013f4 	.word	0x200013f4
 800289c:	40430000 	.word	0x40430000
 80028a0:	2000141c 	.word	0x2000141c
		DD6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 35)) * 256);
 80028a4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80028a8:	f7fd fe54 	bl	8000554 <__aeabi_i2d>
 80028ac:	a3bc      	add	r3, pc, #752	; (adr r3, 8002ba0 <createTones+0x18e8>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd feb9 	bl	8000628 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4bb9      	ldr	r3, [pc, #740]	; (8002ba8 <createTones+0x18f0>)
 80028c4:	f7fd ffda 	bl	800087c <__aeabi_ddiv>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7fe f8dc 	bl	8000a8c <__aeabi_d2f>
 80028d4:	4603      	mov	r3, r0
 80028d6:	ee00 3a10 	vmov	s0, r3
 80028da:	f00a f959 	bl	800cb90 <arm_sin_f32>
 80028de:	eef0 7a40 	vmov.f32	s15, s0
 80028e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ea:	ee17 0a90 	vmov	r0, s15
 80028ee:	f7fd fe43 	bl	8000578 <__aeabi_f2d>
 80028f2:	a3a9      	add	r3, pc, #676	; (adr r3, 8002b98 <createTones+0x18e0>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f7fd fe96 	bl	8000628 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	4ba8      	ldr	r3, [pc, #672]	; (8002bac <createTones+0x18f4>)
 800290a:	f7fd fe8d 	bl	8000628 <__aeabi_dmul>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f899 	bl	8000a4c <__aeabi_d2uiz>
 800291a:	4603      	mov	r3, r0
 800291c:	b2d9      	uxtb	r1, r3
 800291e:	4aa4      	ldr	r2, [pc, #656]	; (8002bb0 <createTones+0x18f8>)
 8002920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002924:	4413      	add	r3, r2
 8002926:	460a      	mov	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++){
 800292a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800292e:	3301      	adds	r3, #1
 8002930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002938:	2b22      	cmp	r3, #34	; 0x22
 800293a:	ddb3      	ble.n	80028a4 <createTones+0x15ec>
	}

	// Tone E6 = 1318.51 Hz
	for(int i = 0; i < 33; i++){
 800293c:	2300      	movs	r3, #0
 800293e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002940:	e043      	b.n	80029ca <createTones+0x1712>
		E6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 33)) * 256);
 8002942:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002944:	f7fd fe06 	bl	8000554 <__aeabi_i2d>
 8002948:	a395      	add	r3, pc, #596	; (adr r3, 8002ba0 <createTones+0x18e8>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd fe6b 	bl	8000628 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4b95      	ldr	r3, [pc, #596]	; (8002bb4 <createTones+0x18fc>)
 8002960:	f7fd ff8c 	bl	800087c <__aeabi_ddiv>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f7fe f88e 	bl	8000a8c <__aeabi_d2f>
 8002970:	4603      	mov	r3, r0
 8002972:	ee00 3a10 	vmov	s0, r3
 8002976:	f00a f90b 	bl	800cb90 <arm_sin_f32>
 800297a:	eef0 7a40 	vmov.f32	s15, s0
 800297e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002986:	ee17 0a90 	vmov	r0, s15
 800298a:	f7fd fdf5 	bl	8000578 <__aeabi_f2d>
 800298e:	a382      	add	r3, pc, #520	; (adr r3, 8002b98 <createTones+0x18e0>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd fe48 	bl	8000628 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	4b81      	ldr	r3, [pc, #516]	; (8002bac <createTones+0x18f4>)
 80029a6:	f7fd fe3f 	bl	8000628 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	f7fe f84b 	bl	8000a4c <__aeabi_d2uiz>
 80029b6:	4603      	mov	r3, r0
 80029b8:	b2d9      	uxtb	r1, r3
 80029ba:	4a7f      	ldr	r2, [pc, #508]	; (8002bb8 <createTones+0x1900>)
 80029bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029be:	4413      	add	r3, r2
 80029c0:	460a      	mov	r2, r1
 80029c2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 33; i++){
 80029c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029c6:	3301      	adds	r3, #1
 80029c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	ddb8      	ble.n	8002942 <createTones+0x168a>
	}

	// Tone F6 = 1396.91 Hz
	for(int i = 0; i < 32; i++){
 80029d0:	2300      	movs	r3, #0
 80029d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80029d4:	e043      	b.n	8002a5e <createTones+0x17a6>
		F6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 32)) * 256);
 80029d6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029d8:	f7fd fdbc 	bl	8000554 <__aeabi_i2d>
 80029dc:	a370      	add	r3, pc, #448	; (adr r3, 8002ba0 <createTones+0x18e8>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fe21 	bl	8000628 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	4b72      	ldr	r3, [pc, #456]	; (8002bbc <createTones+0x1904>)
 80029f4:	f7fd ff42 	bl	800087c <__aeabi_ddiv>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7fe f844 	bl	8000a8c <__aeabi_d2f>
 8002a04:	4603      	mov	r3, r0
 8002a06:	ee00 3a10 	vmov	s0, r3
 8002a0a:	f00a f8c1 	bl	800cb90 <arm_sin_f32>
 8002a0e:	eef0 7a40 	vmov.f32	s15, s0
 8002a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a1a:	ee17 0a90 	vmov	r0, s15
 8002a1e:	f7fd fdab 	bl	8000578 <__aeabi_f2d>
 8002a22:	a35d      	add	r3, pc, #372	; (adr r3, 8002b98 <createTones+0x18e0>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fd fdfe 	bl	8000628 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	4b5c      	ldr	r3, [pc, #368]	; (8002bac <createTones+0x18f4>)
 8002a3a:	f7fd fdf5 	bl	8000628 <__aeabi_dmul>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7fe f801 	bl	8000a4c <__aeabi_d2uiz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	b2d9      	uxtb	r1, r3
 8002a4e:	4a5c      	ldr	r2, [pc, #368]	; (8002bc0 <createTones+0x1908>)
 8002a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a52:	4413      	add	r3, r2
 8002a54:	460a      	mov	r2, r1
 8002a56:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++){
 8002a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a60:	2b1f      	cmp	r3, #31
 8002a62:	ddb8      	ble.n	80029d6 <createTones+0x171e>
	}

	// Tone FF6 = 1479.98 Hz
	for(int i = 0; i < 30; i++){
 8002a64:	2300      	movs	r3, #0
 8002a66:	677b      	str	r3, [r7, #116]	; 0x74
 8002a68:	e043      	b.n	8002af2 <createTones+0x183a>
		FF6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 30)) * 256);
 8002a6a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a6c:	f7fd fd72 	bl	8000554 <__aeabi_i2d>
 8002a70:	a34b      	add	r3, pc, #300	; (adr r3, 8002ba0 <createTones+0x18e8>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fdd7 	bl	8000628 <__aeabi_dmul>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <createTones+0x190c>)
 8002a88:	f7fd fef8 	bl	800087c <__aeabi_ddiv>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fd fffa 	bl	8000a8c <__aeabi_d2f>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	ee00 3a10 	vmov	s0, r3
 8002a9e:	f00a f877 	bl	800cb90 <arm_sin_f32>
 8002aa2:	eef0 7a40 	vmov.f32	s15, s0
 8002aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aae:	ee17 0a90 	vmov	r0, s15
 8002ab2:	f7fd fd61 	bl	8000578 <__aeabi_f2d>
 8002ab6:	a338      	add	r3, pc, #224	; (adr r3, 8002b98 <createTones+0x18e0>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fdb4 	bl	8000628 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <createTones+0x18f4>)
 8002ace:	f7fd fdab 	bl	8000628 <__aeabi_dmul>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7fd ffb7 	bl	8000a4c <__aeabi_d2uiz>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b2d9      	uxtb	r1, r3
 8002ae2:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <createTones+0x1910>)
 8002ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae6:	4413      	add	r3, r2
 8002ae8:	460a      	mov	r2, r1
 8002aea:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 30; i++){
 8002aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aee:	3301      	adds	r3, #1
 8002af0:	677b      	str	r3, [r7, #116]	; 0x74
 8002af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af4:	2b1d      	cmp	r3, #29
 8002af6:	ddb8      	ble.n	8002a6a <createTones+0x17b2>
	}

	// Tone G6 = 1567.98 Hz
	for(int i = 0; i < 28; i++){
 8002af8:	2300      	movs	r3, #0
 8002afa:	673b      	str	r3, [r7, #112]	; 0x70
 8002afc:	e043      	b.n	8002b86 <createTones+0x18ce>
		G6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 28)) * 256);
 8002afe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002b00:	f7fd fd28 	bl	8000554 <__aeabi_i2d>
 8002b04:	a326      	add	r3, pc, #152	; (adr r3, 8002ba0 <createTones+0x18e8>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fd8d 	bl	8000628 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <createTones+0x1914>)
 8002b1c:	f7fd feae 	bl	800087c <__aeabi_ddiv>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7fd ffb0 	bl	8000a8c <__aeabi_d2f>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	ee00 3a10 	vmov	s0, r3
 8002b32:	f00a f82d 	bl	800cb90 <arm_sin_f32>
 8002b36:	eef0 7a40 	vmov.f32	s15, s0
 8002b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b42:	ee17 0a90 	vmov	r0, s15
 8002b46:	f7fd fd17 	bl	8000578 <__aeabi_f2d>
 8002b4a:	a313      	add	r3, pc, #76	; (adr r3, 8002b98 <createTones+0x18e0>)
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd fd6a 	bl	8000628 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <createTones+0x18f4>)
 8002b62:	f7fd fd61 	bl	8000628 <__aeabi_dmul>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fd ff6d 	bl	8000a4c <__aeabi_d2uiz>
 8002b72:	4603      	mov	r3, r0
 8002b74:	b2d9      	uxtb	r1, r3
 8002b76:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <createTones+0x1918>)
 8002b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b7a:	4413      	add	r3, r2
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 8002b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b82:	3301      	adds	r3, #1
 8002b84:	673b      	str	r3, [r7, #112]	; 0x70
 8002b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b88:	2b1b      	cmp	r3, #27
 8002b8a:	ddb8      	ble.n	8002afe <createTones+0x1846>
	}

	// Tone GG6 = 1661.22 Hz
	for(int i = 0; i < 27; i++){
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b90:	e064      	b.n	8002c5c <createTones+0x19a4>
 8002b92:	bf00      	nop
 8002b94:	f3af 8000 	nop.w
 8002b98:	51eb851f 	.word	0x51eb851f
 8002b9c:	3fd51eb8 	.word	0x3fd51eb8
 8002ba0:	53c8d4f1 	.word	0x53c8d4f1
 8002ba4:	401921fb 	.word	0x401921fb
 8002ba8:	40418000 	.word	0x40418000
 8002bac:	40700000 	.word	0x40700000
 8002bb0:	20001444 	.word	0x20001444
 8002bb4:	40408000 	.word	0x40408000
 8002bb8:	20001468 	.word	0x20001468
 8002bbc:	40400000 	.word	0x40400000
 8002bc0:	2000148c 	.word	0x2000148c
 8002bc4:	403e0000 	.word	0x403e0000
 8002bc8:	200014ac 	.word	0x200014ac
 8002bcc:	403c0000 	.word	0x403c0000
 8002bd0:	200014cc 	.word	0x200014cc
		GG6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 27)) * 256);
 8002bd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bd6:	f7fd fcbd 	bl	8000554 <__aeabi_i2d>
 8002bda:	a3b9      	add	r3, pc, #740	; (adr r3, 8002ec0 <createTones+0x1c08>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fd22 	bl	8000628 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	4bb5      	ldr	r3, [pc, #724]	; (8002ec8 <createTones+0x1c10>)
 8002bf2:	f7fd fe43 	bl	800087c <__aeabi_ddiv>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ff45 	bl	8000a8c <__aeabi_d2f>
 8002c02:	4603      	mov	r3, r0
 8002c04:	ee00 3a10 	vmov	s0, r3
 8002c08:	f009 ffc2 	bl	800cb90 <arm_sin_f32>
 8002c0c:	eef0 7a40 	vmov.f32	s15, s0
 8002c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c18:	ee17 0a90 	vmov	r0, s15
 8002c1c:	f7fd fcac 	bl	8000578 <__aeabi_f2d>
 8002c20:	a3a5      	add	r3, pc, #660	; (adr r3, 8002eb8 <createTones+0x1c00>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fcff 	bl	8000628 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4ba5      	ldr	r3, [pc, #660]	; (8002ecc <createTones+0x1c14>)
 8002c38:	f7fd fcf6 	bl	8000628 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fd ff02 	bl	8000a4c <__aeabi_d2uiz>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	b2d9      	uxtb	r1, r3
 8002c4c:	4aa0      	ldr	r2, [pc, #640]	; (8002ed0 <createTones+0x1c18>)
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	4413      	add	r3, r2
 8002c52:	460a      	mov	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 27; i++){
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c58:	3301      	adds	r3, #1
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	2b1a      	cmp	r3, #26
 8002c60:	ddb8      	ble.n	8002bd4 <createTones+0x191c>
	}

	// Tone A6 = 1760.00 Hz
	for(int i = 0; i < 25; i++){
 8002c62:	2300      	movs	r3, #0
 8002c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c66:	e043      	b.n	8002cf0 <createTones+0x1a38>
		A6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 25)) * 256);
 8002c68:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c6a:	f7fd fc73 	bl	8000554 <__aeabi_i2d>
 8002c6e:	a394      	add	r3, pc, #592	; (adr r3, 8002ec0 <createTones+0x1c08>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fcd8 	bl	8000628 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	4b93      	ldr	r3, [pc, #588]	; (8002ed4 <createTones+0x1c1c>)
 8002c86:	f7fd fdf9 	bl	800087c <__aeabi_ddiv>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd fefb 	bl	8000a8c <__aeabi_d2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	ee00 3a10 	vmov	s0, r3
 8002c9c:	f009 ff78 	bl	800cb90 <arm_sin_f32>
 8002ca0:	eef0 7a40 	vmov.f32	s15, s0
 8002ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cac:	ee17 0a90 	vmov	r0, s15
 8002cb0:	f7fd fc62 	bl	8000578 <__aeabi_f2d>
 8002cb4:	a380      	add	r3, pc, #512	; (adr r3, 8002eb8 <createTones+0x1c00>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fcb5 	bl	8000628 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	4b80      	ldr	r3, [pc, #512]	; (8002ecc <createTones+0x1c14>)
 8002ccc:	f7fd fcac 	bl	8000628 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd feb8 	bl	8000a4c <__aeabi_d2uiz>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	b2d9      	uxtb	r1, r3
 8002ce0:	4a7d      	ldr	r2, [pc, #500]	; (8002ed8 <createTones+0x1c20>)
 8002ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce4:	4413      	add	r3, r2
 8002ce6:	460a      	mov	r2, r1
 8002ce8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 25; i++){
 8002cea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cec:	3301      	adds	r3, #1
 8002cee:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cf2:	2b18      	cmp	r3, #24
 8002cf4:	ddb8      	ble.n	8002c68 <createTones+0x19b0>
	}

	// Tone AA6 = 1864.66 Hz
	for(int i = 0; i < 24; i++){
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8002cfa:	e043      	b.n	8002d84 <createTones+0x1acc>
		AA6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 24)) * 256);
 8002cfc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002cfe:	f7fd fc29 	bl	8000554 <__aeabi_i2d>
 8002d02:	a36f      	add	r3, pc, #444	; (adr r3, 8002ec0 <createTones+0x1c08>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f7fd fc8e 	bl	8000628 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	4b70      	ldr	r3, [pc, #448]	; (8002edc <createTones+0x1c24>)
 8002d1a:	f7fd fdaf 	bl	800087c <__aeabi_ddiv>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7fd feb1 	bl	8000a8c <__aeabi_d2f>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	ee00 3a10 	vmov	s0, r3
 8002d30:	f009 ff2e 	bl	800cb90 <arm_sin_f32>
 8002d34:	eef0 7a40 	vmov.f32	s15, s0
 8002d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d40:	ee17 0a90 	vmov	r0, s15
 8002d44:	f7fd fc18 	bl	8000578 <__aeabi_f2d>
 8002d48:	a35b      	add	r3, pc, #364	; (adr r3, 8002eb8 <createTones+0x1c00>)
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	f7fd fc6b 	bl	8000628 <__aeabi_dmul>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <createTones+0x1c14>)
 8002d60:	f7fd fc62 	bl	8000628 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fd fe6e 	bl	8000a4c <__aeabi_d2uiz>
 8002d70:	4603      	mov	r3, r0
 8002d72:	b2d9      	uxtb	r1, r3
 8002d74:	4a5a      	ldr	r2, [pc, #360]	; (8002ee0 <createTones+0x1c28>)
 8002d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d78:	4413      	add	r3, r2
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 24; i++){
 8002d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d80:	3301      	adds	r3, #1
 8002d82:	667b      	str	r3, [r7, #100]	; 0x64
 8002d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d86:	2b17      	cmp	r3, #23
 8002d88:	ddb8      	ble.n	8002cfc <createTones+0x1a44>
	}

	// Tone B6 = 1975.53 Hz
	for(int i = 0; i < 22; i++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d8e:	e043      	b.n	8002e18 <createTones+0x1b60>
		B6[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 22)) * 256);
 8002d90:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002d92:	f7fd fbdf 	bl	8000554 <__aeabi_i2d>
 8002d96:	a34a      	add	r3, pc, #296	; (adr r3, 8002ec0 <createTones+0x1c08>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fc44 	bl	8000628 <__aeabi_dmul>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <createTones+0x1c2c>)
 8002dae:	f7fd fd65 	bl	800087c <__aeabi_ddiv>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd fe67 	bl	8000a8c <__aeabi_d2f>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	ee00 3a10 	vmov	s0, r3
 8002dc4:	f009 fee4 	bl	800cb90 <arm_sin_f32>
 8002dc8:	eef0 7a40 	vmov.f32	s15, s0
 8002dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dd4:	ee17 0a90 	vmov	r0, s15
 8002dd8:	f7fd fbce 	bl	8000578 <__aeabi_f2d>
 8002ddc:	a336      	add	r3, pc, #216	; (adr r3, 8002eb8 <createTones+0x1c00>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f7fd fc21 	bl	8000628 <__aeabi_dmul>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <createTones+0x1c14>)
 8002df4:	f7fd fc18 	bl	8000628 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7fd fe24 	bl	8000a4c <__aeabi_d2uiz>
 8002e04:	4603      	mov	r3, r0
 8002e06:	b2d9      	uxtb	r1, r3
 8002e08:	4a37      	ldr	r2, [pc, #220]	; (8002ee8 <createTones+0x1c30>)
 8002e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e0c:	4413      	add	r3, r2
 8002e0e:	460a      	mov	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++){
 8002e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e14:	3301      	adds	r3, #1
 8002e16:	663b      	str	r3, [r7, #96]	; 0x60
 8002e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e1a:	2b15      	cmp	r3, #21
 8002e1c:	ddb8      	ble.n	8002d90 <createTones+0x1ad8>

	/**
	 * ===================== Octave 7 =====================
	 */
	// Tone C7 = 2093.00 Hz
	for(int i = 0; i < 21; i++){
 8002e1e:	2300      	movs	r3, #0
 8002e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e22:	e043      	b.n	8002eac <createTones+0x1bf4>
		C7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 21)) * 256);
 8002e24:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002e26:	f7fd fb95 	bl	8000554 <__aeabi_i2d>
 8002e2a:	a325      	add	r3, pc, #148	; (adr r3, 8002ec0 <createTones+0x1c08>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f7fd fbfa 	bl	8000628 <__aeabi_dmul>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <createTones+0x1c34>)
 8002e42:	f7fd fd1b 	bl	800087c <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fe1d 	bl	8000a8c <__aeabi_d2f>
 8002e52:	4603      	mov	r3, r0
 8002e54:	ee00 3a10 	vmov	s0, r3
 8002e58:	f009 fe9a 	bl	800cb90 <arm_sin_f32>
 8002e5c:	eef0 7a40 	vmov.f32	s15, s0
 8002e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e68:	ee17 0a90 	vmov	r0, s15
 8002e6c:	f7fd fb84 	bl	8000578 <__aeabi_f2d>
 8002e70:	a311      	add	r3, pc, #68	; (adr r3, 8002eb8 <createTones+0x1c00>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fbd7 	bl	8000628 <__aeabi_dmul>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <createTones+0x1c14>)
 8002e88:	f7fd fbce 	bl	8000628 <__aeabi_dmul>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f7fd fdda 	bl	8000a4c <__aeabi_d2uiz>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	b2d9      	uxtb	r1, r3
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <createTones+0x1c38>)
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea0:	4413      	add	r3, r2
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 21; i++){
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eae:	2b14      	cmp	r3, #20
 8002eb0:	ddb8      	ble.n	8002e24 <createTones+0x1b6c>
	}

	// Tone CC7 = 2217.46 Hz
	for(int i = 0; i < 20; i++){
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eb6:	e061      	b.n	8002f7c <createTones+0x1cc4>
 8002eb8:	51eb851f 	.word	0x51eb851f
 8002ebc:	3fd51eb8 	.word	0x3fd51eb8
 8002ec0:	53c8d4f1 	.word	0x53c8d4f1
 8002ec4:	401921fb 	.word	0x401921fb
 8002ec8:	403b0000 	.word	0x403b0000
 8002ecc:	40700000 	.word	0x40700000
 8002ed0:	200014e8 	.word	0x200014e8
 8002ed4:	40390000 	.word	0x40390000
 8002ed8:	20001504 	.word	0x20001504
 8002edc:	40380000 	.word	0x40380000
 8002ee0:	20001520 	.word	0x20001520
 8002ee4:	40360000 	.word	0x40360000
 8002ee8:	20001538 	.word	0x20001538
 8002eec:	40350000 	.word	0x40350000
 8002ef0:	20001550 	.word	0x20001550
		CC7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 20)) * 256);
 8002ef4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002ef6:	f7fd fb2d 	bl	8000554 <__aeabi_i2d>
 8002efa:	a3b9      	add	r3, pc, #740	; (adr r3, 80031e0 <createTones+0x1f28>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd fb92 	bl	8000628 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	4bb5      	ldr	r3, [pc, #724]	; (80031e8 <createTones+0x1f30>)
 8002f12:	f7fd fcb3 	bl	800087c <__aeabi_ddiv>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f7fd fdb5 	bl	8000a8c <__aeabi_d2f>
 8002f22:	4603      	mov	r3, r0
 8002f24:	ee00 3a10 	vmov	s0, r3
 8002f28:	f009 fe32 	bl	800cb90 <arm_sin_f32>
 8002f2c:	eef0 7a40 	vmov.f32	s15, s0
 8002f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f38:	ee17 0a90 	vmov	r0, s15
 8002f3c:	f7fd fb1c 	bl	8000578 <__aeabi_f2d>
 8002f40:	a3a5      	add	r3, pc, #660	; (adr r3, 80031d8 <createTones+0x1f20>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	f7fd fb6f 	bl	8000628 <__aeabi_dmul>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	4ba5      	ldr	r3, [pc, #660]	; (80031ec <createTones+0x1f34>)
 8002f58:	f7fd fb66 	bl	8000628 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fd72 	bl	8000a4c <__aeabi_d2uiz>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b2d9      	uxtb	r1, r3
 8002f6c:	4aa0      	ldr	r2, [pc, #640]	; (80031f0 <createTones+0x1f38>)
 8002f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f70:	4413      	add	r3, r2
 8002f72:	460a      	mov	r2, r1
 8002f74:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 20; i++){
 8002f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f78:	3301      	adds	r3, #1
 8002f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7e:	2b13      	cmp	r3, #19
 8002f80:	ddb8      	ble.n	8002ef4 <createTones+0x1c3c>
	}

	// Tone D7 = 2349.32 Hz
	for(int i = 0; i < 19; i++){
 8002f82:	2300      	movs	r3, #0
 8002f84:	657b      	str	r3, [r7, #84]	; 0x54
 8002f86:	e043      	b.n	8003010 <createTones+0x1d58>
		D7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 19)) * 256);
 8002f88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002f8a:	f7fd fae3 	bl	8000554 <__aeabi_i2d>
 8002f8e:	a394      	add	r3, pc, #592	; (adr r3, 80031e0 <createTones+0x1f28>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd fb48 	bl	8000628 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	4b93      	ldr	r3, [pc, #588]	; (80031f4 <createTones+0x1f3c>)
 8002fa6:	f7fd fc69 	bl	800087c <__aeabi_ddiv>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fd fd6b 	bl	8000a8c <__aeabi_d2f>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	ee00 3a10 	vmov	s0, r3
 8002fbc:	f009 fde8 	bl	800cb90 <arm_sin_f32>
 8002fc0:	eef0 7a40 	vmov.f32	s15, s0
 8002fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fcc:	ee17 0a90 	vmov	r0, s15
 8002fd0:	f7fd fad2 	bl	8000578 <__aeabi_f2d>
 8002fd4:	a380      	add	r3, pc, #512	; (adr r3, 80031d8 <createTones+0x1f20>)
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	f7fd fb25 	bl	8000628 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	4b80      	ldr	r3, [pc, #512]	; (80031ec <createTones+0x1f34>)
 8002fec:	f7fd fb1c 	bl	8000628 <__aeabi_dmul>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f7fd fd28 	bl	8000a4c <__aeabi_d2uiz>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	b2d9      	uxtb	r1, r3
 8003000:	4a7d      	ldr	r2, [pc, #500]	; (80031f8 <createTones+0x1f40>)
 8003002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003004:	4413      	add	r3, r2
 8003006:	460a      	mov	r2, r1
 8003008:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++){
 800300a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300c:	3301      	adds	r3, #1
 800300e:	657b      	str	r3, [r7, #84]	; 0x54
 8003010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003012:	2b12      	cmp	r3, #18
 8003014:	ddb8      	ble.n	8002f88 <createTones+0x1cd0>
	}

	// Tone DD7 = 2489.02 Hz
	for(int i = 0; i < 18; i++){
 8003016:	2300      	movs	r3, #0
 8003018:	653b      	str	r3, [r7, #80]	; 0x50
 800301a:	e043      	b.n	80030a4 <createTones+0x1dec>
		DD7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 18)) * 256);
 800301c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800301e:	f7fd fa99 	bl	8000554 <__aeabi_i2d>
 8003022:	a36f      	add	r3, pc, #444	; (adr r3, 80031e0 <createTones+0x1f28>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fafe 	bl	8000628 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4b70      	ldr	r3, [pc, #448]	; (80031fc <createTones+0x1f44>)
 800303a:	f7fd fc1f 	bl	800087c <__aeabi_ddiv>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	f7fd fd21 	bl	8000a8c <__aeabi_d2f>
 800304a:	4603      	mov	r3, r0
 800304c:	ee00 3a10 	vmov	s0, r3
 8003050:	f009 fd9e 	bl	800cb90 <arm_sin_f32>
 8003054:	eef0 7a40 	vmov.f32	s15, s0
 8003058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800305c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003060:	ee17 0a90 	vmov	r0, s15
 8003064:	f7fd fa88 	bl	8000578 <__aeabi_f2d>
 8003068:	a35b      	add	r3, pc, #364	; (adr r3, 80031d8 <createTones+0x1f20>)
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f7fd fadb 	bl	8000628 <__aeabi_dmul>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <createTones+0x1f34>)
 8003080:	f7fd fad2 	bl	8000628 <__aeabi_dmul>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f7fd fcde 	bl	8000a4c <__aeabi_d2uiz>
 8003090:	4603      	mov	r3, r0
 8003092:	b2d9      	uxtb	r1, r3
 8003094:	4a5a      	ldr	r2, [pc, #360]	; (8003200 <createTones+0x1f48>)
 8003096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003098:	4413      	add	r3, r2
 800309a:	460a      	mov	r2, r1
 800309c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 18; i++){
 800309e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a0:	3301      	adds	r3, #1
 80030a2:	653b      	str	r3, [r7, #80]	; 0x50
 80030a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a6:	2b11      	cmp	r3, #17
 80030a8:	ddb8      	ble.n	800301c <createTones+0x1d64>
	}

	// Tone E7 = 2637.02 Hz
	for(int i = 0; i < 17; i++){
 80030aa:	2300      	movs	r3, #0
 80030ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ae:	e043      	b.n	8003138 <createTones+0x1e80>
		E7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 17)) * 256);
 80030b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80030b2:	f7fd fa4f 	bl	8000554 <__aeabi_i2d>
 80030b6:	a34a      	add	r3, pc, #296	; (adr r3, 80031e0 <createTones+0x1f28>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd fab4 	bl	8000628 <__aeabi_dmul>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <createTones+0x1f4c>)
 80030ce:	f7fd fbd5 	bl	800087c <__aeabi_ddiv>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	f7fd fcd7 	bl	8000a8c <__aeabi_d2f>
 80030de:	4603      	mov	r3, r0
 80030e0:	ee00 3a10 	vmov	s0, r3
 80030e4:	f009 fd54 	bl	800cb90 <arm_sin_f32>
 80030e8:	eef0 7a40 	vmov.f32	s15, s0
 80030ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030f4:	ee17 0a90 	vmov	r0, s15
 80030f8:	f7fd fa3e 	bl	8000578 <__aeabi_f2d>
 80030fc:	a336      	add	r3, pc, #216	; (adr r3, 80031d8 <createTones+0x1f20>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd fa91 	bl	8000628 <__aeabi_dmul>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4610      	mov	r0, r2
 800310c:	4619      	mov	r1, r3
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	4b36      	ldr	r3, [pc, #216]	; (80031ec <createTones+0x1f34>)
 8003114:	f7fd fa88 	bl	8000628 <__aeabi_dmul>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f7fd fc94 	bl	8000a4c <__aeabi_d2uiz>
 8003124:	4603      	mov	r3, r0
 8003126:	b2d9      	uxtb	r1, r3
 8003128:	4a37      	ldr	r2, [pc, #220]	; (8003208 <createTones+0x1f50>)
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	4413      	add	r3, r2
 800312e:	460a      	mov	r2, r1
 8003130:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 17; i++){
 8003132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003134:	3301      	adds	r3, #1
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313a:	2b10      	cmp	r3, #16
 800313c:	ddb8      	ble.n	80030b0 <createTones+0x1df8>
	}

	// Tone F7 = 2793.83 Hz
	for(int i = 0; i < 16; i++){
 800313e:	2300      	movs	r3, #0
 8003140:	64bb      	str	r3, [r7, #72]	; 0x48
 8003142:	e043      	b.n	80031cc <createTones+0x1f14>
		F7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 16)) * 256);
 8003144:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003146:	f7fd fa05 	bl	8000554 <__aeabi_i2d>
 800314a:	a325      	add	r3, pc, #148	; (adr r3, 80031e0 <createTones+0x1f28>)
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f7fd fa6a 	bl	8000628 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <createTones+0x1f54>)
 8003162:	f7fd fb8b 	bl	800087c <__aeabi_ddiv>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f7fd fc8d 	bl	8000a8c <__aeabi_d2f>
 8003172:	4603      	mov	r3, r0
 8003174:	ee00 3a10 	vmov	s0, r3
 8003178:	f009 fd0a 	bl	800cb90 <arm_sin_f32>
 800317c:	eef0 7a40 	vmov.f32	s15, s0
 8003180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003188:	ee17 0a90 	vmov	r0, s15
 800318c:	f7fd f9f4 	bl	8000578 <__aeabi_f2d>
 8003190:	a311      	add	r3, pc, #68	; (adr r3, 80031d8 <createTones+0x1f20>)
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f7fd fa47 	bl	8000628 <__aeabi_dmul>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <createTones+0x1f34>)
 80031a8:	f7fd fa3e 	bl	8000628 <__aeabi_dmul>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	f7fd fc4a 	bl	8000a4c <__aeabi_d2uiz>
 80031b8:	4603      	mov	r3, r0
 80031ba:	b2d9      	uxtb	r1, r3
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <createTones+0x1f58>)
 80031be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c0:	4413      	add	r3, r2
 80031c2:	460a      	mov	r2, r1
 80031c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 16; i++){
 80031c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c8:	3301      	adds	r3, #1
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80031cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	ddb8      	ble.n	8003144 <createTones+0x1e8c>
	}

	// Tone FF7 = 2959.96 Hz
	for(int i = 0; i < 15; i++){
 80031d2:	2300      	movs	r3, #0
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
 80031d6:	e061      	b.n	800329c <createTones+0x1fe4>
 80031d8:	51eb851f 	.word	0x51eb851f
 80031dc:	3fd51eb8 	.word	0x3fd51eb8
 80031e0:	53c8d4f1 	.word	0x53c8d4f1
 80031e4:	401921fb 	.word	0x401921fb
 80031e8:	40340000 	.word	0x40340000
 80031ec:	40700000 	.word	0x40700000
 80031f0:	20001568 	.word	0x20001568
 80031f4:	40330000 	.word	0x40330000
 80031f8:	2000157c 	.word	0x2000157c
 80031fc:	40320000 	.word	0x40320000
 8003200:	20001590 	.word	0x20001590
 8003204:	40310000 	.word	0x40310000
 8003208:	200015a4 	.word	0x200015a4
 800320c:	40300000 	.word	0x40300000
 8003210:	200015b8 	.word	0x200015b8
		FF7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 15)) * 256);
 8003214:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003216:	f7fd f99d 	bl	8000554 <__aeabi_i2d>
 800321a:	a3b9      	add	r3, pc, #740	; (adr r3, 8003500 <createTones+0x2248>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fd fa02 	bl	8000628 <__aeabi_dmul>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	4bb5      	ldr	r3, [pc, #724]	; (8003508 <createTones+0x2250>)
 8003232:	f7fd fb23 	bl	800087c <__aeabi_ddiv>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	f7fd fc25 	bl	8000a8c <__aeabi_d2f>
 8003242:	4603      	mov	r3, r0
 8003244:	ee00 3a10 	vmov	s0, r3
 8003248:	f009 fca2 	bl	800cb90 <arm_sin_f32>
 800324c:	eef0 7a40 	vmov.f32	s15, s0
 8003250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003258:	ee17 0a90 	vmov	r0, s15
 800325c:	f7fd f98c 	bl	8000578 <__aeabi_f2d>
 8003260:	a3a5      	add	r3, pc, #660	; (adr r3, 80034f8 <createTones+0x2240>)
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	f7fd f9df 	bl	8000628 <__aeabi_dmul>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	4ba5      	ldr	r3, [pc, #660]	; (800350c <createTones+0x2254>)
 8003278:	f7fd f9d6 	bl	8000628 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f7fd fbe2 	bl	8000a4c <__aeabi_d2uiz>
 8003288:	4603      	mov	r3, r0
 800328a:	b2d9      	uxtb	r1, r3
 800328c:	4aa0      	ldr	r2, [pc, #640]	; (8003510 <createTones+0x2258>)
 800328e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003290:	4413      	add	r3, r2
 8003292:	460a      	mov	r2, r1
 8003294:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 8003296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003298:	3301      	adds	r3, #1
 800329a:	647b      	str	r3, [r7, #68]	; 0x44
 800329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329e:	2b0e      	cmp	r3, #14
 80032a0:	ddb8      	ble.n	8003214 <createTones+0x1f5c>
	}

	// Tone G7 = 3135.96 Hz
	for(int i = 0; i < 14; i++){
 80032a2:	2300      	movs	r3, #0
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
 80032a6:	e043      	b.n	8003330 <createTones+0x2078>
		G7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 14)) * 256);
 80032a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80032aa:	f7fd f953 	bl	8000554 <__aeabi_i2d>
 80032ae:	a394      	add	r3, pc, #592	; (adr r3, 8003500 <createTones+0x2248>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd f9b8 	bl	8000628 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	4b93      	ldr	r3, [pc, #588]	; (8003514 <createTones+0x225c>)
 80032c6:	f7fd fad9 	bl	800087c <__aeabi_ddiv>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fbdb 	bl	8000a8c <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	ee00 3a10 	vmov	s0, r3
 80032dc:	f009 fc58 	bl	800cb90 <arm_sin_f32>
 80032e0:	eef0 7a40 	vmov.f32	s15, s0
 80032e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032ec:	ee17 0a90 	vmov	r0, s15
 80032f0:	f7fd f942 	bl	8000578 <__aeabi_f2d>
 80032f4:	a380      	add	r3, pc, #512	; (adr r3, 80034f8 <createTones+0x2240>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fd f995 	bl	8000628 <__aeabi_dmul>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	4b80      	ldr	r3, [pc, #512]	; (800350c <createTones+0x2254>)
 800330c:	f7fd f98c 	bl	8000628 <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	f7fd fb98 	bl	8000a4c <__aeabi_d2uiz>
 800331c:	4603      	mov	r3, r0
 800331e:	b2d9      	uxtb	r1, r3
 8003320:	4a7d      	ldr	r2, [pc, #500]	; (8003518 <createTones+0x2260>)
 8003322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003324:	4413      	add	r3, r2
 8003326:	460a      	mov	r2, r1
 8003328:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 14; i++){
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	3301      	adds	r3, #1
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	2b0d      	cmp	r3, #13
 8003334:	ddb8      	ble.n	80032a8 <createTones+0x1ff0>
	}

	// Tone GG7 = 3322.44 Hz
	for(int i = 0; i < 13; i++){
 8003336:	2300      	movs	r3, #0
 8003338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800333a:	e043      	b.n	80033c4 <createTones+0x210c>
		GG7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 13)) * 256);
 800333c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800333e:	f7fd f909 	bl	8000554 <__aeabi_i2d>
 8003342:	a36f      	add	r3, pc, #444	; (adr r3, 8003500 <createTones+0x2248>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fd f96e 	bl	8000628 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	4b70      	ldr	r3, [pc, #448]	; (800351c <createTones+0x2264>)
 800335a:	f7fd fa8f 	bl	800087c <__aeabi_ddiv>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	f7fd fb91 	bl	8000a8c <__aeabi_d2f>
 800336a:	4603      	mov	r3, r0
 800336c:	ee00 3a10 	vmov	s0, r3
 8003370:	f009 fc0e 	bl	800cb90 <arm_sin_f32>
 8003374:	eef0 7a40 	vmov.f32	s15, s0
 8003378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800337c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003380:	ee17 0a90 	vmov	r0, s15
 8003384:	f7fd f8f8 	bl	8000578 <__aeabi_f2d>
 8003388:	a35b      	add	r3, pc, #364	; (adr r3, 80034f8 <createTones+0x2240>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f7fd f94b 	bl	8000628 <__aeabi_dmul>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	4b5b      	ldr	r3, [pc, #364]	; (800350c <createTones+0x2254>)
 80033a0:	f7fd f942 	bl	8000628 <__aeabi_dmul>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fd fb4e 	bl	8000a4c <__aeabi_d2uiz>
 80033b0:	4603      	mov	r3, r0
 80033b2:	b2d9      	uxtb	r1, r3
 80033b4:	4a5a      	ldr	r2, [pc, #360]	; (8003520 <createTones+0x2268>)
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b8:	4413      	add	r3, r2
 80033ba:	460a      	mov	r2, r1
 80033bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 13; i++){
 80033be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c0:	3301      	adds	r3, #1
 80033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	ddb8      	ble.n	800333c <createTones+0x2084>
	}

	// Tone A7 = 3520.00 Hz
	for(int i = 0; i < 13; i++){
 80033ca:	2300      	movs	r3, #0
 80033cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ce:	e043      	b.n	8003458 <createTones+0x21a0>
		A7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 13)) * 256);
 80033d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033d2:	f7fd f8bf 	bl	8000554 <__aeabi_i2d>
 80033d6:	a34a      	add	r3, pc, #296	; (adr r3, 8003500 <createTones+0x2248>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f7fd f924 	bl	8000628 <__aeabi_dmul>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <createTones+0x2264>)
 80033ee:	f7fd fa45 	bl	800087c <__aeabi_ddiv>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7fd fb47 	bl	8000a8c <__aeabi_d2f>
 80033fe:	4603      	mov	r3, r0
 8003400:	ee00 3a10 	vmov	s0, r3
 8003404:	f009 fbc4 	bl	800cb90 <arm_sin_f32>
 8003408:	eef0 7a40 	vmov.f32	s15, s0
 800340c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003410:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003414:	ee17 0a90 	vmov	r0, s15
 8003418:	f7fd f8ae 	bl	8000578 <__aeabi_f2d>
 800341c:	a336      	add	r3, pc, #216	; (adr r3, 80034f8 <createTones+0x2240>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f7fd f901 	bl	8000628 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <createTones+0x2254>)
 8003434:	f7fd f8f8 	bl	8000628 <__aeabi_dmul>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	f7fd fb04 	bl	8000a4c <__aeabi_d2uiz>
 8003444:	4603      	mov	r3, r0
 8003446:	b2d9      	uxtb	r1, r3
 8003448:	4a36      	ldr	r2, [pc, #216]	; (8003524 <createTones+0x226c>)
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	4413      	add	r3, r2
 800344e:	460a      	mov	r2, r1
 8003450:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 13; i++){
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	3301      	adds	r3, #1
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	2b0c      	cmp	r3, #12
 800345c:	ddb8      	ble.n	80033d0 <createTones+0x2118>
	}

	// Tone AA7 = 3729.31 Hz
	for(int i = 0; i < 12; i++){
 800345e:	2300      	movs	r3, #0
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
 8003462:	e043      	b.n	80034ec <createTones+0x2234>
		AA7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 12)) * 256);
 8003464:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003466:	f7fd f875 	bl	8000554 <__aeabi_i2d>
 800346a:	a325      	add	r3, pc, #148	; (adr r3, 8003500 <createTones+0x2248>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f8da 	bl	8000628 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	4b29      	ldr	r3, [pc, #164]	; (8003528 <createTones+0x2270>)
 8003482:	f7fd f9fb 	bl	800087c <__aeabi_ddiv>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	f7fd fafd 	bl	8000a8c <__aeabi_d2f>
 8003492:	4603      	mov	r3, r0
 8003494:	ee00 3a10 	vmov	s0, r3
 8003498:	f009 fb7a 	bl	800cb90 <arm_sin_f32>
 800349c:	eef0 7a40 	vmov.f32	s15, s0
 80034a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034a8:	ee17 0a90 	vmov	r0, s15
 80034ac:	f7fd f864 	bl	8000578 <__aeabi_f2d>
 80034b0:	a311      	add	r3, pc, #68	; (adr r3, 80034f8 <createTones+0x2240>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd f8b7 	bl	8000628 <__aeabi_dmul>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <createTones+0x2254>)
 80034c8:	f7fd f8ae 	bl	8000628 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	f7fd faba 	bl	8000a4c <__aeabi_d2uiz>
 80034d8:	4603      	mov	r3, r0
 80034da:	b2d9      	uxtb	r1, r3
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <createTones+0x2274>)
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	4413      	add	r3, r2
 80034e2:	460a      	mov	r2, r1
 80034e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 12; i++){
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	3301      	adds	r3, #1
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
 80034ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ee:	2b0b      	cmp	r3, #11
 80034f0:	ddb8      	ble.n	8003464 <createTones+0x21ac>
	}

	// Tone B7 = 3951.07 Hz
	for(int i = 0; i < 11; i++){
 80034f2:	2300      	movs	r3, #0
 80034f4:	633b      	str	r3, [r7, #48]	; 0x30
 80034f6:	e05f      	b.n	80035b8 <createTones+0x2300>
 80034f8:	51eb851f 	.word	0x51eb851f
 80034fc:	3fd51eb8 	.word	0x3fd51eb8
 8003500:	53c8d4f1 	.word	0x53c8d4f1
 8003504:	401921fb 	.word	0x401921fb
 8003508:	402e0000 	.word	0x402e0000
 800350c:	40700000 	.word	0x40700000
 8003510:	200015c8 	.word	0x200015c8
 8003514:	402c0000 	.word	0x402c0000
 8003518:	200015d8 	.word	0x200015d8
 800351c:	402a0000 	.word	0x402a0000
 8003520:	200015e8 	.word	0x200015e8
 8003524:	200015f8 	.word	0x200015f8
 8003528:	40280000 	.word	0x40280000
 800352c:	20001608 	.word	0x20001608
		B7[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 11)) * 256);
 8003530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003532:	f7fd f80f 	bl	8000554 <__aeabi_i2d>
 8003536:	a3ba      	add	r3, pc, #744	; (adr r3, 8003820 <createTones+0x2568>)
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f7fd f874 	bl	8000628 <__aeabi_dmul>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	4bb6      	ldr	r3, [pc, #728]	; (8003828 <createTones+0x2570>)
 800354e:	f7fd f995 	bl	800087c <__aeabi_ddiv>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f7fd fa97 	bl	8000a8c <__aeabi_d2f>
 800355e:	4603      	mov	r3, r0
 8003560:	ee00 3a10 	vmov	s0, r3
 8003564:	f009 fb14 	bl	800cb90 <arm_sin_f32>
 8003568:	eef0 7a40 	vmov.f32	s15, s0
 800356c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003574:	ee17 0a90 	vmov	r0, s15
 8003578:	f7fc fffe 	bl	8000578 <__aeabi_f2d>
 800357c:	a3a6      	add	r3, pc, #664	; (adr r3, 8003818 <createTones+0x2560>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fd f851 	bl	8000628 <__aeabi_dmul>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	4ba6      	ldr	r3, [pc, #664]	; (800382c <createTones+0x2574>)
 8003594:	f7fd f848 	bl	8000628 <__aeabi_dmul>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f7fd fa54 	bl	8000a4c <__aeabi_d2uiz>
 80035a4:	4603      	mov	r3, r0
 80035a6:	b2d9      	uxtb	r1, r3
 80035a8:	4aa1      	ldr	r2, [pc, #644]	; (8003830 <createTones+0x2578>)
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	4413      	add	r3, r2
 80035ae:	460a      	mov	r2, r1
 80035b0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 11; i++){
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	3301      	adds	r3, #1
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	2b0a      	cmp	r3, #10
 80035bc:	ddb8      	ble.n	8003530 <createTones+0x2278>

	/**
	 * ===================== Octave 8 =====================
	 */
	// Tone C8 = 4186.01 Hz
	for(int i = 0; i < 11; i++){
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c2:	e043      	b.n	800364c <createTones+0x2394>
		C8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 11)) * 256);
 80035c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035c6:	f7fc ffc5 	bl	8000554 <__aeabi_i2d>
 80035ca:	a395      	add	r3, pc, #596	; (adr r3, 8003820 <createTones+0x2568>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fd f82a 	bl	8000628 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4b91      	ldr	r3, [pc, #580]	; (8003828 <createTones+0x2570>)
 80035e2:	f7fd f94b 	bl	800087c <__aeabi_ddiv>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fa4d 	bl	8000a8c <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	ee00 3a10 	vmov	s0, r3
 80035f8:	f009 faca 	bl	800cb90 <arm_sin_f32>
 80035fc:	eef0 7a40 	vmov.f32	s15, s0
 8003600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003608:	ee17 0a90 	vmov	r0, s15
 800360c:	f7fc ffb4 	bl	8000578 <__aeabi_f2d>
 8003610:	a381      	add	r3, pc, #516	; (adr r3, 8003818 <createTones+0x2560>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f7fd f807 	bl	8000628 <__aeabi_dmul>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	4b81      	ldr	r3, [pc, #516]	; (800382c <createTones+0x2574>)
 8003628:	f7fc fffe 	bl	8000628 <__aeabi_dmul>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4610      	mov	r0, r2
 8003632:	4619      	mov	r1, r3
 8003634:	f7fd fa0a 	bl	8000a4c <__aeabi_d2uiz>
 8003638:	4603      	mov	r3, r0
 800363a:	b2d9      	uxtb	r1, r3
 800363c:	4a7d      	ldr	r2, [pc, #500]	; (8003834 <createTones+0x257c>)
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	4413      	add	r3, r2
 8003642:	460a      	mov	r2, r1
 8003644:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 11; i++){
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	3301      	adds	r3, #1
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	2b0a      	cmp	r3, #10
 8003650:	ddb8      	ble.n	80035c4 <createTones+0x230c>
	}

	// Tone CC8 = 4434.92 Hz
	for(int i = 0; i < 10; i++){
 8003652:	2300      	movs	r3, #0
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
 8003656:	e043      	b.n	80036e0 <createTones+0x2428>
		CC8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 10)) * 256);
 8003658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800365a:	f7fc ff7b 	bl	8000554 <__aeabi_i2d>
 800365e:	a370      	add	r3, pc, #448	; (adr r3, 8003820 <createTones+0x2568>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc ffe0 	bl	8000628 <__aeabi_dmul>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	4b70      	ldr	r3, [pc, #448]	; (8003838 <createTones+0x2580>)
 8003676:	f7fd f901 	bl	800087c <__aeabi_ddiv>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	f7fd fa03 	bl	8000a8c <__aeabi_d2f>
 8003686:	4603      	mov	r3, r0
 8003688:	ee00 3a10 	vmov	s0, r3
 800368c:	f009 fa80 	bl	800cb90 <arm_sin_f32>
 8003690:	eef0 7a40 	vmov.f32	s15, s0
 8003694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800369c:	ee17 0a90 	vmov	r0, s15
 80036a0:	f7fc ff6a 	bl	8000578 <__aeabi_f2d>
 80036a4:	a35c      	add	r3, pc, #368	; (adr r3, 8003818 <createTones+0x2560>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f7fc ffbd 	bl	8000628 <__aeabi_dmul>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	4b5c      	ldr	r3, [pc, #368]	; (800382c <createTones+0x2574>)
 80036bc:	f7fc ffb4 	bl	8000628 <__aeabi_dmul>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fd f9c0 	bl	8000a4c <__aeabi_d2uiz>
 80036cc:	4603      	mov	r3, r0
 80036ce:	b2d9      	uxtb	r1, r3
 80036d0:	4a5a      	ldr	r2, [pc, #360]	; (800383c <createTones+0x2584>)
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	4413      	add	r3, r2
 80036d6:	460a      	mov	r2, r1
 80036d8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	3301      	adds	r3, #1
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	2b09      	cmp	r3, #9
 80036e4:	ddb8      	ble.n	8003658 <createTones+0x23a0>
	}

	// Tone D8 = 4698.63 Hz
	for(int i = 0; i < 9; i++){
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	e043      	b.n	8003774 <createTones+0x24bc>
		D8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 9)) * 256);
 80036ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ee:	f7fc ff31 	bl	8000554 <__aeabi_i2d>
 80036f2:	a34b      	add	r3, pc, #300	; (adr r3, 8003820 <createTones+0x2568>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f7fc ff96 	bl	8000628 <__aeabi_dmul>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <createTones+0x2588>)
 800370a:	f7fd f8b7 	bl	800087c <__aeabi_ddiv>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	f7fd f9b9 	bl	8000a8c <__aeabi_d2f>
 800371a:	4603      	mov	r3, r0
 800371c:	ee00 3a10 	vmov	s0, r3
 8003720:	f009 fa36 	bl	800cb90 <arm_sin_f32>
 8003724:	eef0 7a40 	vmov.f32	s15, s0
 8003728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800372c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003730:	ee17 0a90 	vmov	r0, s15
 8003734:	f7fc ff20 	bl	8000578 <__aeabi_f2d>
 8003738:	a337      	add	r3, pc, #220	; (adr r3, 8003818 <createTones+0x2560>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f7fc ff73 	bl	8000628 <__aeabi_dmul>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <createTones+0x2574>)
 8003750:	f7fc ff6a 	bl	8000628 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4610      	mov	r0, r2
 800375a:	4619      	mov	r1, r3
 800375c:	f7fd f976 	bl	8000a4c <__aeabi_d2uiz>
 8003760:	4603      	mov	r3, r0
 8003762:	b2d9      	uxtb	r1, r3
 8003764:	4a37      	ldr	r2, [pc, #220]	; (8003844 <createTones+0x258c>)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	4413      	add	r3, r2
 800376a:	460a      	mov	r2, r1
 800376c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 9; i++){
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	3301      	adds	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	2b08      	cmp	r3, #8
 8003778:	ddb8      	ble.n	80036ec <createTones+0x2434>
	}

	// Tone DD8 = 4978.03 Hz
	for(int i = 0; i < 9; i++){
 800377a:	2300      	movs	r3, #0
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	e043      	b.n	8003808 <createTones+0x2550>
		DD8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 9)) * 256);
 8003780:	6a38      	ldr	r0, [r7, #32]
 8003782:	f7fc fee7 	bl	8000554 <__aeabi_i2d>
 8003786:	a326      	add	r3, pc, #152	; (adr r3, 8003820 <createTones+0x2568>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fc ff4c 	bl	8000628 <__aeabi_dmul>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <createTones+0x2588>)
 800379e:	f7fd f86d 	bl	800087c <__aeabi_ddiv>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f7fd f96f 	bl	8000a8c <__aeabi_d2f>
 80037ae:	4603      	mov	r3, r0
 80037b0:	ee00 3a10 	vmov	s0, r3
 80037b4:	f009 f9ec 	bl	800cb90 <arm_sin_f32>
 80037b8:	eef0 7a40 	vmov.f32	s15, s0
 80037bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037c4:	ee17 0a90 	vmov	r0, s15
 80037c8:	f7fc fed6 	bl	8000578 <__aeabi_f2d>
 80037cc:	a312      	add	r3, pc, #72	; (adr r3, 8003818 <createTones+0x2560>)
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f7fc ff29 	bl	8000628 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <createTones+0x2574>)
 80037e4:	f7fc ff20 	bl	8000628 <__aeabi_dmul>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	f7fd f92c 	bl	8000a4c <__aeabi_d2uiz>
 80037f4:	4603      	mov	r3, r0
 80037f6:	b2d9      	uxtb	r1, r3
 80037f8:	4a13      	ldr	r2, [pc, #76]	; (8003848 <createTones+0x2590>)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	4413      	add	r3, r2
 80037fe:	460a      	mov	r2, r1
 8003800:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 9; i++){
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	3301      	adds	r3, #1
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	2b08      	cmp	r3, #8
 800380c:	ddb8      	ble.n	8003780 <createTones+0x24c8>
	}

	// Tone E8 = 5274.04 Hz
	for(int i = 0; i < 8; i++){
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	e05f      	b.n	80038d4 <createTones+0x261c>
 8003814:	f3af 8000 	nop.w
 8003818:	51eb851f 	.word	0x51eb851f
 800381c:	3fd51eb8 	.word	0x3fd51eb8
 8003820:	53c8d4f1 	.word	0x53c8d4f1
 8003824:	401921fb 	.word	0x401921fb
 8003828:	40260000 	.word	0x40260000
 800382c:	40700000 	.word	0x40700000
 8003830:	20001614 	.word	0x20001614
 8003834:	20001620 	.word	0x20001620
 8003838:	40240000 	.word	0x40240000
 800383c:	2000162c 	.word	0x2000162c
 8003840:	40220000 	.word	0x40220000
 8003844:	20001638 	.word	0x20001638
 8003848:	20001644 	.word	0x20001644
		E8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 8)) * 256);
 800384c:	69f8      	ldr	r0, [r7, #28]
 800384e:	f7fc fe81 	bl	8000554 <__aeabi_i2d>
 8003852:	a3bb      	add	r3, pc, #748	; (adr r3, 8003b40 <createTones+0x2888>)
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f7fc fee6 	bl	8000628 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	4bb7      	ldr	r3, [pc, #732]	; (8003b48 <createTones+0x2890>)
 800386a:	f7fd f807 	bl	800087c <__aeabi_ddiv>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	f7fd f909 	bl	8000a8c <__aeabi_d2f>
 800387a:	4603      	mov	r3, r0
 800387c:	ee00 3a10 	vmov	s0, r3
 8003880:	f009 f986 	bl	800cb90 <arm_sin_f32>
 8003884:	eef0 7a40 	vmov.f32	s15, s0
 8003888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003890:	ee17 0a90 	vmov	r0, s15
 8003894:	f7fc fe70 	bl	8000578 <__aeabi_f2d>
 8003898:	a3a7      	add	r3, pc, #668	; (adr r3, 8003b38 <createTones+0x2880>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f7fc fec3 	bl	8000628 <__aeabi_dmul>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	4ba7      	ldr	r3, [pc, #668]	; (8003b4c <createTones+0x2894>)
 80038b0:	f7fc feba 	bl	8000628 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f7fd f8c6 	bl	8000a4c <__aeabi_d2uiz>
 80038c0:	4603      	mov	r3, r0
 80038c2:	b2d9      	uxtb	r1, r3
 80038c4:	4aa2      	ldr	r2, [pc, #648]	; (8003b50 <createTones+0x2898>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	460a      	mov	r2, r1
 80038cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3301      	adds	r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b07      	cmp	r3, #7
 80038d8:	ddb8      	ble.n	800384c <createTones+0x2594>
	}

	// Tone F8 = 5587.65 Hz
	for(int i = 0; i < 8; i++){
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e043      	b.n	8003968 <createTones+0x26b0>
		F8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 8)) * 256);
 80038e0:	69b8      	ldr	r0, [r7, #24]
 80038e2:	f7fc fe37 	bl	8000554 <__aeabi_i2d>
 80038e6:	a396      	add	r3, pc, #600	; (adr r3, 8003b40 <createTones+0x2888>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fe9c 	bl	8000628 <__aeabi_dmul>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	4b92      	ldr	r3, [pc, #584]	; (8003b48 <createTones+0x2890>)
 80038fe:	f7fc ffbd 	bl	800087c <__aeabi_ddiv>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f7fd f8bf 	bl	8000a8c <__aeabi_d2f>
 800390e:	4603      	mov	r3, r0
 8003910:	ee00 3a10 	vmov	s0, r3
 8003914:	f009 f93c 	bl	800cb90 <arm_sin_f32>
 8003918:	eef0 7a40 	vmov.f32	s15, s0
 800391c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003924:	ee17 0a90 	vmov	r0, s15
 8003928:	f7fc fe26 	bl	8000578 <__aeabi_f2d>
 800392c:	a382      	add	r3, pc, #520	; (adr r3, 8003b38 <createTones+0x2880>)
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f7fc fe79 	bl	8000628 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b82      	ldr	r3, [pc, #520]	; (8003b4c <createTones+0x2894>)
 8003944:	f7fc fe70 	bl	8000628 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	f7fd f87c 	bl	8000a4c <__aeabi_d2uiz>
 8003954:	4603      	mov	r3, r0
 8003956:	b2d9      	uxtb	r1, r3
 8003958:	4a7e      	ldr	r2, [pc, #504]	; (8003b54 <createTones+0x289c>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	460a      	mov	r2, r1
 8003960:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3301      	adds	r3, #1
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b07      	cmp	r3, #7
 800396c:	ddb8      	ble.n	80038e0 <createTones+0x2628>
	}

	// Tone FF8 = 5919.91 Hz
	for(int i = 0; i < 7; i++){
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e043      	b.n	80039fc <createTones+0x2744>
		FF8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 7)) * 256);
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7fc fded 	bl	8000554 <__aeabi_i2d>
 800397a:	a371      	add	r3, pc, #452	; (adr r3, 8003b40 <createTones+0x2888>)
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f7fc fe52 	bl	8000628 <__aeabi_dmul>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	4b71      	ldr	r3, [pc, #452]	; (8003b58 <createTones+0x28a0>)
 8003992:	f7fc ff73 	bl	800087c <__aeabi_ddiv>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	f7fd f875 	bl	8000a8c <__aeabi_d2f>
 80039a2:	4603      	mov	r3, r0
 80039a4:	ee00 3a10 	vmov	s0, r3
 80039a8:	f009 f8f2 	bl	800cb90 <arm_sin_f32>
 80039ac:	eef0 7a40 	vmov.f32	s15, s0
 80039b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039b8:	ee17 0a90 	vmov	r0, s15
 80039bc:	f7fc fddc 	bl	8000578 <__aeabi_f2d>
 80039c0:	a35d      	add	r3, pc, #372	; (adr r3, 8003b38 <createTones+0x2880>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f7fc fe2f 	bl	8000628 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	4b5d      	ldr	r3, [pc, #372]	; (8003b4c <createTones+0x2894>)
 80039d8:	f7fc fe26 	bl	8000628 <__aeabi_dmul>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	f7fd f832 	bl	8000a4c <__aeabi_d2uiz>
 80039e8:	4603      	mov	r3, r0
 80039ea:	b2d9      	uxtb	r1, r3
 80039ec:	4a5b      	ldr	r2, [pc, #364]	; (8003b5c <createTones+0x28a4>)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4413      	add	r3, r2
 80039f2:	460a      	mov	r2, r1
 80039f4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 7; i++){
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3301      	adds	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	ddb8      	ble.n	8003974 <createTones+0x26bc>
	}

	// Tone G8 = 6271.93 Hz
	for(int i = 0; i < 7; i++){
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e043      	b.n	8003a90 <createTones+0x27d8>
		G8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 7)) * 256);
 8003a08:	6938      	ldr	r0, [r7, #16]
 8003a0a:	f7fc fda3 	bl	8000554 <__aeabi_i2d>
 8003a0e:	a34c      	add	r3, pc, #304	; (adr r3, 8003b40 <createTones+0x2888>)
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f7fc fe08 	bl	8000628 <__aeabi_dmul>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	4b4c      	ldr	r3, [pc, #304]	; (8003b58 <createTones+0x28a0>)
 8003a26:	f7fc ff29 	bl	800087c <__aeabi_ddiv>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fd f82b 	bl	8000a8c <__aeabi_d2f>
 8003a36:	4603      	mov	r3, r0
 8003a38:	ee00 3a10 	vmov	s0, r3
 8003a3c:	f009 f8a8 	bl	800cb90 <arm_sin_f32>
 8003a40:	eef0 7a40 	vmov.f32	s15, s0
 8003a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a4c:	ee17 0a90 	vmov	r0, s15
 8003a50:	f7fc fd92 	bl	8000578 <__aeabi_f2d>
 8003a54:	a338      	add	r3, pc, #224	; (adr r3, 8003b38 <createTones+0x2880>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fde5 	bl	8000628 <__aeabi_dmul>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <createTones+0x2894>)
 8003a6c:	f7fc fddc 	bl	8000628 <__aeabi_dmul>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f7fc ffe8 	bl	8000a4c <__aeabi_d2uiz>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	b2d9      	uxtb	r1, r3
 8003a80:	4a37      	ldr	r2, [pc, #220]	; (8003b60 <createTones+0x28a8>)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	460a      	mov	r2, r1
 8003a88:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 7; i++){
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	ddb8      	ble.n	8003a08 <createTones+0x2750>
	}

	// Tone GG8 = 6644.88 Hz
	for(int i = 0; i < 7; i++){
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e043      	b.n	8003b24 <createTones+0x286c>
		GG8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 7)) * 256);
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7fc fd59 	bl	8000554 <__aeabi_i2d>
 8003aa2:	a327      	add	r3, pc, #156	; (adr r3, 8003b40 <createTones+0x2888>)
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	f7fc fdbe 	bl	8000628 <__aeabi_dmul>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <createTones+0x28a0>)
 8003aba:	f7fc fedf 	bl	800087c <__aeabi_ddiv>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f7fc ffe1 	bl	8000a8c <__aeabi_d2f>
 8003aca:	4603      	mov	r3, r0
 8003acc:	ee00 3a10 	vmov	s0, r3
 8003ad0:	f009 f85e 	bl	800cb90 <arm_sin_f32>
 8003ad4:	eef0 7a40 	vmov.f32	s15, s0
 8003ad8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ae0:	ee17 0a90 	vmov	r0, s15
 8003ae4:	f7fc fd48 	bl	8000578 <__aeabi_f2d>
 8003ae8:	a313      	add	r3, pc, #76	; (adr r3, 8003b38 <createTones+0x2880>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fd9b 	bl	8000628 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <createTones+0x2894>)
 8003b00:	f7fc fd92 	bl	8000628 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f7fc ff9e 	bl	8000a4c <__aeabi_d2uiz>
 8003b10:	4603      	mov	r3, r0
 8003b12:	b2d9      	uxtb	r1, r3
 8003b14:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <createTones+0x28ac>)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 7; i++){
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3301      	adds	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	ddb8      	ble.n	8003a9c <createTones+0x27e4>
	}

	// Tone A8 = 7040.00 Hz
	for(int i = 0; i < 6; i++){
 8003b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e06b      	b.n	8003c10 <createTones+0x2958>
 8003b38:	51eb851f 	.word	0x51eb851f
 8003b3c:	3fd51eb8 	.word	0x3fd51eb8
 8003b40:	53c8d4f1 	.word	0x53c8d4f1
 8003b44:	401921fb 	.word	0x401921fb
 8003b48:	40200000 	.word	0x40200000
 8003b4c:	40700000 	.word	0x40700000
 8003b50:	20001650 	.word	0x20001650
 8003b54:	20001658 	.word	0x20001658
 8003b58:	401c0000 	.word	0x401c0000
 8003b5c:	20001660 	.word	0x20001660
 8003b60:	20001668 	.word	0x20001668
 8003b64:	20001670 	.word	0x20001670
		A8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 6)) * 256);
 8003b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	f7fc fcef 	bl	8000554 <__aeabi_i2d>
 8003b76:	a392      	add	r3, pc, #584	; (adr r3, 8003dc0 <createTones+0x2b08>)
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f7fc fd54 	bl	8000628 <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	4b8e      	ldr	r3, [pc, #568]	; (8003dc8 <createTones+0x2b10>)
 8003b8e:	f7fc fe75 	bl	800087c <__aeabi_ddiv>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f7fc ff77 	bl	8000a8c <__aeabi_d2f>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	ee00 3a10 	vmov	s0, r3
 8003ba4:	f008 fff4 	bl	800cb90 <arm_sin_f32>
 8003ba8:	eef0 7a40 	vmov.f32	s15, s0
 8003bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bb4:	ee17 0a90 	vmov	r0, s15
 8003bb8:	f7fc fcde 	bl	8000578 <__aeabi_f2d>
 8003bbc:	a37e      	add	r3, pc, #504	; (adr r3, 8003db8 <createTones+0x2b00>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc fd31 	bl	8000628 <__aeabi_dmul>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	4b7e      	ldr	r3, [pc, #504]	; (8003dcc <createTones+0x2b14>)
 8003bd4:	f7fc fd28 	bl	8000628 <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fc ff34 	bl	8000a4c <__aeabi_d2uiz>
 8003be4:	4603      	mov	r3, r0
 8003be6:	b2d9      	uxtb	r1, r3
 8003be8:	4a79      	ldr	r2, [pc, #484]	; (8003dd0 <createTones+0x2b18>)
 8003bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++){
 8003bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bfe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c02:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003c06:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	3201      	adds	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	dda4      	ble.n	8003b68 <createTones+0x28b0>
	}

	// Tone AA8 = 7458.62 Hz
	for(int i = 0; i < 6; i++){
 8003c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e053      	b.n	8003cd4 <createTones+0x2a1c>
		AA8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 6)) * 256);
 8003c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	f7fc fc8d 	bl	8000554 <__aeabi_i2d>
 8003c3a:	a361      	add	r3, pc, #388	; (adr r3, 8003dc0 <createTones+0x2b08>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fcf2 	bl	8000628 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <createTones+0x2b10>)
 8003c52:	f7fc fe13 	bl	800087c <__aeabi_ddiv>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f7fc ff15 	bl	8000a8c <__aeabi_d2f>
 8003c62:	4603      	mov	r3, r0
 8003c64:	ee00 3a10 	vmov	s0, r3
 8003c68:	f008 ff92 	bl	800cb90 <arm_sin_f32>
 8003c6c:	eef0 7a40 	vmov.f32	s15, s0
 8003c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c78:	ee17 0a90 	vmov	r0, s15
 8003c7c:	f7fc fc7c 	bl	8000578 <__aeabi_f2d>
 8003c80:	a34d      	add	r3, pc, #308	; (adr r3, 8003db8 <createTones+0x2b00>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fccf 	bl	8000628 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <createTones+0x2b14>)
 8003c98:	f7fc fcc6 	bl	8000628 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f7fc fed2 	bl	8000a4c <__aeabi_d2uiz>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	b2d9      	uxtb	r1, r3
 8003cac:	4a49      	ldr	r2, [pc, #292]	; (8003dd4 <createTones+0x2b1c>)
 8003cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	460a      	mov	r2, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++){
 8003cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cc6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003cca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	3201      	adds	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b05      	cmp	r3, #5
 8003ce0:	dda4      	ble.n	8003c2c <createTones+0x2974>
	}

	// Tone B8 = 7902.13 Hz
	for(int i = 0; i < 6; i++){
 8003ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e053      	b.n	8003d98 <createTones+0x2ae0>
		B8[i] = (uint8_t) (0.33 * (1 + arm_sin_f32(2 * pi * i / 6)) * 256);
 8003cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	f7fc fc2b 	bl	8000554 <__aeabi_i2d>
 8003cfe:	a330      	add	r3, pc, #192	; (adr r3, 8003dc0 <createTones+0x2b08>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fc90 	bl	8000628 <__aeabi_dmul>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <createTones+0x2b10>)
 8003d16:	f7fc fdb1 	bl	800087c <__aeabi_ddiv>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	f7fc feb3 	bl	8000a8c <__aeabi_d2f>
 8003d26:	4603      	mov	r3, r0
 8003d28:	ee00 3a10 	vmov	s0, r3
 8003d2c:	f008 ff30 	bl	800cb90 <arm_sin_f32>
 8003d30:	eef0 7a40 	vmov.f32	s15, s0
 8003d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d3c:	ee17 0a90 	vmov	r0, s15
 8003d40:	f7fc fc1a 	bl	8000578 <__aeabi_f2d>
 8003d44:	a31c      	add	r3, pc, #112	; (adr r3, 8003db8 <createTones+0x2b00>)
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f7fc fc6d 	bl	8000628 <__aeabi_dmul>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <createTones+0x2b14>)
 8003d5c:	f7fc fc64 	bl	8000628 <__aeabi_dmul>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fc fe70 	bl	8000a4c <__aeabi_d2uiz>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	b2d9      	uxtb	r1, r3
 8003d70:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <createTones+0x2b20>)
 8003d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	460a      	mov	r2, r1
 8003d80:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++){
 8003d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d8a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003d8e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	3201      	adds	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	dda4      	ble.n	8003cf0 <createTones+0x2a38>
	}
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	f3af 8000 	nop.w
 8003db8:	51eb851f 	.word	0x51eb851f
 8003dbc:	3fd51eb8 	.word	0x3fd51eb8
 8003dc0:	53c8d4f1 	.word	0x53c8d4f1
 8003dc4:	401921fb 	.word	0x401921fb
 8003dc8:	40180000 	.word	0x40180000
 8003dcc:	40700000 	.word	0x40700000
 8003dd0:	20001678 	.word	0x20001678
 8003dd4:	20001680 	.word	0x20001680
 8003dd8:	20001688 	.word	0x20001688

08003ddc <writePause>:

void writePause(){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
	  for(int i = 0; i < 8; i++){
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	e013      	b.n	8003e10 <writePause+0x34>
	  	  if(BSP_QSPI_Write((uint8_t *)Pause, game_music_addr, 1) != QSPI_OK){
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <writePause+0x44>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2201      	movs	r2, #1
 8003dee:	4619      	mov	r1, r3
 8003df0:	480c      	ldr	r0, [pc, #48]	; (8003e24 <writePause+0x48>)
 8003df2:	f001 fcdb 	bl	80057ac <BSP_QSPI_Write>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <writePause+0x24>
	  		  Error_Handler();
 8003dfc:	f001 fa56 	bl	80052ac <Error_Handler>
	  	  }
	  	game_music_addr += 1;
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <writePause+0x44>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <writePause+0x44>)
 8003e08:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 8; i++){
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b07      	cmp	r3, #7
 8003e14:	dde8      	ble.n	8003de8 <writePause+0xc>
	  }
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20001698 	.word	0x20001698
 8003e24:	20001690 	.word	0x20001690

08003e28 <writeMegalovaniaQuick>:

void writeMegalovaniaQuick(){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b096      	sub	sp, #88	; 0x58
 8003e2c:	af00      	add	r7, sp, #0
	 int factor = 50;
 8003e2e:	2332      	movs	r3, #50	; 0x32
 8003e30:	607b      	str	r3, [r7, #4]

	 for(int i = 0; i < factor; i++){
 8003e32:	2300      	movs	r3, #0
 8003e34:	657b      	str	r3, [r7, #84]	; 0x54
 8003e36:	e013      	b.n	8003e60 <writeMegalovaniaQuick+0x38>
	  	  if(BSP_QSPI_Write((uint8_t *)D5, game_music_addr, 75) != QSPI_OK){
 8003e38:	4b94      	ldr	r3, [pc, #592]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	224b      	movs	r2, #75	; 0x4b
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4893      	ldr	r0, [pc, #588]	; (8004090 <writeMegalovaniaQuick+0x268>)
 8003e42:	f001 fcb3 	bl	80057ac <BSP_QSPI_Write>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <writeMegalovaniaQuick+0x28>
	  		  Error_Handler();
 8003e4c:	f001 fa2e 	bl	80052ac <Error_Handler>
	  	  }
	  	  game_music_addr += 75;
 8003e50:	4b8e      	ldr	r3, [pc, #568]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	334b      	adds	r3, #75	; 0x4b
 8003e56:	4a8d      	ldr	r2, [pc, #564]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003e58:	6013      	str	r3, [r2, #0]
	 for(int i = 0; i < factor; i++){
 8003e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	dbe7      	blt.n	8003e38 <writeMegalovaniaQuick+0x10>
	  }

	  writePause();
 8003e68:	f7ff ffb8 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e70:	e013      	b.n	8003e9a <writeMegalovaniaQuick+0x72>
	  	  if(BSP_QSPI_Write((uint8_t *)D5, game_music_addr, 75) != QSPI_OK){
 8003e72:	4b86      	ldr	r3, [pc, #536]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	224b      	movs	r2, #75	; 0x4b
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4885      	ldr	r0, [pc, #532]	; (8004090 <writeMegalovaniaQuick+0x268>)
 8003e7c:	f001 fc96 	bl	80057ac <BSP_QSPI_Write>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <writeMegalovaniaQuick+0x62>
	  		  Error_Handler();
 8003e86:	f001 fa11 	bl	80052ac <Error_Handler>
	  	  }
	  	  game_music_addr += 75;
 8003e8a:	4b80      	ldr	r3, [pc, #512]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	334b      	adds	r3, #75	; 0x4b
 8003e90:	4a7e      	ldr	r2, [pc, #504]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003e92:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 8003e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e96:	3301      	adds	r3, #1
 8003e98:	653b      	str	r3, [r7, #80]	; 0x50
 8003e9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	dbe7      	blt.n	8003e72 <writeMegalovaniaQuick+0x4a>
	  }

	  writePause();
 8003ea2:	f7ff ff9b 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 2; i++){
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eaa:	e013      	b.n	8003ed4 <writeMegalovaniaQuick+0xac>
	  	  	  if(BSP_QSPI_Write((uint8_t *)D6, game_music_addr, 38) != QSPI_OK){
 8003eac:	4b77      	ldr	r3, [pc, #476]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2226      	movs	r2, #38	; 0x26
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4877      	ldr	r0, [pc, #476]	; (8004094 <writeMegalovaniaQuick+0x26c>)
 8003eb6:	f001 fc79 	bl	80057ac <BSP_QSPI_Write>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <writeMegalovaniaQuick+0x9c>
	  	  		  Error_Handler();
 8003ec0:	f001 f9f4 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 38;
 8003ec4:	4b71      	ldr	r3, [pc, #452]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3326      	adds	r3, #38	; 0x26
 8003eca:	4a70      	ldr	r2, [pc, #448]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003ecc:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 8003ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dbe6      	blt.n	8003eac <writeMegalovaniaQuick+0x84>
	  }

	  writePause();
 8003ede:	f7ff ff7d 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 3; i++){
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee6:	e013      	b.n	8003f10 <writeMegalovaniaQuick+0xe8>
	  	  	  if(BSP_QSPI_Write((uint8_t *)A5, game_music_addr, 50) != QSPI_OK){
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2232      	movs	r2, #50	; 0x32
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4869      	ldr	r0, [pc, #420]	; (8004098 <writeMegalovaniaQuick+0x270>)
 8003ef2:	f001 fc5b 	bl	80057ac <BSP_QSPI_Write>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <writeMegalovaniaQuick+0xd8>
	  	  		  Error_Handler();
 8003efc:	f001 f9d6 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 50;
 8003f00:	4b62      	ldr	r3, [pc, #392]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3332      	adds	r3, #50	; 0x32
 8003f06:	4a61      	ldr	r2, [pc, #388]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003f08:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 3; i++){
 8003f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	dbe4      	blt.n	8003ee8 <writeMegalovaniaQuick+0xc0>
	  }

	  writePause();
 8003f1e:	f7ff ff5d 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 2; i++){
 8003f22:	2300      	movs	r3, #0
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
 8003f26:	e013      	b.n	8003f50 <writeMegalovaniaQuick+0x128>
	  	  	  if(BSP_QSPI_Write((uint8_t *)GG5, game_music_addr, 53) != QSPI_OK){
 8003f28:	4b58      	ldr	r3, [pc, #352]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2235      	movs	r2, #53	; 0x35
 8003f2e:	4619      	mov	r1, r3
 8003f30:	485a      	ldr	r0, [pc, #360]	; (800409c <writeMegalovaniaQuick+0x274>)
 8003f32:	f001 fc3b 	bl	80057ac <BSP_QSPI_Write>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <writeMegalovaniaQuick+0x118>
	  	  		  Error_Handler();
 8003f3c:	f001 f9b6 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 53;
 8003f40:	4b52      	ldr	r3, [pc, #328]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3335      	adds	r3, #53	; 0x35
 8003f46:	4a51      	ldr	r2, [pc, #324]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003f48:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 8003f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f56:	429a      	cmp	r2, r3
 8003f58:	dbe6      	blt.n	8003f28 <writeMegalovaniaQuick+0x100>
	  }

	  writePause();
 8003f5a:	f7ff ff3f 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 2; i++){
 8003f5e:	2300      	movs	r3, #0
 8003f60:	643b      	str	r3, [r7, #64]	; 0x40
 8003f62:	e013      	b.n	8003f8c <writeMegalovaniaQuick+0x164>
	  	  	  if(BSP_QSPI_Write((uint8_t *)G5, game_music_addr, 56) != QSPI_OK){
 8003f64:	4b49      	ldr	r3, [pc, #292]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2238      	movs	r2, #56	; 0x38
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	484c      	ldr	r0, [pc, #304]	; (80040a0 <writeMegalovaniaQuick+0x278>)
 8003f6e:	f001 fc1d 	bl	80057ac <BSP_QSPI_Write>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <writeMegalovaniaQuick+0x154>
	  	  		  Error_Handler();
 8003f78:	f001 f998 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 56;
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3338      	adds	r3, #56	; 0x38
 8003f82:	4a42      	ldr	r2, [pc, #264]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003f84:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	3301      	adds	r3, #1
 8003f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f92:	429a      	cmp	r2, r3
 8003f94:	dbe6      	blt.n	8003f64 <writeMegalovaniaQuick+0x13c>
	  }

	  writePause();
 8003f96:	f7ff ff21 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 2; i++){
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9e:	e013      	b.n	8003fc8 <writeMegalovaniaQuick+0x1a0>
	  	  	  if(BSP_QSPI_Write((uint8_t *)F5, game_music_addr, 63) != QSPI_OK){
 8003fa0:	4b3a      	ldr	r3, [pc, #232]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	223f      	movs	r2, #63	; 0x3f
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	483e      	ldr	r0, [pc, #248]	; (80040a4 <writeMegalovaniaQuick+0x27c>)
 8003faa:	f001 fbff 	bl	80057ac <BSP_QSPI_Write>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <writeMegalovaniaQuick+0x190>
	  	  		  Error_Handler();
 8003fb4:	f001 f97a 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 63;
 8003fb8:	4b34      	ldr	r3, [pc, #208]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	333f      	adds	r3, #63	; 0x3f
 8003fbe:	4a33      	ldr	r2, [pc, #204]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003fc0:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	dbe6      	blt.n	8003fa0 <writeMegalovaniaQuick+0x178>
	  }

	  writePause();
 8003fd2:	f7ff ff03 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fda:	e013      	b.n	8004004 <writeMegalovaniaQuick+0x1dc>
	  	  	  if(BSP_QSPI_Write((uint8_t *)D5, game_music_addr, 75) != QSPI_OK){
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	224b      	movs	r2, #75	; 0x4b
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	482a      	ldr	r0, [pc, #168]	; (8004090 <writeMegalovaniaQuick+0x268>)
 8003fe6:	f001 fbe1 	bl	80057ac <BSP_QSPI_Write>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <writeMegalovaniaQuick+0x1cc>
	  	  		  Error_Handler();
 8003ff0:	f001 f95c 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 75;
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	334b      	adds	r3, #75	; 0x4b
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <writeMegalovaniaQuick+0x264>)
 8003ffc:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	3301      	adds	r3, #1
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
 8004004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	dbe7      	blt.n	8003fdc <writeMegalovaniaQuick+0x1b4>
	  }

	  writePause();
 800400c:	f7ff fee6 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 8004010:	2300      	movs	r3, #0
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
 8004014:	e013      	b.n	800403e <writeMegalovaniaQuick+0x216>
	  	  	  if(BSP_QSPI_Write((uint8_t *)F5, game_music_addr, 63) != QSPI_OK){
 8004016:	4b1d      	ldr	r3, [pc, #116]	; (800408c <writeMegalovaniaQuick+0x264>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	223f      	movs	r2, #63	; 0x3f
 800401c:	4619      	mov	r1, r3
 800401e:	4821      	ldr	r0, [pc, #132]	; (80040a4 <writeMegalovaniaQuick+0x27c>)
 8004020:	f001 fbc4 	bl	80057ac <BSP_QSPI_Write>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <writeMegalovaniaQuick+0x206>
	  	  		  Error_Handler();
 800402a:	f001 f93f 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 63;
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <writeMegalovaniaQuick+0x264>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	333f      	adds	r3, #63	; 0x3f
 8004034:	4a15      	ldr	r2, [pc, #84]	; (800408c <writeMegalovaniaQuick+0x264>)
 8004036:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	3301      	adds	r3, #1
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
 800403e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	dbe7      	blt.n	8004016 <writeMegalovaniaQuick+0x1ee>
	  }

	  writePause();
 8004046:	f7ff fec9 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 800404a:	2300      	movs	r3, #0
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
 800404e:	e013      	b.n	8004078 <writeMegalovaniaQuick+0x250>
	  	  	  if(BSP_QSPI_Write((uint8_t *)G5, game_music_addr, 56) != QSPI_OK){
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <writeMegalovaniaQuick+0x264>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2238      	movs	r2, #56	; 0x38
 8004056:	4619      	mov	r1, r3
 8004058:	4811      	ldr	r0, [pc, #68]	; (80040a0 <writeMegalovaniaQuick+0x278>)
 800405a:	f001 fba7 	bl	80057ac <BSP_QSPI_Write>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <writeMegalovaniaQuick+0x240>
	  	  		  Error_Handler();
 8004064:	f001 f922 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 56;
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <writeMegalovaniaQuick+0x264>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3338      	adds	r3, #56	; 0x38
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <writeMegalovaniaQuick+0x264>)
 8004070:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	3301      	adds	r3, #1
 8004076:	633b      	str	r3, [r7, #48]	; 0x30
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	429a      	cmp	r2, r3
 800407e:	dbe7      	blt.n	8004050 <writeMegalovaniaQuick+0x228>
	  }

	  writePause();
 8004080:	f7ff feac 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 8004084:	2300      	movs	r3, #0
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004088:	e022      	b.n	80040d0 <writeMegalovaniaQuick+0x2a8>
 800408a:	bf00      	nop
 800408c:	20001698 	.word	0x20001698
 8004090:	20001170 	.word	0x20001170
 8004094:	2000141c 	.word	0x2000141c
 8004098:	20001334 	.word	0x20001334
 800409c:	200012fc 	.word	0x200012fc
 80040a0:	200012c4 	.word	0x200012c4
 80040a4:	20001248 	.word	0x20001248
	  	  	  if(BSP_QSPI_Write((uint8_t *)C5, game_music_addr, 84) != QSPI_OK){
 80040a8:	4b94      	ldr	r3, [pc, #592]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2254      	movs	r2, #84	; 0x54
 80040ae:	4619      	mov	r1, r3
 80040b0:	4893      	ldr	r0, [pc, #588]	; (8004300 <writeMegalovaniaQuick+0x4d8>)
 80040b2:	f001 fb7b 	bl	80057ac <BSP_QSPI_Write>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <writeMegalovaniaQuick+0x298>
	  	  		  Error_Handler();
 80040bc:	f001 f8f6 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 84;
 80040c0:	4b8e      	ldr	r3, [pc, #568]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3354      	adds	r3, #84	; 0x54
 80040c6:	4a8d      	ldr	r2, [pc, #564]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80040c8:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	3301      	adds	r3, #1
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dbe7      	blt.n	80040a8 <writeMegalovaniaQuick+0x280>
	  }

	  writePause();
 80040d8:	f7ff fe80 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 80040dc:	2300      	movs	r3, #0
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e0:	e013      	b.n	800410a <writeMegalovaniaQuick+0x2e2>
	  	  	  if(BSP_QSPI_Write((uint8_t *)C5, game_music_addr, 84) != QSPI_OK){
 80040e2:	4b86      	ldr	r3, [pc, #536]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2254      	movs	r2, #84	; 0x54
 80040e8:	4619      	mov	r1, r3
 80040ea:	4885      	ldr	r0, [pc, #532]	; (8004300 <writeMegalovaniaQuick+0x4d8>)
 80040ec:	f001 fb5e 	bl	80057ac <BSP_QSPI_Write>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <writeMegalovaniaQuick+0x2d2>
	  	  		  Error_Handler();
 80040f6:	f001 f8d9 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 84;
 80040fa:	4b80      	ldr	r3, [pc, #512]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3354      	adds	r3, #84	; 0x54
 8004100:	4a7e      	ldr	r2, [pc, #504]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 8004102:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	3301      	adds	r3, #1
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
 800410a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	dbe7      	blt.n	80040e2 <writeMegalovaniaQuick+0x2ba>
	  }

	  writePause();
 8004112:	f7ff fe63 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 2; i++){
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	e013      	b.n	8004144 <writeMegalovaniaQuick+0x31c>
	  	  	  if(BSP_QSPI_Write((uint8_t *)D6, game_music_addr, 38) != QSPI_OK){
 800411c:	4b77      	ldr	r3, [pc, #476]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2226      	movs	r2, #38	; 0x26
 8004122:	4619      	mov	r1, r3
 8004124:	4877      	ldr	r0, [pc, #476]	; (8004304 <writeMegalovaniaQuick+0x4dc>)
 8004126:	f001 fb41 	bl	80057ac <BSP_QSPI_Write>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <writeMegalovaniaQuick+0x30c>
	  	  		  Error_Handler();
 8004130:	f001 f8bc 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 38;
 8004134:	4b71      	ldr	r3, [pc, #452]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3326      	adds	r3, #38	; 0x26
 800413a:	4a70      	ldr	r2, [pc, #448]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 800413c:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	3301      	adds	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414a:	429a      	cmp	r2, r3
 800414c:	dbe6      	blt.n	800411c <writeMegalovaniaQuick+0x2f4>
	  }

	  writePause();
 800414e:	f7ff fe45 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 3; i++){
 8004152:	2300      	movs	r3, #0
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	e013      	b.n	8004180 <writeMegalovaniaQuick+0x358>
	  	  	  if(BSP_QSPI_Write((uint8_t *)A5, game_music_addr, 50) != QSPI_OK){
 8004158:	4b68      	ldr	r3, [pc, #416]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2232      	movs	r2, #50	; 0x32
 800415e:	4619      	mov	r1, r3
 8004160:	4869      	ldr	r0, [pc, #420]	; (8004308 <writeMegalovaniaQuick+0x4e0>)
 8004162:	f001 fb23 	bl	80057ac <BSP_QSPI_Write>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <writeMegalovaniaQuick+0x348>
	  	  		  Error_Handler();
 800416c:	f001 f89e 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 50;
 8004170:	4b62      	ldr	r3, [pc, #392]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3332      	adds	r3, #50	; 0x32
 8004176:	4a61      	ldr	r2, [pc, #388]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 8004178:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 3; i++){
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	3301      	adds	r3, #1
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	6a3a      	ldr	r2, [r7, #32]
 800418a:	429a      	cmp	r2, r3
 800418c:	dbe4      	blt.n	8004158 <writeMegalovaniaQuick+0x330>
	  }

	  writePause();
 800418e:	f7ff fe25 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 2; i++){
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e013      	b.n	80041c0 <writeMegalovaniaQuick+0x398>
	  	  	  if(BSP_QSPI_Write((uint8_t *)GG5, game_music_addr, 53) != QSPI_OK){
 8004198:	4b58      	ldr	r3, [pc, #352]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2235      	movs	r2, #53	; 0x35
 800419e:	4619      	mov	r1, r3
 80041a0:	485a      	ldr	r0, [pc, #360]	; (800430c <writeMegalovaniaQuick+0x4e4>)
 80041a2:	f001 fb03 	bl	80057ac <BSP_QSPI_Write>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <writeMegalovaniaQuick+0x388>
	  	  		  Error_Handler();
 80041ac:	f001 f87e 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 53;
 80041b0:	4b52      	ldr	r3, [pc, #328]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3335      	adds	r3, #53	; 0x35
 80041b6:	4a51      	ldr	r2, [pc, #324]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80041b8:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	dbe6      	blt.n	8004198 <writeMegalovaniaQuick+0x370>
	  }

	  writePause();
 80041ca:	f7ff fe07 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 2; i++){
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	e013      	b.n	80041fc <writeMegalovaniaQuick+0x3d4>
	  	  	  if(BSP_QSPI_Write((uint8_t *)G5, game_music_addr, 56) != QSPI_OK){
 80041d4:	4b49      	ldr	r3, [pc, #292]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2238      	movs	r2, #56	; 0x38
 80041da:	4619      	mov	r1, r3
 80041dc:	484c      	ldr	r0, [pc, #304]	; (8004310 <writeMegalovaniaQuick+0x4e8>)
 80041de:	f001 fae5 	bl	80057ac <BSP_QSPI_Write>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <writeMegalovaniaQuick+0x3c4>
	  	  		  Error_Handler();
 80041e8:	f001 f860 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 56;
 80041ec:	4b43      	ldr	r3, [pc, #268]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3338      	adds	r3, #56	; 0x38
 80041f2:	4a42      	ldr	r2, [pc, #264]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80041f4:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	3301      	adds	r3, #1
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	429a      	cmp	r2, r3
 8004204:	dbe6      	blt.n	80041d4 <writeMegalovaniaQuick+0x3ac>
	  }

	  writePause();
 8004206:	f7ff fde9 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor * 2; i++){
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	e013      	b.n	8004238 <writeMegalovaniaQuick+0x410>
	  	  	  if(BSP_QSPI_Write((uint8_t *)F5, game_music_addr, 63) != QSPI_OK){
 8004210:	4b3a      	ldr	r3, [pc, #232]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	223f      	movs	r2, #63	; 0x3f
 8004216:	4619      	mov	r1, r3
 8004218:	483e      	ldr	r0, [pc, #248]	; (8004314 <writeMegalovaniaQuick+0x4ec>)
 800421a:	f001 fac7 	bl	80057ac <BSP_QSPI_Write>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <writeMegalovaniaQuick+0x400>
	  	  		  Error_Handler();
 8004224:	f001 f842 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 63;
 8004228:	4b34      	ldr	r3, [pc, #208]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	333f      	adds	r3, #63	; 0x3f
 800422e:	4a33      	ldr	r2, [pc, #204]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 8004230:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	3301      	adds	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	429a      	cmp	r2, r3
 8004240:	dbe6      	blt.n	8004210 <writeMegalovaniaQuick+0x3e8>
	  }

	  writePause();
 8004242:	f7ff fdcb 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	e013      	b.n	8004274 <writeMegalovaniaQuick+0x44c>
	  	  	  if(BSP_QSPI_Write((uint8_t *)D5, game_music_addr, 75) != QSPI_OK){
 800424c:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	224b      	movs	r2, #75	; 0x4b
 8004252:	4619      	mov	r1, r3
 8004254:	4830      	ldr	r0, [pc, #192]	; (8004318 <writeMegalovaniaQuick+0x4f0>)
 8004256:	f001 faa9 	bl	80057ac <BSP_QSPI_Write>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <writeMegalovaniaQuick+0x43c>
	  	  		  Error_Handler();
 8004260:	f001 f824 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 75;
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	334b      	adds	r3, #75	; 0x4b
 800426a:	4a24      	ldr	r2, [pc, #144]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 800426c:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3301      	adds	r3, #1
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	dbe7      	blt.n	800424c <writeMegalovaniaQuick+0x424>
	  }

	  writePause();
 800427c:	f7ff fdae 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e013      	b.n	80042ae <writeMegalovaniaQuick+0x486>
	  	  	  if(BSP_QSPI_Write((uint8_t *)F5, game_music_addr, 63) != QSPI_OK){
 8004286:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	223f      	movs	r2, #63	; 0x3f
 800428c:	4619      	mov	r1, r3
 800428e:	4821      	ldr	r0, [pc, #132]	; (8004314 <writeMegalovaniaQuick+0x4ec>)
 8004290:	f001 fa8c 	bl	80057ac <BSP_QSPI_Write>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <writeMegalovaniaQuick+0x476>
	  	  		  Error_Handler();
 800429a:	f001 f807 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 63;
 800429e:	4b17      	ldr	r3, [pc, #92]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	333f      	adds	r3, #63	; 0x3f
 80042a4:	4a15      	ldr	r2, [pc, #84]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80042a6:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	dbe7      	blt.n	8004286 <writeMegalovaniaQuick+0x45e>
	  }

	  writePause();
 80042b6:	f7ff fd91 	bl	8003ddc <writePause>

	  for(int i = 0; i < factor; i++){
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	e013      	b.n	80042e8 <writeMegalovaniaQuick+0x4c0>
	  	  	  if(BSP_QSPI_Write((uint8_t *)G5, game_music_addr, 56) != QSPI_OK){
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2238      	movs	r2, #56	; 0x38
 80042c6:	4619      	mov	r1, r3
 80042c8:	4811      	ldr	r0, [pc, #68]	; (8004310 <writeMegalovaniaQuick+0x4e8>)
 80042ca:	f001 fa6f 	bl	80057ac <BSP_QSPI_Write>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <writeMegalovaniaQuick+0x4b0>
	  	  		  Error_Handler();
 80042d4:	f000 ffea 	bl	80052ac <Error_Handler>
	  	  	  }
		  game_music_addr += 56;
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3338      	adds	r3, #56	; 0x38
 80042de:	4a07      	ldr	r2, [pc, #28]	; (80042fc <writeMegalovaniaQuick+0x4d4>)
 80042e0:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	dbe7      	blt.n	80042c0 <writeMegalovaniaQuick+0x498>
	  }

	  writePause();
 80042f0:	f7ff fd74 	bl	8003ddc <writePause>
}
 80042f4:	bf00      	nop
 80042f6:	3758      	adds	r7, #88	; 0x58
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20001698 	.word	0x20001698
 8004300:	200010cc 	.word	0x200010cc
 8004304:	2000141c 	.word	0x2000141c
 8004308:	20001334 	.word	0x20001334
 800430c:	200012fc 	.word	0x200012fc
 8004310:	200012c4 	.word	0x200012c4
 8004314:	20001248 	.word	0x20001248
 8004318:	20001170 	.word	0x20001170

0800431c <writePauseSlow>:

void writePauseSlow(){
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
	  for(int i = 0; i < 8; i++){
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	e013      	b.n	8004350 <writePauseSlow+0x34>
	  	  if(BSP_QSPI_Write((uint8_t *)Pause, slow_music_addr, 1) != QSPI_OK){
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <writePauseSlow+0x44>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	4619      	mov	r1, r3
 8004330:	480c      	ldr	r0, [pc, #48]	; (8004364 <writePauseSlow+0x48>)
 8004332:	f001 fa3b 	bl	80057ac <BSP_QSPI_Write>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <writePauseSlow+0x24>
	  		  Error_Handler();
 800433c:	f000 ffb6 	bl	80052ac <Error_Handler>
	  	  }
	  	slow_music_addr += 1;
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <writePauseSlow+0x44>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	4a06      	ldr	r2, [pc, #24]	; (8004360 <writePauseSlow+0x44>)
 8004348:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 8; i++){
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3301      	adds	r3, #1
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b07      	cmp	r3, #7
 8004354:	dde8      	ble.n	8004328 <writePauseSlow+0xc>
	  }
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200001b4 	.word	0x200001b4
 8004364:	20001690 	.word	0x20001690

08004368 <writeMegalovaniaSlow>:

void writeMegalovaniaSlow(){
 8004368:	b580      	push	{r7, lr}
 800436a:	b096      	sub	sp, #88	; 0x58
 800436c:	af00      	add	r7, sp, #0
	 int factor = 100;
 800436e:	2364      	movs	r3, #100	; 0x64
 8004370:	607b      	str	r3, [r7, #4]

	 for(int i = 0; i < factor; i++){
 8004372:	2300      	movs	r3, #0
 8004374:	657b      	str	r3, [r7, #84]	; 0x54
 8004376:	e013      	b.n	80043a0 <writeMegalovaniaSlow+0x38>
	  	  if(BSP_QSPI_Write((uint8_t *)D5, slow_music_addr, 75) != QSPI_OK){
 8004378:	4b94      	ldr	r3, [pc, #592]	; (80045cc <writeMegalovaniaSlow+0x264>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	224b      	movs	r2, #75	; 0x4b
 800437e:	4619      	mov	r1, r3
 8004380:	4893      	ldr	r0, [pc, #588]	; (80045d0 <writeMegalovaniaSlow+0x268>)
 8004382:	f001 fa13 	bl	80057ac <BSP_QSPI_Write>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <writeMegalovaniaSlow+0x28>
	  		  Error_Handler();
 800438c:	f000 ff8e 	bl	80052ac <Error_Handler>
	  	  }
	  	  slow_music_addr += 75;
 8004390:	4b8e      	ldr	r3, [pc, #568]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	334b      	adds	r3, #75	; 0x4b
 8004396:	4a8d      	ldr	r2, [pc, #564]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004398:	6013      	str	r3, [r2, #0]
	 for(int i = 0; i < factor; i++){
 800439a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439c:	3301      	adds	r3, #1
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
 80043a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	dbe7      	blt.n	8004378 <writeMegalovaniaSlow+0x10>
	  }

	  writePauseSlow();
 80043a8:	f7ff ffb8 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 80043ac:	2300      	movs	r3, #0
 80043ae:	653b      	str	r3, [r7, #80]	; 0x50
 80043b0:	e013      	b.n	80043da <writeMegalovaniaSlow+0x72>
	  	  if(BSP_QSPI_Write((uint8_t *)D5, slow_music_addr, 75) != QSPI_OK){
 80043b2:	4b86      	ldr	r3, [pc, #536]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	224b      	movs	r2, #75	; 0x4b
 80043b8:	4619      	mov	r1, r3
 80043ba:	4885      	ldr	r0, [pc, #532]	; (80045d0 <writeMegalovaniaSlow+0x268>)
 80043bc:	f001 f9f6 	bl	80057ac <BSP_QSPI_Write>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <writeMegalovaniaSlow+0x62>
	  		  Error_Handler();
 80043c6:	f000 ff71 	bl	80052ac <Error_Handler>
	  	  }
	  	  slow_music_addr += 75;
 80043ca:	4b80      	ldr	r3, [pc, #512]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	334b      	adds	r3, #75	; 0x4b
 80043d0:	4a7e      	ldr	r2, [pc, #504]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80043d2:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 80043d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d6:	3301      	adds	r3, #1
 80043d8:	653b      	str	r3, [r7, #80]	; 0x50
 80043da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	429a      	cmp	r2, r3
 80043e0:	dbe7      	blt.n	80043b2 <writeMegalovaniaSlow+0x4a>
	  }

	  writePauseSlow();
 80043e2:	f7ff ff9b 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 2; i++){
 80043e6:	2300      	movs	r3, #0
 80043e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ea:	e013      	b.n	8004414 <writeMegalovaniaSlow+0xac>
	  	  	  if(BSP_QSPI_Write((uint8_t *)D6, slow_music_addr, 38) != QSPI_OK){
 80043ec:	4b77      	ldr	r3, [pc, #476]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2226      	movs	r2, #38	; 0x26
 80043f2:	4619      	mov	r1, r3
 80043f4:	4877      	ldr	r0, [pc, #476]	; (80045d4 <writeMegalovaniaSlow+0x26c>)
 80043f6:	f001 f9d9 	bl	80057ac <BSP_QSPI_Write>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <writeMegalovaniaSlow+0x9c>
	  	  		  Error_Handler();
 8004400:	f000 ff54 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 38;
 8004404:	4b71      	ldr	r3, [pc, #452]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3326      	adds	r3, #38	; 0x26
 800440a:	4a70      	ldr	r2, [pc, #448]	; (80045cc <writeMegalovaniaSlow+0x264>)
 800440c:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	3301      	adds	r3, #1
 8004412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800441a:	429a      	cmp	r2, r3
 800441c:	dbe6      	blt.n	80043ec <writeMegalovaniaSlow+0x84>
	  }

	  writePauseSlow();
 800441e:	f7ff ff7d 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 3; i++){
 8004422:	2300      	movs	r3, #0
 8004424:	64bb      	str	r3, [r7, #72]	; 0x48
 8004426:	e013      	b.n	8004450 <writeMegalovaniaSlow+0xe8>
	  	  	  if(BSP_QSPI_Write((uint8_t *)A5, slow_music_addr, 50) != QSPI_OK){
 8004428:	4b68      	ldr	r3, [pc, #416]	; (80045cc <writeMegalovaniaSlow+0x264>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2232      	movs	r2, #50	; 0x32
 800442e:	4619      	mov	r1, r3
 8004430:	4869      	ldr	r0, [pc, #420]	; (80045d8 <writeMegalovaniaSlow+0x270>)
 8004432:	f001 f9bb 	bl	80057ac <BSP_QSPI_Write>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <writeMegalovaniaSlow+0xd8>
	  	  		  Error_Handler();
 800443c:	f000 ff36 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 50;
 8004440:	4b62      	ldr	r3, [pc, #392]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a61      	ldr	r2, [pc, #388]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004448:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 3; i++){
 800444a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444c:	3301      	adds	r3, #1
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445a:	429a      	cmp	r2, r3
 800445c:	dbe4      	blt.n	8004428 <writeMegalovaniaSlow+0xc0>
	  }

	  writePauseSlow();
 800445e:	f7ff ff5d 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 2; i++){
 8004462:	2300      	movs	r3, #0
 8004464:	647b      	str	r3, [r7, #68]	; 0x44
 8004466:	e013      	b.n	8004490 <writeMegalovaniaSlow+0x128>
	  	  	  if(BSP_QSPI_Write((uint8_t *)GG5, slow_music_addr, 53) != QSPI_OK){
 8004468:	4b58      	ldr	r3, [pc, #352]	; (80045cc <writeMegalovaniaSlow+0x264>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2235      	movs	r2, #53	; 0x35
 800446e:	4619      	mov	r1, r3
 8004470:	485a      	ldr	r0, [pc, #360]	; (80045dc <writeMegalovaniaSlow+0x274>)
 8004472:	f001 f99b 	bl	80057ac <BSP_QSPI_Write>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <writeMegalovaniaSlow+0x118>
	  	  		  Error_Handler();
 800447c:	f000 ff16 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 53;
 8004480:	4b52      	ldr	r3, [pc, #328]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3335      	adds	r3, #53	; 0x35
 8004486:	4a51      	ldr	r2, [pc, #324]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004488:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 800448a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448c:	3301      	adds	r3, #1
 800448e:	647b      	str	r3, [r7, #68]	; 0x44
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004496:	429a      	cmp	r2, r3
 8004498:	dbe6      	blt.n	8004468 <writeMegalovaniaSlow+0x100>
	  }

	  writePauseSlow();
 800449a:	f7ff ff3f 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 2; i++){
 800449e:	2300      	movs	r3, #0
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
 80044a2:	e013      	b.n	80044cc <writeMegalovaniaSlow+0x164>
	  	  	  if(BSP_QSPI_Write((uint8_t *)G5, slow_music_addr, 56) != QSPI_OK){
 80044a4:	4b49      	ldr	r3, [pc, #292]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2238      	movs	r2, #56	; 0x38
 80044aa:	4619      	mov	r1, r3
 80044ac:	484c      	ldr	r0, [pc, #304]	; (80045e0 <writeMegalovaniaSlow+0x278>)
 80044ae:	f001 f97d 	bl	80057ac <BSP_QSPI_Write>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <writeMegalovaniaSlow+0x154>
	  	  		  Error_Handler();
 80044b8:	f000 fef8 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 56;
 80044bc:	4b43      	ldr	r3, [pc, #268]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3338      	adds	r3, #56	; 0x38
 80044c2:	4a42      	ldr	r2, [pc, #264]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80044c4:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 80044c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c8:	3301      	adds	r3, #1
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d2:	429a      	cmp	r2, r3
 80044d4:	dbe6      	blt.n	80044a4 <writeMegalovaniaSlow+0x13c>
	  }

	  writePauseSlow();
 80044d6:	f7ff ff21 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 2; i++){
 80044da:	2300      	movs	r3, #0
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044de:	e013      	b.n	8004508 <writeMegalovaniaSlow+0x1a0>
	  	  	  if(BSP_QSPI_Write((uint8_t *)F5, slow_music_addr, 63) != QSPI_OK){
 80044e0:	4b3a      	ldr	r3, [pc, #232]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	223f      	movs	r2, #63	; 0x3f
 80044e6:	4619      	mov	r1, r3
 80044e8:	483e      	ldr	r0, [pc, #248]	; (80045e4 <writeMegalovaniaSlow+0x27c>)
 80044ea:	f001 f95f 	bl	80057ac <BSP_QSPI_Write>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <writeMegalovaniaSlow+0x190>
	  	  		  Error_Handler();
 80044f4:	f000 feda 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 63;
 80044f8:	4b34      	ldr	r3, [pc, #208]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	333f      	adds	r3, #63	; 0x3f
 80044fe:	4a33      	ldr	r2, [pc, #204]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004500:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 8004502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004504:	3301      	adds	r3, #1
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800450e:	429a      	cmp	r2, r3
 8004510:	dbe6      	blt.n	80044e0 <writeMegalovaniaSlow+0x178>
	  }

	  writePauseSlow();
 8004512:	f7ff ff03 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 8004516:	2300      	movs	r3, #0
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38
 800451a:	e013      	b.n	8004544 <writeMegalovaniaSlow+0x1dc>
	  	  	  if(BSP_QSPI_Write((uint8_t *)D5, slow_music_addr, 75) != QSPI_OK){
 800451c:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <writeMegalovaniaSlow+0x264>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	224b      	movs	r2, #75	; 0x4b
 8004522:	4619      	mov	r1, r3
 8004524:	482a      	ldr	r0, [pc, #168]	; (80045d0 <writeMegalovaniaSlow+0x268>)
 8004526:	f001 f941 	bl	80057ac <BSP_QSPI_Write>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <writeMegalovaniaSlow+0x1cc>
	  	  		  Error_Handler();
 8004530:	f000 febc 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 75;
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	334b      	adds	r3, #75	; 0x4b
 800453a:	4a24      	ldr	r2, [pc, #144]	; (80045cc <writeMegalovaniaSlow+0x264>)
 800453c:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	3301      	adds	r3, #1
 8004542:	63bb      	str	r3, [r7, #56]	; 0x38
 8004544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	dbe7      	blt.n	800451c <writeMegalovaniaSlow+0x1b4>
	  }

	  writePauseSlow();
 800454c:	f7ff fee6 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 8004550:	2300      	movs	r3, #0
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
 8004554:	e013      	b.n	800457e <writeMegalovaniaSlow+0x216>
	  	  	  if(BSP_QSPI_Write((uint8_t *)F5, slow_music_addr, 63) != QSPI_OK){
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	223f      	movs	r2, #63	; 0x3f
 800455c:	4619      	mov	r1, r3
 800455e:	4821      	ldr	r0, [pc, #132]	; (80045e4 <writeMegalovaniaSlow+0x27c>)
 8004560:	f001 f924 	bl	80057ac <BSP_QSPI_Write>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <writeMegalovaniaSlow+0x206>
	  	  		  Error_Handler();
 800456a:	f000 fe9f 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 63;
 800456e:	4b17      	ldr	r3, [pc, #92]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	333f      	adds	r3, #63	; 0x3f
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004576:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	3301      	adds	r3, #1
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
 800457e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	429a      	cmp	r2, r3
 8004584:	dbe7      	blt.n	8004556 <writeMegalovaniaSlow+0x1ee>
	  }

	  writePauseSlow();
 8004586:	f7ff fec9 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 800458a:	2300      	movs	r3, #0
 800458c:	633b      	str	r3, [r7, #48]	; 0x30
 800458e:	e013      	b.n	80045b8 <writeMegalovaniaSlow+0x250>
	  	  	  if(BSP_QSPI_Write((uint8_t *)G5, slow_music_addr, 56) != QSPI_OK){
 8004590:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <writeMegalovaniaSlow+0x264>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2238      	movs	r2, #56	; 0x38
 8004596:	4619      	mov	r1, r3
 8004598:	4811      	ldr	r0, [pc, #68]	; (80045e0 <writeMegalovaniaSlow+0x278>)
 800459a:	f001 f907 	bl	80057ac <BSP_QSPI_Write>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <writeMegalovaniaSlow+0x240>
	  	  		  Error_Handler();
 80045a4:	f000 fe82 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 56;
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3338      	adds	r3, #56	; 0x38
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <writeMegalovaniaSlow+0x264>)
 80045b0:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	3301      	adds	r3, #1
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30
 80045b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	dbe7      	blt.n	8004590 <writeMegalovaniaSlow+0x228>
	  }

	  writePauseSlow();
 80045c0:	f7ff feac 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 80045c4:	2300      	movs	r3, #0
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c8:	e022      	b.n	8004610 <writeMegalovaniaSlow+0x2a8>
 80045ca:	bf00      	nop
 80045cc:	200001b4 	.word	0x200001b4
 80045d0:	20001170 	.word	0x20001170
 80045d4:	2000141c 	.word	0x2000141c
 80045d8:	20001334 	.word	0x20001334
 80045dc:	200012fc 	.word	0x200012fc
 80045e0:	200012c4 	.word	0x200012c4
 80045e4:	20001248 	.word	0x20001248
	  	  	  if(BSP_QSPI_Write((uint8_t *)C5, slow_music_addr, 84) != QSPI_OK){
 80045e8:	4b94      	ldr	r3, [pc, #592]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2254      	movs	r2, #84	; 0x54
 80045ee:	4619      	mov	r1, r3
 80045f0:	4893      	ldr	r0, [pc, #588]	; (8004840 <writeMegalovaniaSlow+0x4d8>)
 80045f2:	f001 f8db 	bl	80057ac <BSP_QSPI_Write>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <writeMegalovaniaSlow+0x298>
	  	  		  Error_Handler();
 80045fc:	f000 fe56 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 84;
 8004600:	4b8e      	ldr	r3, [pc, #568]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3354      	adds	r3, #84	; 0x54
 8004606:	4a8d      	ldr	r2, [pc, #564]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004608:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	3301      	adds	r3, #1
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	dbe7      	blt.n	80045e8 <writeMegalovaniaSlow+0x280>
	  }

	  writePauseSlow();
 8004618:	f7ff fe80 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 800461c:	2300      	movs	r3, #0
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004620:	e013      	b.n	800464a <writeMegalovaniaSlow+0x2e2>
	  	  	  if(BSP_QSPI_Write((uint8_t *)C5, slow_music_addr, 84) != QSPI_OK){
 8004622:	4b86      	ldr	r3, [pc, #536]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2254      	movs	r2, #84	; 0x54
 8004628:	4619      	mov	r1, r3
 800462a:	4885      	ldr	r0, [pc, #532]	; (8004840 <writeMegalovaniaSlow+0x4d8>)
 800462c:	f001 f8be 	bl	80057ac <BSP_QSPI_Write>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <writeMegalovaniaSlow+0x2d2>
	  	  		  Error_Handler();
 8004636:	f000 fe39 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 84;
 800463a:	4b80      	ldr	r3, [pc, #512]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3354      	adds	r3, #84	; 0x54
 8004640:	4a7e      	ldr	r2, [pc, #504]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004642:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	3301      	adds	r3, #1
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
 800464a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	dbe7      	blt.n	8004622 <writeMegalovaniaSlow+0x2ba>
	  }

	  writePauseSlow();
 8004652:	f7ff fe63 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 2; i++){
 8004656:	2300      	movs	r3, #0
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	e013      	b.n	8004684 <writeMegalovaniaSlow+0x31c>
	  	  	  if(BSP_QSPI_Write((uint8_t *)D6, slow_music_addr, 38) != QSPI_OK){
 800465c:	4b77      	ldr	r3, [pc, #476]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2226      	movs	r2, #38	; 0x26
 8004662:	4619      	mov	r1, r3
 8004664:	4877      	ldr	r0, [pc, #476]	; (8004844 <writeMegalovaniaSlow+0x4dc>)
 8004666:	f001 f8a1 	bl	80057ac <BSP_QSPI_Write>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <writeMegalovaniaSlow+0x30c>
	  	  		  Error_Handler();
 8004670:	f000 fe1c 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 38;
 8004674:	4b71      	ldr	r3, [pc, #452]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3326      	adds	r3, #38	; 0x26
 800467a:	4a70      	ldr	r2, [pc, #448]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 800467c:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	3301      	adds	r3, #1
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468a:	429a      	cmp	r2, r3
 800468c:	dbe6      	blt.n	800465c <writeMegalovaniaSlow+0x2f4>
	  }

	  writePauseSlow();
 800468e:	f7ff fe45 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 3; i++){
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	e013      	b.n	80046c0 <writeMegalovaniaSlow+0x358>
	  	  	  if(BSP_QSPI_Write((uint8_t *)A5, slow_music_addr, 50) != QSPI_OK){
 8004698:	4b68      	ldr	r3, [pc, #416]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2232      	movs	r2, #50	; 0x32
 800469e:	4619      	mov	r1, r3
 80046a0:	4869      	ldr	r0, [pc, #420]	; (8004848 <writeMegalovaniaSlow+0x4e0>)
 80046a2:	f001 f883 	bl	80057ac <BSP_QSPI_Write>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <writeMegalovaniaSlow+0x348>
	  	  		  Error_Handler();
 80046ac:	f000 fdfe 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 50;
 80046b0:	4b62      	ldr	r3, [pc, #392]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3332      	adds	r3, #50	; 0x32
 80046b6:	4a61      	ldr	r2, [pc, #388]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80046b8:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 3; i++){
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	3301      	adds	r3, #1
 80046be:	623b      	str	r3, [r7, #32]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	6a3a      	ldr	r2, [r7, #32]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	dbe4      	blt.n	8004698 <writeMegalovaniaSlow+0x330>
	  }

	  writePauseSlow();
 80046ce:	f7ff fe25 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 2; i++){
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e013      	b.n	8004700 <writeMegalovaniaSlow+0x398>
	  	  	  if(BSP_QSPI_Write((uint8_t *)GG5, slow_music_addr, 53) != QSPI_OK){
 80046d8:	4b58      	ldr	r3, [pc, #352]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2235      	movs	r2, #53	; 0x35
 80046de:	4619      	mov	r1, r3
 80046e0:	485a      	ldr	r0, [pc, #360]	; (800484c <writeMegalovaniaSlow+0x4e4>)
 80046e2:	f001 f863 	bl	80057ac <BSP_QSPI_Write>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <writeMegalovaniaSlow+0x388>
	  	  		  Error_Handler();
 80046ec:	f000 fdde 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 53;
 80046f0:	4b52      	ldr	r3, [pc, #328]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3335      	adds	r3, #53	; 0x35
 80046f6:	4a51      	ldr	r2, [pc, #324]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80046f8:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	429a      	cmp	r2, r3
 8004708:	dbe6      	blt.n	80046d8 <writeMegalovaniaSlow+0x370>
	  }

	  writePauseSlow();
 800470a:	f7ff fe07 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 2; i++){
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e013      	b.n	800473c <writeMegalovaniaSlow+0x3d4>
	  	  	  if(BSP_QSPI_Write((uint8_t *)G5, slow_music_addr, 56) != QSPI_OK){
 8004714:	4b49      	ldr	r3, [pc, #292]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2238      	movs	r2, #56	; 0x38
 800471a:	4619      	mov	r1, r3
 800471c:	484c      	ldr	r0, [pc, #304]	; (8004850 <writeMegalovaniaSlow+0x4e8>)
 800471e:	f001 f845 	bl	80057ac <BSP_QSPI_Write>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <writeMegalovaniaSlow+0x3c4>
	  	  		  Error_Handler();
 8004728:	f000 fdc0 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 56;
 800472c:	4b43      	ldr	r3, [pc, #268]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3338      	adds	r3, #56	; 0x38
 8004732:	4a42      	ldr	r2, [pc, #264]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004734:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	3301      	adds	r3, #1
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	429a      	cmp	r2, r3
 8004744:	dbe6      	blt.n	8004714 <writeMegalovaniaSlow+0x3ac>
	  }

	  writePauseSlow();
 8004746:	f7ff fde9 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor * 2; i++){
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e013      	b.n	8004778 <writeMegalovaniaSlow+0x410>
	  	  	  if(BSP_QSPI_Write((uint8_t *)F5, slow_music_addr, 63) != QSPI_OK){
 8004750:	4b3a      	ldr	r3, [pc, #232]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	223f      	movs	r2, #63	; 0x3f
 8004756:	4619      	mov	r1, r3
 8004758:	483e      	ldr	r0, [pc, #248]	; (8004854 <writeMegalovaniaSlow+0x4ec>)
 800475a:	f001 f827 	bl	80057ac <BSP_QSPI_Write>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <writeMegalovaniaSlow+0x400>
	  	  		  Error_Handler();
 8004764:	f000 fda2 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 63;
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	333f      	adds	r3, #63	; 0x3f
 800476e:	4a33      	ldr	r2, [pc, #204]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004770:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor * 2; i++){
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3301      	adds	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	429a      	cmp	r2, r3
 8004780:	dbe6      	blt.n	8004750 <writeMegalovaniaSlow+0x3e8>
	  }

	  writePauseSlow();
 8004782:	f7ff fdcb 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	e013      	b.n	80047b4 <writeMegalovaniaSlow+0x44c>
	  	  	  if(BSP_QSPI_Write((uint8_t *)D5, slow_music_addr, 75) != QSPI_OK){
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	224b      	movs	r2, #75	; 0x4b
 8004792:	4619      	mov	r1, r3
 8004794:	4830      	ldr	r0, [pc, #192]	; (8004858 <writeMegalovaniaSlow+0x4f0>)
 8004796:	f001 f809 	bl	80057ac <BSP_QSPI_Write>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <writeMegalovaniaSlow+0x43c>
	  	  		  Error_Handler();
 80047a0:	f000 fd84 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 75;
 80047a4:	4b25      	ldr	r3, [pc, #148]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	334b      	adds	r3, #75	; 0x4b
 80047aa:	4a24      	ldr	r2, [pc, #144]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80047ac:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3301      	adds	r3, #1
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	dbe7      	blt.n	800478c <writeMegalovaniaSlow+0x424>
	  }

	  writePauseSlow();
 80047bc:	f7ff fdae 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e013      	b.n	80047ee <writeMegalovaniaSlow+0x486>
	  	  	  if(BSP_QSPI_Write((uint8_t *)F5, slow_music_addr, 63) != QSPI_OK){
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	223f      	movs	r2, #63	; 0x3f
 80047cc:	4619      	mov	r1, r3
 80047ce:	4821      	ldr	r0, [pc, #132]	; (8004854 <writeMegalovaniaSlow+0x4ec>)
 80047d0:	f000 ffec 	bl	80057ac <BSP_QSPI_Write>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <writeMegalovaniaSlow+0x476>
	  	  		  Error_Handler();
 80047da:	f000 fd67 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 63;
 80047de:	4b17      	ldr	r3, [pc, #92]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	333f      	adds	r3, #63	; 0x3f
 80047e4:	4a15      	ldr	r2, [pc, #84]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 80047e6:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	dbe7      	blt.n	80047c6 <writeMegalovaniaSlow+0x45e>
	  }

	  writePauseSlow();
 80047f6:	f7ff fd91 	bl	800431c <writePauseSlow>

	  for(int i = 0; i < factor; i++){
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	e013      	b.n	8004828 <writeMegalovaniaSlow+0x4c0>
	  	  	  if(BSP_QSPI_Write((uint8_t *)G5, slow_music_addr, 56) != QSPI_OK){
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2238      	movs	r2, #56	; 0x38
 8004806:	4619      	mov	r1, r3
 8004808:	4811      	ldr	r0, [pc, #68]	; (8004850 <writeMegalovaniaSlow+0x4e8>)
 800480a:	f000 ffcf 	bl	80057ac <BSP_QSPI_Write>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <writeMegalovaniaSlow+0x4b0>
	  	  		  Error_Handler();
 8004814:	f000 fd4a 	bl	80052ac <Error_Handler>
	  	  	  }
		  slow_music_addr += 56;
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3338      	adds	r3, #56	; 0x38
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <writeMegalovaniaSlow+0x4d4>)
 8004820:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < factor; i++){
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	3301      	adds	r3, #1
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	dbe7      	blt.n	8004800 <writeMegalovaniaSlow+0x498>
	  }

	  writePauseSlow();
 8004830:	f7ff fd74 	bl	800431c <writePauseSlow>
}
 8004834:	bf00      	nop
 8004836:	3758      	adds	r7, #88	; 0x58
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	200001b4 	.word	0x200001b4
 8004840:	200010cc 	.word	0x200010cc
 8004844:	2000141c 	.word	0x2000141c
 8004848:	20001334 	.word	0x20001334
 800484c:	200012fc 	.word	0x200012fc
 8004850:	200012c4 	.word	0x200012c4
 8004854:	20001248 	.word	0x20001248
 8004858:	20001170 	.word	0x20001170

0800485c <gameReset>:
}

/**
 * @brief Reset the game values
 */
void gameReset(){
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
	ax = 0;
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <gameReset+0x94>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
	ay = 0;
 8004868:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <gameReset+0x98>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
	az = 0;
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <gameReset+0x9c>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
	satellite_pos = 0;
 8004874:	4b21      	ldr	r3, [pc, #132]	; (80048fc <gameReset+0xa0>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
	turning_flag = 0;
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <gameReset+0xa4>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
	score = 0;
 8004880:	4b20      	ldr	r3, [pc, #128]	; (8004904 <gameReset+0xa8>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
	obs_pos = -1;
 8004886:	4b20      	ldr	r3, [pc, #128]	; (8004908 <gameReset+0xac>)
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	601a      	str	r2, [r3, #0]

	for (int i = 0; i <= 2; i++){
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	e015      	b.n	80048c0 <gameReset+0x64>
		previous_gyro[i] = 0;
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <gameReset+0xb0>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
		gyro_values[i] = 0;
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <gameReset+0xb4>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
		deg_values[i] = 0;
 80048b0:	4a18      	ldr	r2, [pc, #96]	; (8004914 <gameReset+0xb8>)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2100      	movs	r1, #0
 80048b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i <= 2; i++){
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3301      	adds	r3, #1
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	dde6      	ble.n	8004894 <gameReset+0x38>
	}

	for (int j = 0; j <= 3; j++){
 80048c6:	2300      	movs	r3, #0
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	e007      	b.n	80048dc <gameReset+0x80>
		obstacle[j] = 0;
 80048cc:	4a12      	ldr	r2, [pc, #72]	; (8004918 <gameReset+0xbc>)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2100      	movs	r1, #0
 80048d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int j = 0; j <= 3; j++){
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	ddf4      	ble.n	80048cc <gameReset+0x70>
	}
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20000658 	.word	0x20000658
 80048f4:	2000065c 	.word	0x2000065c
 80048f8:	20000660 	.word	0x20000660
 80048fc:	2000069c 	.word	0x2000069c
 8004900:	200006a0 	.word	0x200006a0
 8004904:	200006ac 	.word	0x200006ac
 8004908:	20000004 	.word	0x20000004
 800490c:	20000664 	.word	0x20000664
 8004910:	20000670 	.word	0x20000670
 8004914:	2000067c 	.word	0x2000067c
 8004918:	20000688 	.word	0x20000688

0800491c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	f5ad 2d87 	sub.w	sp, sp, #276480	; 0x43800
 8004922:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8004926:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004928:	f001 ffa6 	bl	8006878 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize the sensors
  BSP_GYRO_Init();
 800492c:	f000 fe14 	bl	8005558 <BSP_GYRO_Init>
  BSP_QSPI_Init();
 8004930:	f000 fe6c 	bl	800560c <BSP_QSPI_Init>

  gyro_values[0] = 0;
 8004934:	4b91      	ldr	r3, [pc, #580]	; (8004b7c <main+0x260>)
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
  gyro_values[1] = 0;
 800493c:	4b8f      	ldr	r3, [pc, #572]	; (8004b7c <main+0x260>)
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	605a      	str	r2, [r3, #4]
  gyro_values[2] = 0;
 8004944:	4b8d      	ldr	r3, [pc, #564]	; (8004b7c <main+0x260>)
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	609a      	str	r2, [r3, #8]

  createTones();
 800494c:	f7fc fcb4 	bl	80012b8 <createTones>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004950:	f000 fa3a 	bl	8004dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004954:	f000 fc16 	bl	8005184 <MX_GPIO_Init>
  MX_DMA_Init();
 8004958:	f000 fbea 	bl	8005130 <MX_DMA_Init>
  MX_DAC1_Init();
 800495c:	f000 fa86 	bl	8004e6c <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8004960:	f000 fb9a 	bl	8005098 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8004964:	f000 fab6 	bl	8004ed4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8004968:	f000 fb48 	bl	8004ffc <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 800496c:	f000 faf2 	bl	8004f54 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004970:	2100      	movs	r1, #0
 8004972:	4883      	ldr	r0, [pc, #524]	; (8004b80 <main+0x264>)
 8004974:	f002 f8e0 	bl	8006b38 <HAL_DAC_Start>

  for(int i = 0; i < 10; i++){
 8004978:	2300      	movs	r3, #0
 800497a:	f507 2287 	add.w	r2, r7, #276480	; 0x43800
 800497e:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	e01c      	b.n	80049c0 <main+0xa4>
  	  if(BSP_QSPI_Erase_Block(addr + i * 0x00010000) != QSPI_OK){
 8004986:	f507 2387 	add.w	r3, r7, #276480	; 0x43800
 800498a:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	461a      	mov	r2, r3
 8004994:	4b7b      	ldr	r3, [pc, #492]	; (8004b84 <main+0x268>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4413      	add	r3, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f000 ff8c 	bl	80058b8 <BSP_QSPI_Erase_Block>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <main+0x8e>
  		  Error_Handler();
 80049a6:	f000 fc81 	bl	80052ac <Error_Handler>
  for(int i = 0; i < 10; i++){
 80049aa:	f507 2387 	add.w	r3, r7, #276480	; 0x43800
 80049ae:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	f507 2287 	add.w	r2, r7, #276480	; 0x43800
 80049ba:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	f507 2387 	add.w	r3, r7, #276480	; 0x43800
 80049c4:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b09      	cmp	r3, #9
 80049cc:	dddb      	ble.n	8004986 <main+0x6a>
  	  }
  }

  uint8_t megalovania_slow[184760] = {0};
 80049ce:	f507 33b5 	add.w	r3, r7, #92672	; 0x16a00
 80049d2:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 80049d6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	3304      	adds	r3, #4
 80049e0:	4a69      	ldr	r2, [pc, #420]	; (8004b88 <main+0x26c>)
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f008 f951 	bl	800cc8c <memset>
  uint8_t megalovania_quick[92460] = {0};
 80049ea:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80049ee:	f6a3 23ec 	subw	r3, r3, #2796	; 0xaec
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4a64      	ldr	r2, [pc, #400]	; (8004b8c <main+0x270>)
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f008 f945 	bl	800cc8c <memset>

  writeMegalovaniaSlow();
 8004a02:	f7ff fcb1 	bl	8004368 <writeMegalovaniaSlow>
  writeMegalovaniaQuick();
 8004a06:	f7ff fa0f 	bl	8003e28 <writeMegalovaniaQuick>

  // Start the DAC and Timer
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	485c      	ldr	r0, [pc, #368]	; (8004b80 <main+0x264>)
 8004a0e:	f002 f893 	bl	8006b38 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8004a12:	485f      	ldr	r0, [pc, #380]	; (8004b90 <main+0x274>)
 8004a14:	f006 fdc6 	bl	800b5a4 <HAL_TIM_Base_Start_IT>
		/**
		 * =============================== Update UI ===============================
		 */

		// In the start state
		if (gameStatus == 0){
 8004a18:	4b5e      	ldr	r3, [pc, #376]	; (8004b94 <main+0x278>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d141      	bne.n	8004aa4 <main+0x188>

			// If the welcome page haven't been printed, print it.
			if (is_printed == 0){
 8004a20:	4b5d      	ldr	r3, [pc, #372]	; (8004b98 <main+0x27c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <main+0x120>
				is_printed = 1;
 8004a28:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <main+0x27c>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
				gameReset();
 8004a2e:	f7ff ff15 	bl	800485c <gameReset>
				printMessage(welcome);
 8004a32:	4b5a      	ldr	r3, [pc, #360]	; (8004b9c <main+0x280>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fc fb8e 	bl	8001158 <printMessage>
			}

			// If the button is pressed
			if (is_pressed == 1){
 8004a3c:	4b58      	ldr	r3, [pc, #352]	; (8004ba0 <main+0x284>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	f040 819d 	bne.w	8004d80 <main+0x464>
				is_pressed = 0;
 8004a46:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <main+0x284>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
				is_printed = 0;
 8004a4c:	4b52      	ldr	r3, [pc, #328]	; (8004b98 <main+0x27c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
				gameStatus = 1;
 8004a52:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <main+0x278>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
				MAX_COUNT = 3;
 8004a58:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <main+0x288>)
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	601a      	str	r2, [r3, #0]

				if(BSP_QSPI_Read((uint8_t *)megalovania_slow, 0x00020000, 184760) != QSPI_OK){
 8004a5e:	f507 33b5 	add.w	r3, r7, #92672	; 0x16a00
 8004a62:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8004a66:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a6a:	4a4f      	ldr	r2, [pc, #316]	; (8004ba8 <main+0x28c>)
 8004a6c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fe49 	bl	8005708 <BSP_QSPI_Read>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <main+0x164>
					Error_Handler();
 8004a7c:	f000 fc16 	bl	80052ac <Error_Handler>
				}

				HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8004a80:	2100      	movs	r1, #0
 8004a82:	483f      	ldr	r0, [pc, #252]	; (8004b80 <main+0x264>)
 8004a84:	f002 f976 	bl	8006d74 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, megalovania_slow, 184760, DAC_ALIGN_8B_R);
 8004a88:	f507 32b5 	add.w	r2, r7, #92672	; 0x16a00
 8004a8c:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8004a90:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8004a94:	2308      	movs	r3, #8
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <main+0x28c>)
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4838      	ldr	r0, [pc, #224]	; (8004b80 <main+0x264>)
 8004a9e:	f002 f89d 	bl	8006bdc <HAL_DAC_Start_DMA>
 8004aa2:	e16d      	b.n	8004d80 <main+0x464>
			}

		// In the playing state
		} else if (gameStatus == 1) {
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <main+0x278>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	f040 8148 	bne.w	8004d3e <main+0x422>
			if (mapUpdateCounter == MAX_COUNT - 1) {
 8004aae:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <main+0x288>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1e5a      	subs	r2, r3, #1
 8004ab4:	4b3d      	ldr	r3, [pc, #244]	; (8004bac <main+0x290>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	f040 8099 	bne.w	8004bf0 <main+0x2d4>
				if (MAX_COUNT == 3 && score >= 50){
 8004abe:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <main+0x288>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d108      	bne.n	8004ad8 <main+0x1bc>
 8004ac6:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <main+0x294>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b31      	cmp	r3, #49	; 0x31
 8004acc:	dd04      	ble.n	8004ad8 <main+0x1bc>
					MAX_COUNT--;
 8004ace:	4b35      	ldr	r3, [pc, #212]	; (8004ba4 <main+0x288>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	4a33      	ldr	r2, [pc, #204]	; (8004ba4 <main+0x288>)
 8004ad6:	6013      	str	r3, [r2, #0]
				}

				if (MAX_COUNT == 2 && score >= 150){
 8004ad8:	4b32      	ldr	r3, [pc, #200]	; (8004ba4 <main+0x288>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d125      	bne.n	8004b2c <main+0x210>
 8004ae0:	4b33      	ldr	r3, [pc, #204]	; (8004bb0 <main+0x294>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b95      	cmp	r3, #149	; 0x95
 8004ae6:	dd21      	ble.n	8004b2c <main+0x210>
					MAX_COUNT--;
 8004ae8:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <main+0x288>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <main+0x288>)
 8004af0:	6013      	str	r3, [r2, #0]

					if(BSP_QSPI_Read((uint8_t *)megalovania_quick, 0x00000000, 92460) != QSPI_OK){
 8004af2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004af6:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8004afa:	4a2e      	ldr	r2, [pc, #184]	; (8004bb4 <main+0x298>)
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fe02 	bl	8005708 <BSP_QSPI_Read>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <main+0x1f2>
						Error_Handler();
 8004b0a:	f000 fbcf 	bl	80052ac <Error_Handler>
					}

					HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	481b      	ldr	r0, [pc, #108]	; (8004b80 <main+0x264>)
 8004b12:	f002 f92f 	bl	8006d74 <HAL_DAC_Stop_DMA>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, megalovania_quick, 92460, DAC_ALIGN_8B_R);
 8004b16:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8004b1a:	f5a2 723b 	sub.w	r2, r2, #748	; 0x2ec
 8004b1e:	2308      	movs	r3, #8
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <main+0x298>)
 8004b24:	2100      	movs	r1, #0
 8004b26:	4816      	ldr	r0, [pc, #88]	; (8004b80 <main+0x264>)
 8004b28:	f002 f858 	bl	8006bdc <HAL_DAC_Start_DMA>
				}

				updateMap();
 8004b2c:	f7fc fa1a 	bl	8000f64 <updateMap>
				score++;
 8004b30:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <main+0x294>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3301      	adds	r3, #1
 8004b36:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <main+0x294>)
 8004b38:	6013      	str	r3, [r2, #0]

				// If a new obstacle is needed, create a new obstacle
				if (obs_pos < 0) {
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <main+0x29c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da40      	bge.n	8004bc4 <main+0x2a8>
					// Create an integer between 0 and ROAD_WIDTH.
					random_value = rand() % ROAD_WIDTH;
 8004b42:	f008 f8ab 	bl	800cc9c <rand>
 8004b46:	4603      	mov	r3, r0
 8004b48:	425a      	negs	r2, r3
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	f002 0203 	and.w	r2, r2, #3
 8004b52:	bf58      	it	pl
 8004b54:	4253      	negpl	r3, r2
 8004b56:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <main+0x2a0>)
 8004b58:	6013      	str	r3, [r2, #0]
					obstacle[random_value] = ROAD_LENGTH;
 8004b5a:	4b18      	ldr	r3, [pc, #96]	; (8004bbc <main+0x2a0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <main+0x2a4>)
 8004b60:	210a      	movs	r1, #10
 8004b62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					obs_pos = random_value;
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <main+0x2a0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <main+0x29c>)
 8004b6c:	6013      	str	r3, [r2, #0]
					generateObstacle(obs_pos);
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <main+0x29c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fc fac4 	bl	8001100 <generateObstacle>
 8004b78:	e03a      	b.n	8004bf0 <main+0x2d4>
 8004b7a:	bf00      	nop
 8004b7c:	20000670 	.word	0x20000670
 8004b80:	20000278 	.word	0x20000278
 8004b84:	20001694 	.word	0x20001694
 8004b88:	0002d1b4 	.word	0x0002d1b4
 8004b8c:	00016928 	.word	0x00016928
 8004b90:	20000388 	.word	0x20000388
 8004b94:	200006b4 	.word	0x200006b4
 8004b98:	200006a8 	.word	0x200006a8
 8004b9c:	200001a0 	.word	0x200001a0
 8004ba0:	200006a4 	.word	0x200006a4
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	0002d1b8 	.word	0x0002d1b8
 8004bac:	200006b0 	.word	0x200006b0
 8004bb0:	200006ac 	.word	0x200006ac
 8004bb4:	0001692c 	.word	0x0001692c
 8004bb8:	20000004 	.word	0x20000004
 8004bbc:	20000698 	.word	0x20000698
 8004bc0:	20000688 	.word	0x20000688

				}else {
					// else, update the obstacle position
					obstacle[obs_pos] -= 1;
 8004bc4:	4b70      	ldr	r3, [pc, #448]	; (8004d88 <main+0x46c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a70      	ldr	r2, [pc, #448]	; (8004d8c <main+0x470>)
 8004bca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004bce:	4b6e      	ldr	r3, [pc, #440]	; (8004d88 <main+0x46c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3a01      	subs	r2, #1
 8004bd4:	496d      	ldr	r1, [pc, #436]	; (8004d8c <main+0x470>)
 8004bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

					if(obstacle[obs_pos] <= 0){
 8004bda:	4b6b      	ldr	r3, [pc, #428]	; (8004d88 <main+0x46c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6b      	ldr	r2, [pc, #428]	; (8004d8c <main+0x470>)
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	dc03      	bgt.n	8004bf0 <main+0x2d4>
						obs_pos = -1;
 8004be8:	4b67      	ldr	r3, [pc, #412]	; (8004d88 <main+0x46c>)
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	601a      	str	r2, [r3, #0]
					}
				}
			}

			// Check if the game is over, and send the flag
			if(obstacle[satellite_pos] == 1) {
 8004bf0:	4b67      	ldr	r3, [pc, #412]	; (8004d90 <main+0x474>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a65      	ldr	r2, [pc, #404]	; (8004d8c <main+0x470>)
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d102      	bne.n	8004c04 <main+0x2e8>
				gameStatus = 2;
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <main+0x478>)
 8004c00:	2202      	movs	r2, #2
 8004c02:	601a      	str	r2, [r3, #0]
			}

			mapUpdateCounter = (mapUpdateCounter + 1) % MAX_COUNT;
 8004c04:	4b64      	ldr	r3, [pc, #400]	; (8004d98 <main+0x47c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	4a64      	ldr	r2, [pc, #400]	; (8004d9c <main+0x480>)
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004c12:	fb01 f202 	mul.w	r2, r1, r2
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	4a5f      	ldr	r2, [pc, #380]	; (8004d98 <main+0x47c>)
 8004c1a:	6013      	str	r3, [r2, #0]

			/**
			 * =============================== Do Gyroscope Read ===============================
			 */
			// Store previous values
			previous_gyro[0] = gyro_values[0];
 8004c1c:	4b60      	ldr	r3, [pc, #384]	; (8004da0 <main+0x484>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a60      	ldr	r2, [pc, #384]	; (8004da4 <main+0x488>)
 8004c22:	6013      	str	r3, [r2, #0]
			previous_gyro[1] = gyro_values[1];
 8004c24:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <main+0x484>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4a5e      	ldr	r2, [pc, #376]	; (8004da4 <main+0x488>)
 8004c2a:	6053      	str	r3, [r2, #4]
			previous_gyro[2] = gyro_values[2];
 8004c2c:	4b5c      	ldr	r3, [pc, #368]	; (8004da0 <main+0x484>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a5c      	ldr	r2, [pc, #368]	; (8004da4 <main+0x488>)
 8004c32:	6093      	str	r3, [r2, #8]

			// Read the sensors
			BSP_GYRO_GetXYZ(gyro_values);
 8004c34:	485a      	ldr	r0, [pc, #360]	; (8004da0 <main+0x484>)
 8004c36:	f000 fcd1 	bl	80055dc <BSP_GYRO_GetXYZ>

			// Convert the values into degree changed
			gyroIntegrate(gyro_values[0], gyro_values[1], gyro_values[2]);
 8004c3a:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <main+0x484>)
 8004c3c:	edd3 7a00 	vldr	s15, [r3]
 8004c40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004c44:	4b56      	ldr	r3, [pc, #344]	; (8004da0 <main+0x484>)
 8004c46:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c4a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8004c4e:	4b54      	ldr	r3, [pc, #336]	; (8004da0 <main+0x484>)
 8004c50:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c58:	ee17 2a90 	vmov	r2, s15
 8004c5c:	ee16 1a90 	vmov	r1, s13
 8004c60:	ee17 0a10 	vmov	r0, s14
 8004c64:	f7fc f8e4 	bl	8000e30 <gyroIntegrate>
			getAngleXYZ(deg_values);
 8004c68:	484f      	ldr	r0, [pc, #316]	; (8004da8 <main+0x48c>)
 8004c6a:	f7fc f93d 	bl	8000ee8 <getAngleXYZ>

			// Clean the buffer for storing the outputs
			memset(gyro_buf, '\0', strlen(gyro_buf));
 8004c6e:	484f      	ldr	r0, [pc, #316]	; (8004dac <main+0x490>)
 8004c70:	f7fb fac6 	bl	8000200 <strlen>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	2100      	movs	r1, #0
 8004c7a:	484c      	ldr	r0, [pc, #304]	; (8004dac <main+0x490>)
 8004c7c:	f008 f806 	bl	800cc8c <memset>

			// Do the gyroscope turning detection
			if(deg_values[2] <= -100){
 8004c80:	4b49      	ldr	r3, [pc, #292]	; (8004da8 <main+0x48c>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004c88:	da03      	bge.n	8004c92 <main+0x376>
//				sprintf(gyro_buf, "TURN RIGHT!\r\n");
				turning_flag = 1;
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <main+0x494>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e00b      	b.n	8004caa <main+0x38e>

			}else if(deg_values[2] >= 100){
 8004c92:	4b45      	ldr	r3, [pc, #276]	; (8004da8 <main+0x48c>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b63      	cmp	r3, #99	; 0x63
 8004c98:	dd04      	ble.n	8004ca4 <main+0x388>
//				sprintf(gyro_buf, "TURN LEFT!\r\n");
				turning_flag = -1;
 8004c9a:	4b45      	ldr	r3, [pc, #276]	; (8004db0 <main+0x494>)
 8004c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <main+0x38e>

			}else{
//				sprintf(gyro_buf, "Gyro (x, y, z): (%d, %d, %d)\r\nDegree Changed (x, y, z): (%d, %d, %d)\r\n",
//								(int) gyro_values[0], (int) gyro_values[1], (int) gyro_values[2],
//								(int) deg_values[0], (int) deg_values[1], (int) deg_values[2]);
				turning_flag = 0;
 8004ca4:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <main+0x494>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
			}

			/**
			 * =============================== Satellite Update ===============================
			 */
			int pos_to_update = satellite_pos;
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <main+0x474>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f507 2287 	add.w	r2, r7, #276480	; 0x43800
 8004cb2:	f502 723a 	add.w	r2, r2, #744	; 0x2e8
 8004cb6:	6013      	str	r3, [r2, #0]

			if (turning_flag == 1) pos_to_update = (satellite_pos + 1) > 3 ? 3 : satellite_pos + 1;
 8004cb8:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <main+0x494>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10b      	bne.n	8004cd8 <main+0x3bc>
 8004cc0:	4b33      	ldr	r3, [pc, #204]	; (8004d90 <main+0x474>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	bfa8      	it	ge
 8004cc8:	2302      	movge	r3, #2
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f507 2287 	add.w	r2, r7, #276480	; 0x43800
 8004cd0:	f502 723a 	add.w	r2, r2, #744	; 0x2e8
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e00f      	b.n	8004cf8 <main+0x3dc>
			else if (turning_flag == -1) pos_to_update = (satellite_pos - 1) < 0 ? 0 : satellite_pos - 1;
 8004cd8:	4b35      	ldr	r3, [pc, #212]	; (8004db0 <main+0x494>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d10a      	bne.n	8004cf8 <main+0x3dc>
 8004ce2:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <main+0x474>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	bfb8      	it	lt
 8004cea:	2301      	movlt	r3, #1
 8004cec:	3b01      	subs	r3, #1
 8004cee:	f507 2287 	add.w	r2, r7, #276480	; 0x43800
 8004cf2:	f502 723a 	add.w	r2, r2, #744	; 0x2e8
 8004cf6:	6013      	str	r3, [r2, #0]

			updateSatellite(pos_to_update);
 8004cf8:	f507 2387 	add.w	r3, r7, #276480	; 0x43800
 8004cfc:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f7fc f9b1 	bl	8001068 <updateSatellite>
			printMessage(map);
 8004d06:	482b      	ldr	r0, [pc, #172]	; (8004db4 <main+0x498>)
 8004d08:	f7fc fa26 	bl	8001158 <printMessage>

			// When turned, give a signal by LED 1 and wait for 180ms
			if(turning_flag != 0){
 8004d0c:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <main+0x494>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00c      	beq.n	8004d2e <main+0x412>
				HAL_GPIO_TogglePin(My_LED_GPIO_Port, My_LED_Pin);
 8004d14:	2120      	movs	r1, #32
 8004d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d1a:	f003 f831 	bl	8007d80 <HAL_GPIO_TogglePin>
				turning_flag = 0;
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <main+0x494>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
//				HAL_Delay(100);
				HAL_GPIO_TogglePin(My_LED_GPIO_Port, My_LED_Pin);
 8004d24:	2120      	movs	r1, #32
 8004d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d2a:	f003 f829 	bl	8007d80 <HAL_GPIO_TogglePin>
			}

			if(is_pressed == 1){
 8004d2e:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <main+0x49c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d124      	bne.n	8004d80 <main+0x464>
				is_pressed = 0;
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <main+0x49c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e020      	b.n	8004d80 <main+0x464>
			}

		// In the game over state
		} else if (gameStatus == 2) {
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <main+0x478>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d11c      	bne.n	8004d80 <main+0x464>
			if(is_printed == 0){
 8004d46:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <main+0x4a0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d108      	bne.n	8004d60 <main+0x444>
				HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8004d4e:	2100      	movs	r1, #0
 8004d50:	481b      	ldr	r0, [pc, #108]	; (8004dc0 <main+0x4a4>)
 8004d52:	f002 f80f 	bl	8006d74 <HAL_DAC_Stop_DMA>
				is_printed = 1;
 8004d56:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <main+0x4a0>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
				printEndingMessage();
 8004d5c:	f7fc fa3a 	bl	80011d4 <printEndingMessage>
			}

			if(is_pressed == 1){
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <main+0x49c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d10b      	bne.n	8004d80 <main+0x464>
				is_pressed = 0;
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <main+0x49c>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
				is_printed = 0;
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <main+0x4a0>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
				gameStatus = 0;
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <main+0x478>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
				score = 0;
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <main+0x4a8>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
			}
		}

		// Wait for 10ms to achieve 100Hz
		HAL_Delay(10);
 8004d80:	200a      	movs	r0, #10
 8004d82:	f001 fdb1 	bl	80068e8 <HAL_Delay>
		if (gameStatus == 0){
 8004d86:	e647      	b.n	8004a18 <main+0xfc>
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	20000688 	.word	0x20000688
 8004d90:	2000069c 	.word	0x2000069c
 8004d94:	200006b4 	.word	0x200006b4
 8004d98:	200006b0 	.word	0x200006b0
 8004d9c:	20000000 	.word	0x20000000
 8004da0:	20000670 	.word	0x20000670
 8004da4:	20000664 	.word	0x20000664
 8004da8:	2000067c 	.word	0x2000067c
 8004dac:	20000464 	.word	0x20000464
 8004db0:	200006a0 	.word	0x200006a0
 8004db4:	20000008 	.word	0x20000008
 8004db8:	200006a4 	.word	0x200006a4
 8004dbc:	200006a8 	.word	0x200006a8
 8004dc0:	20000278 	.word	0x20000278
 8004dc4:	200006ac 	.word	0x200006ac

08004dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b096      	sub	sp, #88	; 0x58
 8004dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dce:	f107 0314 	add.w	r3, r7, #20
 8004dd2:	2244      	movs	r2, #68	; 0x44
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f007 ff58 	bl	800cc8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ddc:	463b      	mov	r3, r7
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	609a      	str	r2, [r3, #8]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004dea:	2000      	movs	r0, #0
 8004dec:	f004 febc 	bl	8009b68 <HAL_PWREx_ControlVoltageScaling>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004df6:	f000 fa59 	bl	80052ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004dfa:	2310      	movs	r3, #16
 8004dfc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004e06:	2360      	movs	r3, #96	; 0x60
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004e16:	233c      	movs	r3, #60	; 0x3c
 8004e18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004e1e:	2302      	movs	r3, #2
 8004e20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004e22:	2302      	movs	r3, #2
 8004e24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f004 ff40 	bl	8009cb0 <HAL_RCC_OscConfig>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004e36:	f000 fa39 	bl	80052ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e3a:	230f      	movs	r3, #15
 8004e3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004e4e:	463b      	mov	r3, r7
 8004e50:	2105      	movs	r1, #5
 8004e52:	4618      	mov	r0, r3
 8004e54:	f005 fb52 	bl	800a4fc <HAL_RCC_ClockConfig>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004e5e:	f000 fa25 	bl	80052ac <Error_Handler>
  }
}
 8004e62:	bf00      	nop
 8004e64:	3758      	adds	r7, #88	; 0x58
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004e72:	463b      	mov	r3, r7
 8004e74:	2228      	movs	r2, #40	; 0x28
 8004e76:	2100      	movs	r1, #0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f007 ff07 	bl	800cc8c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <MX_DAC1_Init+0x60>)
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <MX_DAC1_Init+0x64>)
 8004e82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004e84:	4811      	ldr	r0, [pc, #68]	; (8004ecc <MX_DAC1_Init+0x60>)
 8004e86:	f001 fe35 	bl	8006af4 <HAL_DAC_Init>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004e90:	f000 fa0c 	bl	80052ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8004e98:	230a      	movs	r3, #10
 8004e9a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004eac:	463b      	mov	r3, r7
 8004eae:	2200      	movs	r2, #0
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4806      	ldr	r0, [pc, #24]	; (8004ecc <MX_DAC1_Init+0x60>)
 8004eb4:	f002 f826 	bl	8006f04 <HAL_DAC_ConfigChannel>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8004ebe:	f000 f9f5 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004ec2:	bf00      	nop
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000278 	.word	0x20000278
 8004ed0:	40007400 	.word	0x40007400

08004ed4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004eda:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <MX_I2C2_Init+0x78>)
 8004edc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004ee0:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <MX_I2C2_Init+0x7c>)
 8004ee2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004ee4:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004eea:	4b17      	ldr	r3, [pc, #92]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ef0:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004f0e:	480e      	ldr	r0, [pc, #56]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004f10:	f002 ff68 	bl	8007de4 <HAL_I2C_Init>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004f1a:	f000 f9c7 	bl	80052ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4809      	ldr	r0, [pc, #36]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004f22:	f003 fcf1 	bl	8008908 <HAL_I2CEx_ConfigAnalogFilter>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004f2c:	f000 f9be 	bl	80052ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004f30:	2100      	movs	r1, #0
 8004f32:	4805      	ldr	r0, [pc, #20]	; (8004f48 <MX_I2C2_Init+0x74>)
 8004f34:	f003 fd33 	bl	800899e <HAL_I2CEx_ConfigDigitalFilter>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004f3e:	f000 f9b5 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200002ec 	.word	0x200002ec
 8004f4c:	40005800 	.word	0x40005800
 8004f50:	307075b1 	.word	0x307075b1

08004f54 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8004f5a:	1d3b      	adds	r3, r7, #4
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8004f68:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f6a:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <MX_OCTOSPI1_Init+0xa4>)
 8004f6c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8004f6e:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8004f74:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8004f80:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f82:	2220      	movs	r2, #32
 8004f84:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8004f86:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8004f8c:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8004f98:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004fa4:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8004fb0:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004fb2:	2208      	movs	r2, #8
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8004fb6:	480f      	ldr	r0, [pc, #60]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004fb8:	f003 fd3e 	bl	8008a38 <HAL_OSPI_Init>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_OCTOSPI1_Init+0x72>
  {
    Error_Handler();
 8004fc2:	f000 f973 	bl	80052ac <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8004fce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004fd2:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fd4:	1d3b      	adds	r3, r7, #4
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4805      	ldr	r0, [pc, #20]	; (8004ff4 <MX_OCTOSPI1_Init+0xa0>)
 8004fde:	f004 f825 	bl	800902c <HAL_OSPIM_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_OCTOSPI1_Init+0x98>
  {
    Error_Handler();
 8004fe8:	f000 f960 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8004fec:	bf00      	nop
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20000338 	.word	0x20000338
 8004ff8:	a0001000 	.word	0xa0001000

08004ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005002:	f107 0310 	add.w	r3, r7, #16
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	605a      	str	r2, [r3, #4]
 800500c:	609a      	str	r2, [r3, #8]
 800500e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005010:	1d3b      	adds	r3, r7, #4
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800501a:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <MX_TIM2_Init+0x98>)
 800501c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005020:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005022:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <MX_TIM2_Init+0x98>)
 8005024:	2200      	movs	r2, #0
 8005026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005028:	4b1a      	ldr	r3, [pc, #104]	; (8005094 <MX_TIM2_Init+0x98>)
 800502a:	2200      	movs	r2, #0
 800502c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800502e:	4b19      	ldr	r3, [pc, #100]	; (8005094 <MX_TIM2_Init+0x98>)
 8005030:	f240 7216 	movw	r2, #1814	; 0x716
 8005034:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005036:	4b17      	ldr	r3, [pc, #92]	; (8005094 <MX_TIM2_Init+0x98>)
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800503c:	4b15      	ldr	r3, [pc, #84]	; (8005094 <MX_TIM2_Init+0x98>)
 800503e:	2200      	movs	r2, #0
 8005040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005042:	4814      	ldr	r0, [pc, #80]	; (8005094 <MX_TIM2_Init+0x98>)
 8005044:	f006 fa56 	bl	800b4f4 <HAL_TIM_Base_Init>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800504e:	f000 f92d 	bl	80052ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005056:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005058:	f107 0310 	add.w	r3, r7, #16
 800505c:	4619      	mov	r1, r3
 800505e:	480d      	ldr	r0, [pc, #52]	; (8005094 <MX_TIM2_Init+0x98>)
 8005060:	f006 fc2f 	bl	800b8c2 <HAL_TIM_ConfigClockSource>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800506a:	f000 f91f 	bl	80052ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800506e:	2320      	movs	r3, #32
 8005070:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005076:	1d3b      	adds	r3, r7, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4806      	ldr	r0, [pc, #24]	; (8005094 <MX_TIM2_Init+0x98>)
 800507c:	f006 fe46 	bl	800bd0c <HAL_TIMEx_MasterConfigSynchronization>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005086:	f000 f911 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800508a:	bf00      	nop
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000388 	.word	0x20000388

08005098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800509c:	4b22      	ldr	r3, [pc, #136]	; (8005128 <MX_USART1_UART_Init+0x90>)
 800509e:	4a23      	ldr	r2, [pc, #140]	; (800512c <MX_USART1_UART_Init+0x94>)
 80050a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80050a2:	4b21      	ldr	r3, [pc, #132]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050aa:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050b0:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050b6:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050be:	220c      	movs	r2, #12
 80050c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050c2:	4b19      	ldr	r3, [pc, #100]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050c8:	4b17      	ldr	r3, [pc, #92]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050d4:	4b14      	ldr	r3, [pc, #80]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050da:	4b13      	ldr	r3, [pc, #76]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050dc:	2200      	movs	r2, #0
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050e0:	4811      	ldr	r0, [pc, #68]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050e2:	f006 feb9 	bl	800be58 <HAL_UART_Init>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80050ec:	f000 f8de 	bl	80052ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050f0:	2100      	movs	r1, #0
 80050f2:	480d      	ldr	r0, [pc, #52]	; (8005128 <MX_USART1_UART_Init+0x90>)
 80050f4:	f007 fc82 	bl	800c9fc <HAL_UARTEx_SetTxFifoThreshold>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80050fe:	f000 f8d5 	bl	80052ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005102:	2100      	movs	r1, #0
 8005104:	4808      	ldr	r0, [pc, #32]	; (8005128 <MX_USART1_UART_Init+0x90>)
 8005106:	f007 fcb7 	bl	800ca78 <HAL_UARTEx_SetRxFifoThreshold>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005110:	f000 f8cc 	bl	80052ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005114:	4804      	ldr	r0, [pc, #16]	; (8005128 <MX_USART1_UART_Init+0x90>)
 8005116:	f007 fc38 	bl	800c98a <HAL_UARTEx_DisableFifoMode>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005120:	f000 f8c4 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005124:	bf00      	nop
 8005126:	bd80      	pop	{r7, pc}
 8005128:	200003d4 	.word	0x200003d4
 800512c:	40013800 	.word	0x40013800

08005130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <MX_DMA_Init+0x50>)
 8005138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800513a:	4a11      	ldr	r2, [pc, #68]	; (8005180 <MX_DMA_Init+0x50>)
 800513c:	f043 0304 	orr.w	r3, r3, #4
 8005140:	6493      	str	r3, [r2, #72]	; 0x48
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <MX_DMA_Init+0x50>)
 8005144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <MX_DMA_Init+0x50>)
 8005150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <MX_DMA_Init+0x50>)
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	6493      	str	r3, [r2, #72]	; 0x48
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <MX_DMA_Init+0x50>)
 800515c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	200b      	movs	r0, #11
 800516c:	f001 fc98 	bl	8006aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005170:	200b      	movs	r0, #11
 8005172:	f001 fcb1 	bl	8006ad8 <HAL_NVIC_EnableIRQ>

}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000

08005184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800518a:	f107 0314 	add.w	r3, r7, #20
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	609a      	str	r2, [r3, #8]
 8005196:	60da      	str	r2, [r3, #12]
 8005198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <MX_GPIO_Init+0xd4>)
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	4a2e      	ldr	r2, [pc, #184]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051a6:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b2:	4b29      	ldr	r3, [pc, #164]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	4a28      	ldr	r2, [pc, #160]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80051ca:	4b23      	ldr	r3, [pc, #140]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	4a22      	ldr	r2, [pc, #136]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051d0:	f043 0310 	orr.w	r3, r3, #16
 80051d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e6:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051e8:	f043 0302 	orr.w	r3, r3, #2
 80051ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051ee:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <MX_GPIO_Init+0xd4>)
 80051f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(My_LED_GPIO_Port, My_LED_Pin, GPIO_PIN_RESET);
 80051fa:	2200      	movs	r2, #0
 80051fc:	2120      	movs	r1, #32
 80051fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005202:	f002 fda5 	bl	8007d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : My_Button_Pin */
  GPIO_InitStruct.Pin = My_Button_Pin;
 8005206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800520a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800520c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(My_Button_GPIO_Port, &GPIO_InitStruct);
 8005216:	f107 0314 	add.w	r3, r7, #20
 800521a:	4619      	mov	r1, r3
 800521c:	480f      	ldr	r0, [pc, #60]	; (800525c <MX_GPIO_Init+0xd8>)
 800521e:	f002 fb13 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pin : My_LED_Pin */
  GPIO_InitStruct.Pin = My_LED_Pin;
 8005222:	2320      	movs	r3, #32
 8005224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005226:	2301      	movs	r3, #1
 8005228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(My_LED_GPIO_Port, &GPIO_InitStruct);
 8005232:	f107 0314 	add.w	r3, r7, #20
 8005236:	4619      	mov	r1, r3
 8005238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800523c:	f002 fb04 	bl	8007848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005240:	2200      	movs	r2, #0
 8005242:	2100      	movs	r1, #0
 8005244:	2028      	movs	r0, #40	; 0x28
 8005246:	f001 fc2b 	bl	8006aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800524a:	2028      	movs	r0, #40	; 0x28
 800524c:	f001 fc44 	bl	8006ad8 <HAL_NVIC_EnableIRQ>

}
 8005250:	bf00      	nop
 8005252:	3728      	adds	r7, #40	; 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40021000 	.word	0x40021000
 800525c:	48000800 	.word	0x48000800

08005260 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// GPIO Callback Function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	80fb      	strh	r3, [r7, #6]
	if ((int) GPIO_Pin == (int) My_Button_Pin) {
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005270:	d102      	bne.n	8005278 <HAL_GPIO_EXTI_Callback+0x18>
		is_pressed = 1;
 8005272:	4b04      	ldr	r3, [pc, #16]	; (8005284 <HAL_GPIO_EXTI_Callback+0x24>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
	}
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	200006a4 	.word	0x200006a4

08005288 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a04      	ldr	r2, [pc, #16]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d101      	bne.n	800529e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800529a:	f001 fb05 	bl	80068a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40001000 	.word	0x40001000

080052ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052b0:	b672      	cpsid	i
}
 80052b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052b4:	e7fe      	b.n	80052b4 <Error_Handler+0x8>
	...

080052b8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	; 0x28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80052c0:	4b27      	ldr	r3, [pc, #156]	; (8005360 <I2Cx_MspInit+0xa8>)
 80052c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c4:	4a26      	ldr	r2, [pc, #152]	; (8005360 <I2Cx_MspInit+0xa8>)
 80052c6:	f043 0302 	orr.w	r3, r3, #2
 80052ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052cc:	4b24      	ldr	r3, [pc, #144]	; (8005360 <I2Cx_MspInit+0xa8>)
 80052ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80052d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80052de:	2312      	movs	r3, #18
 80052e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80052e2:	2301      	movs	r3, #1
 80052e4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e6:	2303      	movs	r3, #3
 80052e8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80052ea:	2304      	movs	r3, #4
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80052ee:	f107 0314 	add.w	r3, r7, #20
 80052f2:	4619      	mov	r1, r3
 80052f4:	481b      	ldr	r0, [pc, #108]	; (8005364 <I2Cx_MspInit+0xac>)
 80052f6:	f002 faa7 	bl	8007848 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	4619      	mov	r1, r3
 8005300:	4818      	ldr	r0, [pc, #96]	; (8005364 <I2Cx_MspInit+0xac>)
 8005302:	f002 faa1 	bl	8007848 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <I2Cx_MspInit+0xa8>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	4a15      	ldr	r2, [pc, #84]	; (8005360 <I2Cx_MspInit+0xa8>)
 800530c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005310:	6593      	str	r3, [r2, #88]	; 0x58
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <I2Cx_MspInit+0xa8>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <I2Cx_MspInit+0xa8>)
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <I2Cx_MspInit+0xa8>)
 8005324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005328:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <I2Cx_MspInit+0xa8>)
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <I2Cx_MspInit+0xa8>)
 8005330:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005334:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8005336:	2200      	movs	r2, #0
 8005338:	210f      	movs	r1, #15
 800533a:	2021      	movs	r0, #33	; 0x21
 800533c:	f001 fbb0 	bl	8006aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8005340:	2021      	movs	r0, #33	; 0x21
 8005342:	f001 fbc9 	bl	8006ad8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8005346:	2200      	movs	r2, #0
 8005348:	210f      	movs	r1, #15
 800534a:	2022      	movs	r0, #34	; 0x22
 800534c:	f001 fba8 	bl	8006aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8005350:	2022      	movs	r0, #34	; 0x22
 8005352:	f001 fbc1 	bl	8006ad8 <HAL_NVIC_EnableIRQ>
}
 8005356:	bf00      	nop
 8005358:	3728      	adds	r7, #40	; 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	48000400 	.word	0x48000400

08005368 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a12      	ldr	r2, [pc, #72]	; (80053bc <I2Cx_Init+0x54>)
 8005374:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <I2Cx_Init+0x58>)
 800537a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ff89 	bl	80052b8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f002 fd1c 	bl	8007de4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80053ac:	2100      	movs	r1, #0
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f003 faaa 	bl	8008908 <HAL_I2CEx_ConfigAnalogFilter>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40005800 	.word	0x40005800
 80053c0:	00702681 	.word	0x00702681

080053c4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08a      	sub	sp, #40	; 0x28
 80053c8:	af04      	add	r7, sp, #16
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	461a      	mov	r2, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	72fb      	strb	r3, [r7, #11]
 80053d6:	460b      	mov	r3, r1
 80053d8:	813b      	strh	r3, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	b299      	uxth	r1, r3
 80053e6:	88f8      	ldrh	r0, [r7, #6]
 80053e8:	893a      	ldrh	r2, [r7, #8]
 80053ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053ee:	9302      	str	r3, [sp, #8]
 80053f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	4603      	mov	r3, r0
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f002 fec4 	bl	8008188 <HAL_I2C_Mem_Read>
 8005400:	4603      	mov	r3, r0
 8005402:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800540a:	7afb      	ldrb	r3, [r7, #11]
 800540c:	4619      	mov	r1, r3
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f832 	bl	8005478 <I2Cx_Error>
  }
  return status;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b08a      	sub	sp, #40	; 0x28
 8005422:	af04      	add	r7, sp, #16
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	4608      	mov	r0, r1
 8005428:	4611      	mov	r1, r2
 800542a:	461a      	mov	r2, r3
 800542c:	4603      	mov	r3, r0
 800542e:	72fb      	strb	r3, [r7, #11]
 8005430:	460b      	mov	r3, r1
 8005432:	813b      	strh	r3, [r7, #8]
 8005434:	4613      	mov	r3, r2
 8005436:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800543c:	7afb      	ldrb	r3, [r7, #11]
 800543e:	b299      	uxth	r1, r3
 8005440:	88f8      	ldrh	r0, [r7, #6]
 8005442:	893a      	ldrh	r2, [r7, #8]
 8005444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005448:	9302      	str	r3, [sp, #8]
 800544a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	4603      	mov	r3, r0
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f002 fd83 	bl	8007f60 <HAL_I2C_Mem_Write>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005464:	7afb      	ldrb	r3, [r7, #11]
 8005466:	4619      	mov	r1, r3
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f805 	bl	8005478 <I2Cx_Error>
  }
  return status;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f002 fd3c 	bl	8007f02 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ff6c 	bl	8005368 <I2Cx_Init>
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <SENSOR_IO_Init+0x10>)
 800549e:	f7ff ff63 	bl	8005368 <I2Cx_Init>
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	2000169c 	.word	0x2000169c

080054ac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	4603      	mov	r3, r0
 80054b4:	71fb      	strb	r3, [r7, #7]
 80054b6:	460b      	mov	r3, r1
 80054b8:	71bb      	strb	r3, [r7, #6]
 80054ba:	4613      	mov	r3, r2
 80054bc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80054be:	79bb      	ldrb	r3, [r7, #6]
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	79f9      	ldrb	r1, [r7, #7]
 80054c4:	2301      	movs	r3, #1
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	1d7b      	adds	r3, r7, #5
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	2301      	movs	r3, #1
 80054ce:	4803      	ldr	r0, [pc, #12]	; (80054dc <SENSOR_IO_Write+0x30>)
 80054d0:	f7ff ffa5 	bl	800541e <I2Cx_WriteMultiple>
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	2000169c 	.word	0x2000169c

080054e0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	4603      	mov	r3, r0
 80054e8:	460a      	mov	r2, r1
 80054ea:	71fb      	strb	r3, [r7, #7]
 80054ec:	4613      	mov	r3, r2
 80054ee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80054f4:	79bb      	ldrb	r3, [r7, #6]
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	79f9      	ldrb	r1, [r7, #7]
 80054fa:	2301      	movs	r3, #1
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	f107 030f 	add.w	r3, r7, #15
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2301      	movs	r3, #1
 8005506:	4804      	ldr	r0, [pc, #16]	; (8005518 <SENSOR_IO_Read+0x38>)
 8005508:	f7ff ff5c 	bl	80053c4 <I2Cx_ReadMultiple>

  return read_value;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	2000169c 	.word	0x2000169c

0800551c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af02      	add	r7, sp, #8
 8005522:	603a      	str	r2, [r7, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
 800552a:	460b      	mov	r3, r1
 800552c:	71bb      	strb	r3, [r7, #6]
 800552e:	4613      	mov	r3, r2
 8005530:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005532:	79bb      	ldrb	r3, [r7, #6]
 8005534:	b29a      	uxth	r2, r3
 8005536:	79f9      	ldrb	r1, [r7, #7]
 8005538:	88bb      	ldrh	r3, [r7, #4]
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2301      	movs	r3, #1
 8005542:	4804      	ldr	r0, [pc, #16]	; (8005554 <SENSOR_IO_ReadMultiple+0x38>)
 8005544:	f7ff ff3e 	bl	80053c4 <I2Cx_ReadMultiple>
 8005548:	4603      	mov	r3, r0
 800554a:	b29b      	uxth	r3, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	2000169c 	.word	0x2000169c

08005558 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005562:	2300      	movs	r3, #0
 8005564:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <BSP_GYRO_Init+0x7c>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	4798      	blx	r3
 800556c:	4603      	mov	r3, r0
 800556e:	2b6a      	cmp	r3, #106	; 0x6a
 8005570:	d002      	beq.n	8005578 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
 8005576:	e028      	b.n	80055ca <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <BSP_GYRO_Init+0x80>)
 800557a:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <BSP_GYRO_Init+0x7c>)
 800557c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8005582:	2330      	movs	r3, #48	; 0x30
 8005584:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800558e:	2340      	movs	r3, #64	; 0x40
 8005590:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000;
 8005596:	230c      	movs	r3, #12
 8005598:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800559a:	7aba      	ldrb	r2, [r7, #10]
 800559c:	797b      	ldrb	r3, [r7, #5]
 800559e:	4313      	orrs	r3, r2
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80055a4:	7a3b      	ldrb	r3, [r7, #8]
 80055a6:	f043 0304 	orr.w	r3, r3, #4
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	b21a      	sxth	r2, r3
 80055b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b21b      	sxth	r3, r3
 80055b8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <BSP_GYRO_Init+0x80>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	89ba      	ldrh	r2, [r7, #12]
 80055c2:	4610      	mov	r0, r2
 80055c4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200001bc 	.word	0x200001bc
 80055d8:	200016e8 	.word	0x200016e8

080055dc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <BSP_GYRO_GetXYZ+0x2c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <BSP_GYRO_GetXYZ+0x2c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80055f6:	4b04      	ldr	r3, [pc, #16]	; (8005608 <BSP_GYRO_GetXYZ+0x2c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
    }
  }
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	200016e8 	.word	0x200016e8

0800560c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8005612:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <BSP_QSPI_Init+0xf4>)
 8005614:	4a3b      	ldr	r2, [pc, #236]	; (8005704 <BSP_QSPI_Init+0xf8>)
 8005616:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8005618:	4839      	ldr	r0, [pc, #228]	; (8005700 <BSP_QSPI_Init+0xf4>)
 800561a:	f003 fab3 	bl	8008b84 <HAL_OSPI_DeInit>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e067      	b.n	80056f8 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8005628:	f000 f990 	bl	800594c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 800562c:	4b34      	ldr	r3, [pc, #208]	; (8005700 <BSP_QSPI_Init+0xf4>)
 800562e:	2204      	movs	r2, #4
 8005630:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8005632:	4b33      	ldr	r3, [pc, #204]	; (8005700 <BSP_QSPI_Init+0xf4>)
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005638:	4b31      	ldr	r3, [pc, #196]	; (8005700 <BSP_QSPI_Init+0xf4>)
 800563a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005644:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	fa93 f3a3 	rbit	r3, r3
 800564c:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8005658:	2320      	movs	r3, #32
 800565a:	e003      	b.n	8005664 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	fab3 f383 	clz	r3, r3
 8005662:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8005664:	461a      	mov	r2, r3
 8005666:	4b26      	ldr	r3, [pc, #152]	; (8005700 <BSP_QSPI_Init+0xf4>)
 8005668:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 800566a:	4b25      	ldr	r3, [pc, #148]	; (8005700 <BSP_QSPI_Init+0xf4>)
 800566c:	2201      	movs	r2, #1
 800566e:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8005670:	4b23      	ldr	r3, [pc, #140]	; (8005700 <BSP_QSPI_Init+0xf4>)
 8005672:	2200      	movs	r2, #0
 8005674:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8005676:	4b22      	ldr	r3, [pc, #136]	; (8005700 <BSP_QSPI_Init+0xf4>)
 8005678:	2200      	movs	r2, #0
 800567a:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 800567c:	4b20      	ldr	r3, [pc, #128]	; (8005700 <BSP_QSPI_Init+0xf4>)
 800567e:	2204      	movs	r2, #4
 8005680:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8005682:	4b1f      	ldr	r3, [pc, #124]	; (8005700 <BSP_QSPI_Init+0xf4>)
 8005684:	2200      	movs	r2, #0
 8005686:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005688:	4b1d      	ldr	r3, [pc, #116]	; (8005700 <BSP_QSPI_Init+0xf4>)
 800568a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568e:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8005690:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <BSP_QSPI_Init+0xf4>)
 8005692:	2200      	movs	r2, #0
 8005694:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8005696:	4b1a      	ldr	r3, [pc, #104]	; (8005700 <BSP_QSPI_Init+0xf4>)
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800569c:	4818      	ldr	r0, [pc, #96]	; (8005700 <BSP_QSPI_Init+0xf4>)
 800569e:	f003 f9cb 	bl	8008a38 <HAL_OSPI_Init>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e025      	b.n	80056f8 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 80056ac:	4814      	ldr	r0, [pc, #80]	; (8005700 <BSP_QSPI_Init+0xf4>)
 80056ae:	f000 f98d 	bl	80059cc <QSPI_ResetMemory>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 80056b8:	2304      	movs	r3, #4
 80056ba:	e01d      	b.n	80056f8 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80056bc:	2101      	movs	r1, #1
 80056be:	4810      	ldr	r0, [pc, #64]	; (8005700 <BSP_QSPI_Init+0xf4>)
 80056c0:	f000 fa72 	bl	8005ba8 <QSPI_QuadMode>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e014      	b.n	80056f8 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80056ce:	2101      	movs	r1, #1
 80056d0:	480b      	ldr	r0, [pc, #44]	; (8005700 <BSP_QSPI_Init+0xf4>)
 80056d2:	f000 fb15 	bl	8005d00 <QSPI_HighPerfMode>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e00b      	b.n	80056f8 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <BSP_QSPI_Init+0xf4>)
 80056e2:	2202      	movs	r2, #2
 80056e4:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80056e6:	4806      	ldr	r0, [pc, #24]	; (8005700 <BSP_QSPI_Init+0xf4>)
 80056e8:	f003 f9a6 	bl	8008a38 <HAL_OSPI_Init>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	200016ec 	.word	0x200016ec
 8005704:	a0001000 	.word	0xa0001000

08005708 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b098      	sub	sp, #96	; 0x60
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 800571c:	23eb      	movs	r3, #235	; 0xeb
 800571e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8005720:	2301      	movs	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8005724:	2300      	movs	r3, #0
 8005726:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005728:	2300      	movs	r3, #0
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8005730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005734:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8005736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800573a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800573c:	2300      	movs	r3, #0
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8005740:	23aa      	movs	r3, #170	; 0xaa
 8005742:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8005744:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800574a:	2300      	movs	r3, #0
 800574c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800574e:	2300      	movs	r3, #0
 8005750:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8005752:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005756:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 800575c:	2300      	movs	r3, #0
 800575e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8005760:	2304      	movs	r3, #4
 8005762:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8005764:	2300      	movs	r3, #0
 8005766:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005768:	2300      	movs	r3, #0
 800576a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800576c:	f107 0310 	add.w	r3, r7, #16
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4619      	mov	r1, r3
 8005776:	480c      	ldr	r0, [pc, #48]	; (80057a8 <BSP_QSPI_Read+0xa0>)
 8005778:	f003 fa2b 	bl	8008bd2 <HAL_OSPI_Command>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e00b      	b.n	800579e <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005786:	f241 3288 	movw	r2, #5000	; 0x1388
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	4806      	ldr	r0, [pc, #24]	; (80057a8 <BSP_QSPI_Read+0xa0>)
 800578e:	f003 fb14 	bl	8008dba <HAL_OSPI_Receive>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3760      	adds	r7, #96	; 0x60
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	200016ec 	.word	0x200016ec

080057ac <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b09c      	sub	sp, #112	; 0x70
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80057c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80057c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d901      	bls.n	80057ce <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 80057e2:	2338      	movs	r3, #56	; 0x38
 80057e4:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80057f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057f6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80057f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80057fe:	2300      	movs	r3, #0
 8005800:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005802:	2300      	movs	r3, #0
 8005804:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8005806:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800580a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800580c:	2300      	movs	r3, #0
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005814:	2300      	movs	r3, #0
 8005816:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005818:	2300      	movs	r3, #0
 800581a:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800581c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8005820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005822:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8005824:	4823      	ldr	r0, [pc, #140]	; (80058b4 <BSP_QSPI_Write+0x108>)
 8005826:	f000 f918 	bl	8005a5a <QSPI_WriteEnable>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e03b      	b.n	80058ac <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005834:	f107 0314 	add.w	r3, r7, #20
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	4619      	mov	r1, r3
 800583e:	481d      	ldr	r0, [pc, #116]	; (80058b4 <BSP_QSPI_Write+0x108>)
 8005840:	f003 f9c7 	bl	8008bd2 <HAL_OSPI_Command>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e02e      	b.n	80058ac <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	4817      	ldr	r0, [pc, #92]	; (80058b4 <BSP_QSPI_Write+0x108>)
 8005856:	f003 fa3d 	bl	8008cd4 <HAL_OSPI_Transmit>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e023      	b.n	80058ac <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005864:	f241 3188 	movw	r1, #5000	; 0x1388
 8005868:	4812      	ldr	r0, [pc, #72]	; (80058b4 <BSP_QSPI_Write+0x108>)
 800586a:	f000 f952 	bl	8005b12 <QSPI_AutoPollingMemReady>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e019      	b.n	80058ac <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8005878:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800587a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587c:	4413      	add	r3, r2
 800587e:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005884:	4413      	add	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8005888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800588a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800588e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005890:	429a      	cmp	r2, r3
 8005892:	d203      	bcs.n	800589c <BSP_QSPI_Write+0xf0>
 8005894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	e001      	b.n	80058a0 <BSP_QSPI_Write+0xf4>
 800589c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 80058a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d3b8      	bcc.n	800581c <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3770      	adds	r7, #112	; 0x70
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200016ec 	.word	0x200016ec

080058b8 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b096      	sub	sp, #88	; 0x58
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 80058c8:	23d8      	movs	r3, #216	; 0xd8
 80058ca:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80058dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80058e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80058fc:	2300      	movs	r3, #0
 80058fe:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8005900:	4811      	ldr	r0, [pc, #68]	; (8005948 <BSP_QSPI_Erase_Block+0x90>)
 8005902:	f000 f8aa 	bl	8005a5a <QSPI_WriteEnable>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e017      	b.n	8005940 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005910:	f107 0308 	add.w	r3, r7, #8
 8005914:	f241 3288 	movw	r2, #5000	; 0x1388
 8005918:	4619      	mov	r1, r3
 800591a:	480b      	ldr	r0, [pc, #44]	; (8005948 <BSP_QSPI_Erase_Block+0x90>)
 800591c:	f003 f959 	bl	8008bd2 <HAL_OSPI_Command>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e00a      	b.n	8005940 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800592a:	f640 51ac 	movw	r1, #3500	; 0xdac
 800592e:	4806      	ldr	r0, [pc, #24]	; (8005948 <BSP_QSPI_Erase_Block+0x90>)
 8005930:	f000 f8ef 	bl	8005b12 <QSPI_AutoPollingMemReady>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3758      	adds	r7, #88	; 0x58
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	200016ec 	.word	0x200016ec

0800594c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8005952:	4b1c      	ldr	r3, [pc, #112]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 8005958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595c:	6513      	str	r3, [r2, #80]	; 0x50
 800595e:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 8005960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 800596a:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 8005970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005974:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8005976:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	4a12      	ldr	r2, [pc, #72]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 800597c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005980:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005982:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 8005984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005986:	4a0f      	ldr	r2, [pc, #60]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 8005988:	f043 0310 	orr.w	r3, r3, #16
 800598c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <BSP_QSPI_MspInit+0x78>)
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 800599a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800599e:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80059a0:	2302      	movs	r3, #2
 80059a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80059a8:	2303      	movs	r3, #3
 80059aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80059ac:	230a      	movs	r3, #10
 80059ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059b0:	f107 030c 	add.w	r3, r7, #12
 80059b4:	4619      	mov	r1, r3
 80059b6:	4804      	ldr	r0, [pc, #16]	; (80059c8 <BSP_QSPI_MspInit+0x7c>)
 80059b8:	f001 ff46 	bl	8007848 <HAL_GPIO_Init>
}
 80059bc:	bf00      	nop
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021000 	.word	0x40021000
 80059c8:	48001000 	.word	0x48001000

080059cc <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b096      	sub	sp, #88	; 0x58
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 80059dc:	2366      	movs	r3, #102	; 0x66
 80059de:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80059e0:	2301      	movs	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005a00:	2300      	movs	r3, #0
 8005a02:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a04:	f107 0308 	add.w	r3, r7, #8
 8005a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f003 f8df 	bl	8008bd2 <HAL_OSPI_Command>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e019      	b.n	8005a52 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8005a1e:	2399      	movs	r3, #153	; 0x99
 8005a20:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a22:	f107 0308 	add.w	r3, r7, #8
 8005a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f003 f8d0 	bl	8008bd2 <HAL_OSPI_Command>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e00a      	b.n	8005a52 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005a3c:	f241 3188 	movw	r1, #5000	; 0x1388
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f866 	bl	8005b12 <QSPI_AutoPollingMemReady>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3758      	adds	r7, #88	; 0x58
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b09c      	sub	sp, #112	; 0x70
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005a62:	2300      	movs	r3, #0
 8005a64:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8005a6a:	2306      	movs	r3, #6
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005a72:	2300      	movs	r3, #0
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a92:	f107 0320 	add.w	r3, r7, #32
 8005a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f003 f898 	bl	8008bd2 <HAL_OSPI_Command>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e02e      	b.n	8005b0a <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8005aac:	2302      	movs	r3, #2
 8005aae:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8005ab8:	2310      	movs	r3, #16
 8005aba:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005abc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ac0:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8005ac2:	2305      	movs	r3, #5
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8005ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aca:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8005acc:	2301      	movs	r3, #1
 8005ace:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ad4:	f107 0320 	add.w	r3, r7, #32
 8005ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f003 f877 	bl	8008bd2 <HAL_OSPI_Command>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e00d      	b.n	8005b0a <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aee:	f107 030c 	add.w	r3, r7, #12
 8005af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f003 fa01 	bl	8008f00 <HAL_OSPI_AutoPolling>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3770      	adds	r7, #112	; 0x70
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b09c      	sub	sp, #112	; 0x70
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005b20:	2300      	movs	r3, #0
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8005b24:	2305      	movs	r3, #5
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8005b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b40:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8005b42:	2301      	movs	r3, #1
 8005b44:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005b52:	2300      	movs	r3, #0
 8005b54:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8005b62:	2310      	movs	r3, #16
 8005b64:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b6a:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b6c:	f107 0320 	add.w	r3, r7, #32
 8005b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f003 f82b 	bl	8008bd2 <HAL_OSPI_Command>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e00c      	b.n	8005ba0 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f003 f9b6 	bl	8008f00 <HAL_OSPI_AutoPolling>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3770      	adds	r7, #112	; 0x70
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b098      	sub	sp, #96	; 0x60
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8005bbc:	2305      	movs	r3, #5
 8005bbe:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8005bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8005be2:	2301      	movs	r3, #1
 8005be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005bea:	2300      	movs	r3, #0
 8005bec:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bee:	f107 0310 	add.w	r3, r7, #16
 8005bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f002 ffea 	bl	8008bd2 <HAL_OSPI_Command>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e077      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c08:	f107 030f 	add.w	r3, r7, #15
 8005c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f003 f8d1 	bl	8008dba <HAL_OSPI_Receive>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e06a      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff ff19 	bl	8005a5a <QSPI_WriteEnable>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e062      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d105      	bne.n	8005c44 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	73fb      	strb	r3, [r7, #15]
 8005c42:	e004      	b.n	8005c4e <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f002 ffb8 	bl	8008bd2 <HAL_OSPI_Command>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e045      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c6c:	f107 030f 	add.w	r3, r7, #15
 8005c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f003 f82c 	bl	8008cd4 <HAL_OSPI_Transmit>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e038      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005c86:	f241 3188 	movw	r1, #5000	; 0x1388
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff ff41 	bl	8005b12 <QSPI_AutoPollingMemReady>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e02e      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8005c9a:	2305      	movs	r3, #5
 8005c9c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c9e:	f107 0310 	add.w	r3, r7, #16
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f002 ff92 	bl	8008bd2 <HAL_OSPI_Command>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e01f      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cb8:	f107 030f 	add.w	r3, r7, #15
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f003 f879 	bl	8008dba <HAL_OSPI_Receive>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e012      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <QSPI_QuadMode+0x13a>
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d007      	beq.n	8005cf2 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3760      	adds	r7, #96	; 0x60
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b098      	sub	sp, #96	; 0x60
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8005d14:	2305      	movs	r3, #5
 8005d16:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8005d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005d42:	2300      	movs	r3, #0
 8005d44:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d46:	f107 0310 	add.w	r3, r7, #16
 8005d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f002 ff3e 	bl	8008bd2 <HAL_OSPI_Command>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e09a      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d60:	f107 030c 	add.w	r3, r7, #12
 8005d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f003 f825 	bl	8008dba <HAL_OSPI_Receive>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e08d      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8005d7a:	2315      	movs	r3, #21
 8005d7c:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8005d7e:	2302      	movs	r3, #2
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d82:	f107 0310 	add.w	r3, r7, #16
 8005d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f002 ff20 	bl	8008bd2 <HAL_OSPI_Command>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e07c      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	3301      	adds	r3, #1
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f003 f806 	bl	8008dba <HAL_OSPI_Receive>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e06e      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fe4e 	bl	8005a5a <QSPI_WriteEnable>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e066      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d105      	bne.n	8005dda <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	73bb      	strb	r3, [r7, #14]
 8005dd8:	e004      	b.n	8005de4 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	f023 0302 	bic.w	r3, r3, #2
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8005de4:	2301      	movs	r3, #1
 8005de6:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8005de8:	2303      	movs	r3, #3
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005dec:	f107 0310 	add.w	r3, r7, #16
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f002 feeb 	bl	8008bd2 <HAL_OSPI_Command>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e047      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f002 ff5f 	bl	8008cd4 <HAL_OSPI_Transmit>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e03a      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005e20:	f241 3188 	movw	r1, #5000	; 0x1388
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff fe74 	bl	8005b12 <QSPI_AutoPollingMemReady>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e030      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8005e34:	2315      	movs	r3, #21
 8005e36:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e3c:	f107 0310 	add.w	r3, r7, #16
 8005e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f002 fec3 	bl	8008bd2 <HAL_OSPI_Command>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e01f      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e56:	f107 030c 	add.w	r3, r7, #12
 8005e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f002 ffaa 	bl	8008dba <HAL_OSPI_Receive>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e012      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8005e70:	7b7b      	ldrb	r3, [r7, #13]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <QSPI_HighPerfMode+0x180>
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d007      	beq.n	8005e90 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8005e80:	7b7b      	ldrb	r3, [r7, #13]
 8005e82:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3760      	adds	r7, #96	; 0x60
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <HAL_MspInit+0x44>)
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <HAL_MspInit+0x44>)
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <HAL_MspInit+0x44>)
 8005eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	607b      	str	r3, [r7, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_MspInit+0x44>)
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec2:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <HAL_MspInit+0x44>)
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_MspInit+0x44>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000

08005ee8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef0:	f107 0314 	add.w	r3, r7, #20
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2e      	ldr	r2, [pc, #184]	; (8005fc0 <HAL_DAC_MspInit+0xd8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d155      	bne.n	8005fb6 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005f0a:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <HAL_DAC_MspInit+0xdc>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	4a2d      	ldr	r2, [pc, #180]	; (8005fc4 <HAL_DAC_MspInit+0xdc>)
 8005f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f14:	6593      	str	r3, [r2, #88]	; 0x58
 8005f16:	4b2b      	ldr	r3, [pc, #172]	; (8005fc4 <HAL_DAC_MspInit+0xdc>)
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f22:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <HAL_DAC_MspInit+0xdc>)
 8005f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f26:	4a27      	ldr	r2, [pc, #156]	; (8005fc4 <HAL_DAC_MspInit+0xdc>)
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f2e:	4b25      	ldr	r3, [pc, #148]	; (8005fc4 <HAL_DAC_MspInit+0xdc>)
 8005f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f46:	f107 0314 	add.w	r3, r7, #20
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f50:	f001 fc7a 	bl	8007848 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8005f54:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f56:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <HAL_DAC_MspInit+0xe4>)
 8005f58:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f5c:	2206      	movs	r2, #6
 8005f5e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f60:	4b19      	ldr	r3, [pc, #100]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f62:	2210      	movs	r2, #16
 8005f64:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f66:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005f6c:	4b16      	ldr	r3, [pc, #88]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f6e:	2280      	movs	r2, #128	; 0x80
 8005f70:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f78:	4b13      	ldr	r3, [pc, #76]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005f7e:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f80:	2220      	movs	r2, #32
 8005f82:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005f84:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005f8a:	480f      	ldr	r0, [pc, #60]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f8c:	f001 f98e 	bl	80072ac <HAL_DMA_Init>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8005f96:	f7ff f989 	bl	80052ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005f9e:	609a      	str	r2, [r3, #8]
 8005fa0:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <HAL_DAC_MspInit+0xe0>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	210f      	movs	r1, #15
 8005faa:	2036      	movs	r0, #54	; 0x36
 8005fac:	f000 fd78 	bl	8006aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005fb0:	2036      	movs	r0, #54	; 0x36
 8005fb2:	f000 fd91 	bl	8006ad8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005fb6:	bf00      	nop
 8005fb8:	3728      	adds	r7, #40	; 0x28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40007400 	.word	0x40007400
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	2000028c 	.word	0x2000028c
 8005fcc:	40020008 	.word	0x40020008

08005fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0ae      	sub	sp, #184	; 0xb8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	609a      	str	r2, [r3, #8]
 8005fe4:	60da      	str	r2, [r3, #12]
 8005fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	2294      	movs	r2, #148	; 0x94
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f006 fe4b 	bl	800cc8c <memset>
  if(hi2c->Instance==I2C2)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a21      	ldr	r2, [pc, #132]	; (8006080 <HAL_I2C_MspInit+0xb0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d13b      	bne.n	8006078 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006000:	2380      	movs	r3, #128	; 0x80
 8006002:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006004:	2300      	movs	r3, #0
 8006006:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006008:	f107 0310 	add.w	r3, r7, #16
 800600c:	4618      	mov	r0, r3
 800600e:	f004 fd59 	bl	800aac4 <HAL_RCCEx_PeriphCLKConfig>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006018:	f7ff f948 	bl	80052ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800601c:	4b19      	ldr	r3, [pc, #100]	; (8006084 <HAL_I2C_MspInit+0xb4>)
 800601e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006020:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_I2C_MspInit+0xb4>)
 8006022:	f043 0302 	orr.w	r3, r3, #2
 8006026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006028:	4b16      	ldr	r3, [pc, #88]	; (8006084 <HAL_I2C_MspInit+0xb4>)
 800602a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006034:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800603c:	2312      	movs	r3, #18
 800603e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006042:	2300      	movs	r3, #0
 8006044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006048:	2303      	movs	r3, #3
 800604a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800604e:	2304      	movs	r3, #4
 8006050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006054:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006058:	4619      	mov	r1, r3
 800605a:	480b      	ldr	r0, [pc, #44]	; (8006088 <HAL_I2C_MspInit+0xb8>)
 800605c:	f001 fbf4 	bl	8007848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <HAL_I2C_MspInit+0xb4>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	4a07      	ldr	r2, [pc, #28]	; (8006084 <HAL_I2C_MspInit+0xb4>)
 8006066:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800606a:	6593      	str	r3, [r2, #88]	; 0x58
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <HAL_I2C_MspInit+0xb4>)
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006078:	bf00      	nop
 800607a:	37b8      	adds	r7, #184	; 0xb8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40005800 	.word	0x40005800
 8006084:	40021000 	.word	0x40021000
 8006088:	48000400 	.word	0x48000400

0800608c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a0b      	ldr	r2, [pc, #44]	; (80060c8 <HAL_I2C_MspDeInit+0x3c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10f      	bne.n	80060be <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_I2C_MspDeInit+0x40>)
 80060a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <HAL_I2C_MspDeInit+0x40>)
 80060a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80060a8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80060aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80060ae:	4808      	ldr	r0, [pc, #32]	; (80060d0 <HAL_I2C_MspDeInit+0x44>)
 80060b0:	f001 fd5c 	bl	8007b6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80060b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060b8:	4805      	ldr	r0, [pc, #20]	; (80060d0 <HAL_I2C_MspDeInit+0x44>)
 80060ba:	f001 fd57 	bl	8007b6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40005800 	.word	0x40005800
 80060cc:	40021000 	.word	0x40021000
 80060d0:	48000400 	.word	0x48000400

080060d4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b0b0      	sub	sp, #192	; 0xc0
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060ec:	f107 0318 	add.w	r3, r7, #24
 80060f0:	2294      	movs	r2, #148	; 0x94
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f006 fdc9 	bl	800cc8c <memset>
  if(hospi->Instance==OCTOSPI1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <HAL_OSPI_MspInit+0xcc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d149      	bne.n	8006198 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8006104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006108:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006110:	f107 0318 	add.w	r3, r7, #24
 8006114:	4618      	mov	r0, r3
 8006116:	f004 fcd5 	bl	800aac4 <HAL_RCCEx_PeriphCLKConfig>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8006120:	f7ff f8c4 	bl	80052ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8006124:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 8006126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006128:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 800612a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006130:	4b1c      	ldr	r3, [pc, #112]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 8006132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800613c:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 800613e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006140:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 8006142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006146:	6513      	str	r3, [r2, #80]	; 0x50
 8006148:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 800614a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006154:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 8006156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006158:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 800615a:	f043 0310 	orr.w	r3, r3, #16
 800615e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006160:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <HAL_OSPI_MspInit+0xd0>)
 8006162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800616c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8006170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006174:	2302      	movs	r3, #2
 8006176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617a:	2300      	movs	r3, #0
 800617c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006180:	2303      	movs	r3, #3
 8006182:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8006186:	230a      	movs	r3, #10
 8006188:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800618c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006190:	4619      	mov	r1, r3
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <HAL_OSPI_MspInit+0xd4>)
 8006194:	f001 fb58 	bl	8007848 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8006198:	bf00      	nop
 800619a:	37c0      	adds	r7, #192	; 0xc0
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	a0001000 	.word	0xa0001000
 80061a4:	40021000 	.word	0x40021000
 80061a8:	48001000 	.word	0x48001000

080061ac <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <HAL_OSPI_MspDeInit+0x3c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d110      	bne.n	80061e0 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 80061be:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <HAL_OSPI_MspDeInit+0x40>)
 80061c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c2:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <HAL_OSPI_MspDeInit+0x40>)
 80061c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80061c8:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80061ca:	4b08      	ldr	r3, [pc, #32]	; (80061ec <HAL_OSPI_MspDeInit+0x40>)
 80061cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ce:	4a07      	ldr	r2, [pc, #28]	; (80061ec <HAL_OSPI_MspDeInit+0x40>)
 80061d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80061d6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80061da:	4805      	ldr	r0, [pc, #20]	; (80061f0 <HAL_OSPI_MspDeInit+0x44>)
 80061dc:	f001 fcc6 	bl	8007b6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	a0001000 	.word	0xa0001000
 80061ec:	40021000 	.word	0x40021000
 80061f0:	48001000 	.word	0x48001000

080061f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006204:	d113      	bne.n	800622e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006206:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <HAL_TIM_Base_MspInit+0x44>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	4a0b      	ldr	r2, [pc, #44]	; (8006238 <HAL_TIM_Base_MspInit+0x44>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	6593      	str	r3, [r2, #88]	; 0x58
 8006212:	4b09      	ldr	r3, [pc, #36]	; (8006238 <HAL_TIM_Base_MspInit+0x44>)
 8006214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800621e:	2200      	movs	r2, #0
 8006220:	2100      	movs	r1, #0
 8006222:	201c      	movs	r0, #28
 8006224:	f000 fc3c 	bl	8006aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006228:	201c      	movs	r0, #28
 800622a:	f000 fc55 	bl	8006ad8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000

0800623c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b0ae      	sub	sp, #184	; 0xb8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006244:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	609a      	str	r2, [r3, #8]
 8006250:	60da      	str	r2, [r3, #12]
 8006252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006254:	f107 0310 	add.w	r3, r7, #16
 8006258:	2294      	movs	r2, #148	; 0x94
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f006 fd15 	bl	800cc8c <memset>
  if(huart->Instance==USART1)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a21      	ldr	r2, [pc, #132]	; (80062ec <HAL_UART_MspInit+0xb0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d13a      	bne.n	80062e2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800626c:	2301      	movs	r3, #1
 800626e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006270:	2300      	movs	r3, #0
 8006272:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006274:	f107 0310 	add.w	r3, r7, #16
 8006278:	4618      	mov	r0, r3
 800627a:	f004 fc23 	bl	800aac4 <HAL_RCCEx_PeriphCLKConfig>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006284:	f7ff f812 	bl	80052ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006288:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <HAL_UART_MspInit+0xb4>)
 800628a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628c:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <HAL_UART_MspInit+0xb4>)
 800628e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006292:	6613      	str	r3, [r2, #96]	; 0x60
 8006294:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <HAL_UART_MspInit+0xb4>)
 8006296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062a0:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <HAL_UART_MspInit+0xb4>)
 80062a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a4:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <HAL_UART_MspInit+0xb4>)
 80062a6:	f043 0302 	orr.w	r3, r3, #2
 80062aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062ac:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <HAL_UART_MspInit+0xb4>)
 80062ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062b8:	23c0      	movs	r3, #192	; 0xc0
 80062ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062be:	2302      	movs	r3, #2
 80062c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ca:	2303      	movs	r3, #3
 80062cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80062d0:	2307      	movs	r3, #7
 80062d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80062da:	4619      	mov	r1, r3
 80062dc:	4805      	ldr	r0, [pc, #20]	; (80062f4 <HAL_UART_MspInit+0xb8>)
 80062de:	f001 fab3 	bl	8007848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80062e2:	bf00      	nop
 80062e4:	37b8      	adds	r7, #184	; 0xb8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40013800 	.word	0x40013800
 80062f0:	40021000 	.word	0x40021000
 80062f4:	48000400 	.word	0x48000400

080062f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	; 0x30
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006308:	2200      	movs	r2, #0
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	2036      	movs	r0, #54	; 0x36
 800630e:	f000 fbc7 	bl	8006aa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006312:	2036      	movs	r0, #54	; 0x36
 8006314:	f000 fbe0 	bl	8006ad8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006318:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <HAL_InitTick+0x9c>)
 800631a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631c:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <HAL_InitTick+0x9c>)
 800631e:	f043 0310 	orr.w	r3, r3, #16
 8006322:	6593      	str	r3, [r2, #88]	; 0x58
 8006324:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <HAL_InitTick+0x9c>)
 8006326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006330:	f107 0210 	add.w	r2, r7, #16
 8006334:	f107 0314 	add.w	r3, r7, #20
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f004 face 	bl	800a8dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006340:	f004 faa0 	bl	800a884 <HAL_RCC_GetPCLK1Freq>
 8006344:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	4a13      	ldr	r2, [pc, #76]	; (8006398 <HAL_InitTick+0xa0>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0c9b      	lsrs	r3, r3, #18
 8006350:	3b01      	subs	r3, #1
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006354:	4b11      	ldr	r3, [pc, #68]	; (800639c <HAL_InitTick+0xa4>)
 8006356:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <HAL_InitTick+0xa8>)
 8006358:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800635a:	4b10      	ldr	r3, [pc, #64]	; (800639c <HAL_InitTick+0xa4>)
 800635c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006360:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006362:	4a0e      	ldr	r2, [pc, #56]	; (800639c <HAL_InitTick+0xa4>)
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <HAL_InitTick+0xa4>)
 800636a:	2200      	movs	r2, #0
 800636c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800636e:	4b0b      	ldr	r3, [pc, #44]	; (800639c <HAL_InitTick+0xa4>)
 8006370:	2200      	movs	r2, #0
 8006372:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006374:	4809      	ldr	r0, [pc, #36]	; (800639c <HAL_InitTick+0xa4>)
 8006376:	f005 f8bd 	bl	800b4f4 <HAL_TIM_Base_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006380:	4806      	ldr	r0, [pc, #24]	; (800639c <HAL_InitTick+0xa4>)
 8006382:	f005 f90f 	bl	800b5a4 <HAL_TIM_Base_Start_IT>
 8006386:	4603      	mov	r3, r0
 8006388:	e000      	b.n	800638c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
}
 800638c:	4618      	mov	r0, r3
 800638e:	3730      	adds	r7, #48	; 0x30
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40021000 	.word	0x40021000
 8006398:	431bde83 	.word	0x431bde83
 800639c:	2000173c 	.word	0x2000173c
 80063a0:	40001000 	.word	0x40001000

080063a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063a8:	e7fe      	b.n	80063a8 <NMI_Handler+0x4>

080063aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063ae:	e7fe      	b.n	80063ae <HardFault_Handler+0x4>

080063b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063b4:	e7fe      	b.n	80063b4 <MemManage_Handler+0x4>

080063b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063b6:	b480      	push	{r7}
 80063b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063ba:	e7fe      	b.n	80063ba <BusFault_Handler+0x4>

080063bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063c0:	e7fe      	b.n	80063c0 <UsageFault_Handler+0x4>

080063c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063c2:	b480      	push	{r7}
 80063c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063c6:	bf00      	nop
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063de:	b480      	push	{r7}
 80063e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063f0:	bf00      	nop
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8006400:	4802      	ldr	r0, [pc, #8]	; (800640c <DMA1_Channel1_IRQHandler+0x10>)
 8006402:	f001 f8d2 	bl	80075aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006406:	bf00      	nop
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	2000028c 	.word	0x2000028c

08006410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006414:	4802      	ldr	r0, [pc, #8]	; (8006420 <TIM2_IRQHandler+0x10>)
 8006416:	f005 f935 	bl	800b684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800641a:	bf00      	nop
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000388 	.word	0x20000388

08006424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(My_Button_Pin);
 8006428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800642c:	f001 fcc2 	bl	8007db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006430:	bf00      	nop
 8006432:	bd80      	pop	{r7, pc}

08006434 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006438:	4803      	ldr	r0, [pc, #12]	; (8006448 <TIM6_DAC_IRQHandler+0x14>)
 800643a:	f005 f923 	bl	800b684 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800643e:	4803      	ldr	r0, [pc, #12]	; (800644c <TIM6_DAC_IRQHandler+0x18>)
 8006440:	f000 fcdd 	bl	8006dfe <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006444:	bf00      	nop
 8006446:	bd80      	pop	{r7, pc}
 8006448:	2000173c 	.word	0x2000173c
 800644c:	20000278 	.word	0x20000278

08006450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
	return 1;
 8006454:	2301      	movs	r3, #1
}
 8006456:	4618      	mov	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <_kill>:

int _kill(int pid, int sig)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800646a:	f006 fbd7 	bl	800cc1c <__errno>
 800646e:	4603      	mov	r3, r0
 8006470:	2216      	movs	r2, #22
 8006472:	601a      	str	r2, [r3, #0]
	return -1;
 8006474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <_exit>:

void _exit (int status)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006488:	f04f 31ff 	mov.w	r1, #4294967295
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ffe7 	bl	8006460 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006492:	e7fe      	b.n	8006492 <_exit+0x12>

08006494 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	e00a      	b.n	80064bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80064a6:	f3af 8000 	nop.w
 80064aa:	4601      	mov	r1, r0
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	60ba      	str	r2, [r7, #8]
 80064b2:	b2ca      	uxtb	r2, r1
 80064b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	3301      	adds	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	dbf0      	blt.n	80064a6 <_read+0x12>
	}

return len;
 80064c4:	687b      	ldr	r3, [r7, #4]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b086      	sub	sp, #24
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e009      	b.n	80064f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	60ba      	str	r2, [r7, #8]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	3301      	adds	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	dbf1      	blt.n	80064e0 <_write+0x12>
	}
	return len;
 80064fc:	687b      	ldr	r3, [r7, #4]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <_close>:

int _close(int file)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
	return -1;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800652e:	605a      	str	r2, [r3, #4]
	return 0;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <_isatty>:

int _isatty(int file)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
	return 1;
 8006546:	2301      	movs	r3, #1
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
	return 0;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006578:	4a14      	ldr	r2, [pc, #80]	; (80065cc <_sbrk+0x5c>)
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <_sbrk+0x60>)
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006584:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <_sbrk+0x64>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800658c:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <_sbrk+0x64>)
 800658e:	4a12      	ldr	r2, [pc, #72]	; (80065d8 <_sbrk+0x68>)
 8006590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006592:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <_sbrk+0x64>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	429a      	cmp	r2, r3
 800659e:	d207      	bcs.n	80065b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065a0:	f006 fb3c 	bl	800cc1c <__errno>
 80065a4:	4603      	mov	r3, r0
 80065a6:	220c      	movs	r2, #12
 80065a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065aa:	f04f 33ff 	mov.w	r3, #4294967295
 80065ae:	e009      	b.n	80065c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065b0:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <_sbrk+0x64>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <_sbrk+0x64>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	4a05      	ldr	r2, [pc, #20]	; (80065d4 <_sbrk+0x64>)
 80065c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065c2:	68fb      	ldr	r3, [r7, #12]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	200a0000 	.word	0x200a0000
 80065d0:	00000400 	.word	0x00000400
 80065d4:	20001788 	.word	0x20001788
 80065d8:	200017a0 	.word	0x200017a0

080065dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <SystemInit+0x20>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e6:	4a05      	ldr	r2, [pc, #20]	; (80065fc <SystemInit+0x20>)
 80065e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80065f0:	bf00      	nop
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	e000ed00 	.word	0xe000ed00

08006600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006638 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006604:	f7ff ffea 	bl	80065dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006608:	480c      	ldr	r0, [pc, #48]	; (800663c <LoopForever+0x6>)
  ldr r1, =_edata
 800660a:	490d      	ldr	r1, [pc, #52]	; (8006640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800660c:	4a0d      	ldr	r2, [pc, #52]	; (8006644 <LoopForever+0xe>)
  movs r3, #0
 800660e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006610:	e002      	b.n	8006618 <LoopCopyDataInit>

08006612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006616:	3304      	adds	r3, #4

08006618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800661a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800661c:	d3f9      	bcc.n	8006612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800661e:	4a0a      	ldr	r2, [pc, #40]	; (8006648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006620:	4c0a      	ldr	r4, [pc, #40]	; (800664c <LoopForever+0x16>)
  movs r3, #0
 8006622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006624:	e001      	b.n	800662a <LoopFillZerobss>

08006626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006628:	3204      	adds	r2, #4

0800662a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800662a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800662c:	d3fb      	bcc.n	8006626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800662e:	f006 fafb 	bl	800cc28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006632:	f7fe f973 	bl	800491c <main>

08006636 <LoopForever>:

LoopForever:
    b LoopForever
 8006636:	e7fe      	b.n	8006636 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006638:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800663c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006640:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8006644:	0800ed40 	.word	0x0800ed40
  ldr r2, =_sbss
 8006648:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 800664c:	200017a0 	.word	0x200017a0

08006650 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006650:	e7fe      	b.n	8006650 <ADC1_IRQHandler>

08006652 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	4603      	mov	r3, r0
 800665a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8006660:	2111      	movs	r1, #17
 8006662:	20d4      	movs	r0, #212	; 0xd4
 8006664:	f7fe ff3c 	bl	80054e0 <SENSOR_IO_Read>
 8006668:	4603      	mov	r3, r0
 800666a:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8006678:	7bba      	ldrb	r2, [r7, #14]
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	4313      	orrs	r3, r2
 800667e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	461a      	mov	r2, r3
 8006684:	2111      	movs	r1, #17
 8006686:	20d4      	movs	r0, #212	; 0xd4
 8006688:	f7fe ff10 	bl	80054ac <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800668c:	2112      	movs	r1, #18
 800668e:	20d4      	movs	r0, #212	; 0xd4
 8006690:	f7fe ff26 	bl	80054e0 <SENSOR_IO_Read>
 8006694:	4603      	mov	r3, r0
 8006696:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	b29b      	uxth	r3, r3
 800669e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80066a6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80066a8:	7bba      	ldrb	r2, [r7, #14]
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	461a      	mov	r2, r3
 80066b4:	2112      	movs	r1, #18
 80066b6:	20d4      	movs	r0, #212	; 0xd4
 80066b8:	f7fe fef8 	bl	80054ac <SENSOR_IO_Write>
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80066ca:	2300      	movs	r3, #0
 80066cc:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80066ce:	2111      	movs	r1, #17
 80066d0:	20d4      	movs	r0, #212	; 0xd4
 80066d2:	f7fe ff05 	bl	80054e0 <SENSOR_IO_Read>
 80066d6:	4603      	mov	r3, r0
 80066d8:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	461a      	mov	r2, r3
 80066e6:	2111      	movs	r1, #17
 80066e8:	20d4      	movs	r0, #212	; 0xd4
 80066ea:	f7fe fedf 	bl	80054ac <SENSOR_IO_Write>
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80066fa:	f7fe fecd 	bl	8005498 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80066fe:	210f      	movs	r1, #15
 8006700:	20d4      	movs	r0, #212	; 0xd4
 8006702:	f7fe feed 	bl	80054e0 <SENSOR_IO_Read>
 8006706:	4603      	mov	r3, r0
}
 8006708:	4618      	mov	r0, r3
 800670a:	bd80      	pop	{r7, pc}

0800670c <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800671a:	2116      	movs	r1, #22
 800671c:	20d4      	movs	r0, #212	; 0xd4
 800671e:	f7fe fedf 	bl	80054e0 <SENSOR_IO_Read>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800672c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800673a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	461a      	mov	r2, r3
 8006740:	2116      	movs	r1, #22
 8006742:	20d4      	movs	r0, #212	; 0xd4
 8006744:	f7fe feb2 	bl	80054ac <SENSOR_IO_Write>
}
 8006748:	bf00      	nop
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8006758:	2300      	movs	r3, #0
 800675a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8006766:	2111      	movs	r1, #17
 8006768:	20d4      	movs	r0, #212	; 0xd4
 800676a:	f7fe feb9 	bl	80054e0 <SENSOR_IO_Read>
 800676e:	4603      	mov	r3, r0
 8006770:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8006772:	f107 0208 	add.w	r2, r7, #8
 8006776:	2306      	movs	r3, #6
 8006778:	2122      	movs	r1, #34	; 0x22
 800677a:	20d4      	movs	r0, #212	; 0xd4
 800677c:	f7fe fece 	bl	800551c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8006780:	2300      	movs	r3, #0
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e01c      	b.n	80067c0 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8006786:	7ffb      	ldrb	r3, [r7, #31]
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	3301      	adds	r3, #1
 800678c:	3320      	adds	r3, #32
 800678e:	443b      	add	r3, r7
 8006790:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006794:	b29b      	uxth	r3, r3
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	b29a      	uxth	r2, r3
 800679a:	7ffb      	ldrb	r3, [r7, #31]
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	3320      	adds	r3, #32
 80067a0:	443b      	add	r3, r7
 80067a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	4413      	add	r3, r2
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	7ffb      	ldrb	r3, [r7, #31]
 80067ae:	b212      	sxth	r2, r2
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	3320      	adds	r3, #32
 80067b4:	443b      	add	r3, r7
 80067b6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80067ba:	7ffb      	ldrb	r3, [r7, #31]
 80067bc:	3301      	adds	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	7ffb      	ldrb	r3, [r7, #31]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d9df      	bls.n	8006786 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	f003 030c 	and.w	r3, r3, #12
 80067cc:	2b0c      	cmp	r3, #12
 80067ce:	d829      	bhi.n	8006824 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	0800680d 	.word	0x0800680d
 80067dc:	08006825 	.word	0x08006825
 80067e0:	08006825 	.word	0x08006825
 80067e4:	08006825 	.word	0x08006825
 80067e8:	08006813 	.word	0x08006813
 80067ec:	08006825 	.word	0x08006825
 80067f0:	08006825 	.word	0x08006825
 80067f4:	08006825 	.word	0x08006825
 80067f8:	08006819 	.word	0x08006819
 80067fc:	08006825 	.word	0x08006825
 8006800:	08006825 	.word	0x08006825
 8006804:	08006825 	.word	0x08006825
 8006808:	0800681f 	.word	0x0800681f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800680c:	4b16      	ldr	r3, [pc, #88]	; (8006868 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800680e:	61bb      	str	r3, [r7, #24]
    break;
 8006810:	e008      	b.n	8006824 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8006812:	4b16      	ldr	r3, [pc, #88]	; (800686c <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8006814:	61bb      	str	r3, [r7, #24]
    break;
 8006816:	e005      	b.n	8006824 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8006818:	4b15      	ldr	r3, [pc, #84]	; (8006870 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800681a:	61bb      	str	r3, [r7, #24]
    break;
 800681c:	e002      	b.n	8006824 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800681e:	4b15      	ldr	r3, [pc, #84]	; (8006874 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8006820:	61bb      	str	r3, [r7, #24]
    break;    
 8006822:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8006824:	2300      	movs	r3, #0
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e016      	b.n	8006858 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	3320      	adds	r3, #32
 8006830:	443b      	add	r3, r7
 8006832:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800683e:	7ffb      	ldrb	r3, [r7, #31]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	edd7 7a06 	vldr	s15, [r7, #24]
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8006852:	7ffb      	ldrb	r3, [r7, #31]
 8006854:	3301      	adds	r3, #1
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	7ffb      	ldrb	r3, [r7, #31]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d9e5      	bls.n	800682a <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	410c0000 	.word	0x410c0000
 800686c:	418c0000 	.word	0x418c0000
 8006870:	420c0000 	.word	0x420c0000
 8006874:	428c0000 	.word	0x428c0000

08006878 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006882:	2003      	movs	r0, #3
 8006884:	f000 f901 	bl	8006a8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006888:	200f      	movs	r0, #15
 800688a:	f7ff fd35 	bl	80062f8 <HAL_InitTick>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	71fb      	strb	r3, [r7, #7]
 8006898:	e001      	b.n	800689e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800689a:	f7ff fb01 	bl	8005ea0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800689e:	79fb      	ldrb	r3, [r7, #7]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <HAL_IncTick+0x20>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	4b06      	ldr	r3, [pc, #24]	; (80068cc <HAL_IncTick+0x24>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4413      	add	r3, r2
 80068b8:	4a04      	ldr	r2, [pc, #16]	; (80068cc <HAL_IncTick+0x24>)
 80068ba:	6013      	str	r3, [r2, #0]
}
 80068bc:	bf00      	nop
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	200001f4 	.word	0x200001f4
 80068cc:	2000178c 	.word	0x2000178c

080068d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  return uwTick;
 80068d4:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <HAL_GetTick+0x14>)
 80068d6:	681b      	ldr	r3, [r3, #0]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	2000178c 	.word	0x2000178c

080068e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068f0:	f7ff ffee 	bl	80068d0 <HAL_GetTick>
 80068f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d005      	beq.n	800690e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <HAL_Delay+0x44>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800690e:	bf00      	nop
 8006910:	f7ff ffde 	bl	80068d0 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	429a      	cmp	r2, r3
 800691e:	d8f7      	bhi.n	8006910 <HAL_Delay+0x28>
  {
  }
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	200001f4 	.word	0x200001f4

08006930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006940:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <__NVIC_SetPriorityGrouping+0x44>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800694c:	4013      	ands	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800695c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006962:	4a04      	ldr	r2, [pc, #16]	; (8006974 <__NVIC_SetPriorityGrouping+0x44>)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	60d3      	str	r3, [r2, #12]
}
 8006968:	bf00      	nop
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	e000ed00 	.word	0xe000ed00

08006978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <__NVIC_GetPriorityGrouping+0x18>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	0a1b      	lsrs	r3, r3, #8
 8006982:	f003 0307 	and.w	r3, r3, #7
}
 8006986:	4618      	mov	r0, r3
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	e000ed00 	.word	0xe000ed00

08006994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800699e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	db0b      	blt.n	80069be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	f003 021f 	and.w	r2, r3, #31
 80069ac:	4907      	ldr	r1, [pc, #28]	; (80069cc <__NVIC_EnableIRQ+0x38>)
 80069ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	2001      	movs	r0, #1
 80069b6:	fa00 f202 	lsl.w	r2, r0, r2
 80069ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	e000e100 	.word	0xe000e100

080069d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	6039      	str	r1, [r7, #0]
 80069da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	db0a      	blt.n	80069fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	490c      	ldr	r1, [pc, #48]	; (8006a1c <__NVIC_SetPriority+0x4c>)
 80069ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ee:	0112      	lsls	r2, r2, #4
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	440b      	add	r3, r1
 80069f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069f8:	e00a      	b.n	8006a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	4908      	ldr	r1, [pc, #32]	; (8006a20 <__NVIC_SetPriority+0x50>)
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	3b04      	subs	r3, #4
 8006a08:	0112      	lsls	r2, r2, #4
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	761a      	strb	r2, [r3, #24]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	e000e100 	.word	0xe000e100
 8006a20:	e000ed00 	.word	0xe000ed00

08006a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b089      	sub	sp, #36	; 0x24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	f1c3 0307 	rsb	r3, r3, #7
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	bf28      	it	cs
 8006a42:	2304      	movcs	r3, #4
 8006a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d902      	bls.n	8006a54 <NVIC_EncodePriority+0x30>
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3b03      	subs	r3, #3
 8006a52:	e000      	b.n	8006a56 <NVIC_EncodePriority+0x32>
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	43da      	mvns	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	401a      	ands	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	43d9      	mvns	r1, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a7c:	4313      	orrs	r3, r2
         );
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3724      	adds	r7, #36	; 0x24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff ff4c 	bl	8006930 <__NVIC_SetPriorityGrouping>
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ab2:	f7ff ff61 	bl	8006978 <__NVIC_GetPriorityGrouping>
 8006ab6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	6978      	ldr	r0, [r7, #20]
 8006abe:	f7ff ffb1 	bl	8006a24 <NVIC_EncodePriority>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ac8:	4611      	mov	r1, r2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff ff80 	bl	80069d0 <__NVIC_SetPriority>
}
 8006ad0:	bf00      	nop
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff ff54 	bl	8006994 <__NVIC_EnableIRQ>
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e014      	b.n	8006b30 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	791b      	ldrb	r3, [r3, #4]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff f9e6 	bl	8005ee8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	795b      	ldrb	r3, [r3, #5]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_DAC_Start+0x16>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e040      	b.n	8006bd0 <HAL_DAC_Start+0x98>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	2201      	movs	r2, #1
 8006b68:	409a      	lsls	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10f      	bne.n	8006b98 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d11d      	bne.n	8006bc2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0201 	orr.w	r2, r2, #1
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	e014      	b.n	8006bc2 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2102      	movs	r1, #2
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d107      	bne.n	8006bc2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 0202 	orr.w	r2, r2, #2
 8006bc0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	795b      	ldrb	r3, [r3, #5]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_DAC_Start_DMA+0x1e>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e0ab      	b.n	8006d52 <HAL_DAC_Start_DMA+0x176>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2202      	movs	r2, #2
 8006c04:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d12f      	bne.n	8006c6c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4a52      	ldr	r2, [pc, #328]	; (8006d5c <HAL_DAC_Start_DMA+0x180>)
 8006c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4a51      	ldr	r2, [pc, #324]	; (8006d60 <HAL_DAC_Start_DMA+0x184>)
 8006c1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4a50      	ldr	r2, [pc, #320]	; (8006d64 <HAL_DAC_Start_DMA+0x188>)
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c32:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d013      	beq.n	8006c62 <HAL_DAC_Start_DMA+0x86>
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d845      	bhi.n	8006ccc <HAL_DAC_Start_DMA+0xf0>
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_DAC_Start_DMA+0x72>
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d005      	beq.n	8006c58 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8006c4c:	e03e      	b.n	8006ccc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	613b      	str	r3, [r7, #16]
        break;
 8006c56:	e03c      	b.n	8006cd2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	613b      	str	r3, [r7, #16]
        break;
 8006c60:	e037      	b.n	8006cd2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3310      	adds	r3, #16
 8006c68:	613b      	str	r3, [r7, #16]
        break;
 8006c6a:	e032      	b.n	8006cd2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4a3d      	ldr	r2, [pc, #244]	; (8006d68 <HAL_DAC_Start_DMA+0x18c>)
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	4a3c      	ldr	r2, [pc, #240]	; (8006d6c <HAL_DAC_Start_DMA+0x190>)
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	4a3b      	ldr	r2, [pc, #236]	; (8006d70 <HAL_DAC_Start_DMA+0x194>)
 8006c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c92:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d013      	beq.n	8006cc2 <HAL_DAC_Start_DMA+0xe6>
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d817      	bhi.n	8006cd0 <HAL_DAC_Start_DMA+0xf4>
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_DAC_Start_DMA+0xd2>
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d005      	beq.n	8006cb8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8006cac:	e010      	b.n	8006cd0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3314      	adds	r3, #20
 8006cb4:	613b      	str	r3, [r7, #16]
        break;
 8006cb6:	e00c      	b.n	8006cd2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3318      	adds	r3, #24
 8006cbe:	613b      	str	r3, [r7, #16]
        break;
 8006cc0:	e007      	b.n	8006cd2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	331c      	adds	r3, #28
 8006cc8:	613b      	str	r3, [r7, #16]
        break;
 8006cca:	e002      	b.n	8006cd2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8006ccc:	bf00      	nop
 8006cce:	e000      	b.n	8006cd2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8006cd0:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d111      	bne.n	8006cfc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ce6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6898      	ldr	r0, [r3, #8]
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	f000 fb83 	bl	80073fc <HAL_DMA_Start_IT>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]
 8006cfa:	e010      	b.n	8006d1e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006d0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	68d8      	ldr	r0, [r3, #12]
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	f000 fb71 	bl	80073fc <HAL_DMA_Start_IT>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10c      	bne.n	8006d44 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2201      	movs	r2, #1
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e005      	b.n	8006d50 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f043 0204 	orr.w	r2, r3, #4
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	08007185 	.word	0x08007185
 8006d60:	080071a7 	.word	0x080071a7
 8006d64:	080071c3 	.word	0x080071c3
 8006d68:	08007241 	.word	0x08007241
 8006d6c:	08007263 	.word	0x08007263
 8006d70:	0800727f 	.word	0x0800727f

08006d74 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6819      	ldr	r1, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	43da      	mvns	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	400a      	ands	r2, r1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2201      	movs	r2, #1
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	43da      	mvns	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	400a      	ands	r2, r1
 8006db6:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10d      	bne.n	8006dda <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fb95 	bl	80074f2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	e00c      	b.n	8006df4 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fb87 	bl	80074f2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006df2:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e14:	d120      	bne.n	8006e58 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e24:	d118      	bne.n	8006e58 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f043 0201 	orr.w	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e50:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f84b 	bl	8006eee <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e66:	d120      	bne.n	8006eaa <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e76:	d118      	bne.n	8006eaa <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f043 0202 	orr.w	r2, r3, #2
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006e92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f9c1 	bl	800722c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	795b      	ldrb	r3, [r3, #5]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_DAC_ConfigChannel+0x1c>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e12a      	b.n	8007176 <HAL_DAC_ConfigChannel+0x272>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d174      	bne.n	800701e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006f34:	f7ff fccc 	bl	80068d0 <HAL_GetTick>
 8006f38:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d134      	bne.n	8006faa <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006f40:	e011      	b.n	8006f66 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f42:	f7ff fcc5 	bl	80068d0 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d90a      	bls.n	8006f66 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f043 0208 	orr.w	r2, r3, #8
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2203      	movs	r2, #3
 8006f60:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e107      	b.n	8007176 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8006f74:	2001      	movs	r0, #1
 8006f76:	f7ff fcb7 	bl	80068e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	69d2      	ldr	r2, [r2, #28]
 8006f82:	641a      	str	r2, [r3, #64]	; 0x40
 8006f84:	e01e      	b.n	8006fc4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f86:	f7ff fca3 	bl	80068d0 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d90a      	bls.n	8006faa <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	f043 0208 	orr.w	r2, r3, #8
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e0e5      	b.n	8007176 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	dbe8      	blt.n	8006f86 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	f7ff fc97 	bl	80068e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	69d2      	ldr	r2, [r2, #28]
 8006fc2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	ea02 0103 	and.w	r1, r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6a1a      	ldr	r2, [r3, #32]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	409a      	lsls	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f003 0310 	and.w	r3, r3, #16
 8006ffe:	21ff      	movs	r1, #255	; 0xff
 8007000:	fa01 f303 	lsl.w	r3, r1, r3
 8007004:	43db      	mvns	r3, r3
 8007006:	ea02 0103 	and.w	r1, r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	409a      	lsls	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d11d      	bne.n	8007062 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	221f      	movs	r2, #31
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	43db      	mvns	r3, r3
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	4013      	ands	r3, r2
 8007040:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f003 0310 	and.w	r3, r3, #16
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	fa02 f303 	lsl.w	r3, r2, r3
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	4313      	orrs	r3, r2
 8007058:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007068:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2207      	movs	r2, #7
 8007072:	fa02 f303 	lsl.w	r3, r2, r3
 8007076:	43db      	mvns	r3, r3
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	4013      	ands	r3, r2
 800707c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	431a      	orrs	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	4313      	orrs	r3, r2
 80070a0:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6819      	ldr	r1, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43da      	mvns	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	400a      	ands	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	4013      	ands	r3, r2
 80070e4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007106:	d104      	bne.n	8007112 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	e018      	b.n	8007144 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e00f      	b.n	8007144 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8007124:	f003 fba2 	bl	800a86c <HAL_RCC_GetHCLKFreq>
 8007128:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4a14      	ldr	r2, [pc, #80]	; (8007180 <HAL_DAC_ConfigChannel+0x27c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d904      	bls.n	800713c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	e003      	b.n	8007144 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007142:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	22c0      	movs	r2, #192	; 0xc0
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	43da      	mvns	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	400a      	ands	r2, r1
 8007166:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	04c4b400 	.word	0x04c4b400

08007184 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff fe8d 	bl	8006eb2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2201      	movs	r2, #1
 800719c:	711a      	strb	r2, [r3, #4]
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff fe86 	bl	8006ec6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f043 0204 	orr.w	r2, r3, #4
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff fe7c 	bl	8006eda <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	711a      	strb	r2, [r3, #4]
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7ff ffce 	bl	80071f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	711a      	strb	r2, [r3, #4]
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff ffc7 	bl	8007204 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f043 0204 	orr.w	r2, r3, #4
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff ffbd 	bl	8007218 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	711a      	strb	r2, [r3, #4]
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e08d      	b.n	80073da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	4b47      	ldr	r3, [pc, #284]	; (80073e4 <HAL_DMA_Init+0x138>)
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d80f      	bhi.n	80072ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	4b45      	ldr	r3, [pc, #276]	; (80073e8 <HAL_DMA_Init+0x13c>)
 80072d2:	4413      	add	r3, r2
 80072d4:	4a45      	ldr	r2, [pc, #276]	; (80073ec <HAL_DMA_Init+0x140>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	009a      	lsls	r2, r3, #2
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a42      	ldr	r2, [pc, #264]	; (80073f0 <HAL_DMA_Init+0x144>)
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
 80072e8:	e00e      	b.n	8007308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	4b40      	ldr	r3, [pc, #256]	; (80073f4 <HAL_DMA_Init+0x148>)
 80072f2:	4413      	add	r3, r2
 80072f4:	4a3d      	ldr	r2, [pc, #244]	; (80073ec <HAL_DMA_Init+0x140>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	091b      	lsrs	r3, r3, #4
 80072fc:	009a      	lsls	r2, r3, #2
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a3c      	ldr	r2, [pc, #240]	; (80073f8 <HAL_DMA_Init+0x14c>)
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800732c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa12 	bl	8007784 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007368:	d102      	bne.n	8007370 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007384:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d010      	beq.n	80073b0 <HAL_DMA_Init+0x104>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d80c      	bhi.n	80073b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa32 	bl	8007800 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	e008      	b.n	80073c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40020407 	.word	0x40020407
 80073e8:	bffdfff8 	.word	0xbffdfff8
 80073ec:	cccccccd 	.word	0xcccccccd
 80073f0:	40020000 	.word	0x40020000
 80073f4:	bffdfbf8 	.word	0xbffdfbf8
 80073f8:	40020400 	.word	0x40020400

080073fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <HAL_DMA_Start_IT+0x20>
 8007418:	2302      	movs	r3, #2
 800741a:	e066      	b.n	80074ea <HAL_DMA_Start_IT+0xee>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	d155      	bne.n	80074dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f957 	bl	8007708 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	2b00      	cmp	r3, #0
 8007460:	d008      	beq.n	8007474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f042 020e 	orr.w	r2, r2, #14
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e00f      	b.n	8007494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0204 	bic.w	r2, r2, #4
 8007482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 020a 	orr.w	r2, r2, #10
 8007492:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074b0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074c8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0201 	orr.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e005      	b.n	80074e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
 80074e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d008      	beq.n	800751c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e040      	b.n	800759e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 020e 	bic.w	r2, r2, #14
 800752a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800753a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0201 	bic.w	r2, r2, #1
 800754a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007550:	f003 021c 	and.w	r2, r3, #28
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	2101      	movs	r1, #1
 800755a:	fa01 f202 	lsl.w	r2, r1, r2
 800755e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007568:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00c      	beq.n	800758c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007580:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800758a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	f003 031c 	and.w	r3, r3, #28
 80075ca:	2204      	movs	r2, #4
 80075cc:	409a      	lsls	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d026      	beq.n	8007624 <HAL_DMA_IRQHandler+0x7a>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d021      	beq.n	8007624 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d107      	bne.n	80075fe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0204 	bic.w	r2, r2, #4
 80075fc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	f003 021c 	and.w	r2, r3, #28
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2104      	movs	r1, #4
 800760c:	fa01 f202 	lsl.w	r2, r1, r2
 8007610:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	2b00      	cmp	r3, #0
 8007618:	d071      	beq.n	80076fe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007622:	e06c      	b.n	80076fe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	f003 031c 	and.w	r3, r3, #28
 800762c:	2202      	movs	r2, #2
 800762e:	409a      	lsls	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4013      	ands	r3, r2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d02e      	beq.n	8007696 <HAL_DMA_IRQHandler+0xec>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d029      	beq.n	8007696 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10b      	bne.n	8007668 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 020a 	bic.w	r2, r2, #10
 800765e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766c:	f003 021c 	and.w	r2, r3, #28
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	2102      	movs	r1, #2
 8007676:	fa01 f202 	lsl.w	r2, r1, r2
 800767a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d038      	beq.n	80076fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007694:	e033      	b.n	80076fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769a:	f003 031c 	and.w	r3, r3, #28
 800769e:	2208      	movs	r2, #8
 80076a0:	409a      	lsls	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d02a      	beq.n	8007700 <HAL_DMA_IRQHandler+0x156>
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d025      	beq.n	8007700 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 020e 	bic.w	r2, r2, #14
 80076c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c8:	f003 021c 	and.w	r2, r3, #28
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	2101      	movs	r1, #1
 80076d2:	fa01 f202 	lsl.w	r2, r1, r2
 80076d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
}
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800771e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007730:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	f003 021c 	and.w	r2, r3, #28
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	2101      	movs	r1, #1
 8007740:	fa01 f202 	lsl.w	r2, r1, r2
 8007744:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b10      	cmp	r3, #16
 8007754:	d108      	bne.n	8007768 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007766:	e007      	b.n	8007778 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	60da      	str	r2, [r3, #12]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007794:	429a      	cmp	r2, r3
 8007796:	d80a      	bhi.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779c:	089b      	lsrs	r3, r3, #2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077a4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6493      	str	r3, [r2, #72]	; 0x48
 80077ac:	e007      	b.n	80077be <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	089b      	lsrs	r3, r3, #2
 80077b4:	009a      	lsls	r2, r3, #2
 80077b6:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80077b8:	4413      	add	r3, r2
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	3b08      	subs	r3, #8
 80077c6:	4a0c      	ldr	r2, [pc, #48]	; (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80077c8:	fba2 2303 	umull	r2, r3, r2, r3
 80077cc:	091b      	lsrs	r3, r3, #4
 80077ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80077d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f003 031f 	and.w	r3, r3, #31
 80077dc:	2201      	movs	r2, #1
 80077de:	409a      	lsls	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	40020407 	.word	0x40020407
 80077f4:	4002081c 	.word	0x4002081c
 80077f8:	cccccccd 	.word	0xcccccccd
 80077fc:	40020880 	.word	0x40020880

08007800 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	461a      	mov	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a08      	ldr	r2, [pc, #32]	; (8007844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007822:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3b01      	subs	r3, #1
 8007828:	f003 0303 	and.w	r3, r3, #3
 800782c:	2201      	movs	r2, #1
 800782e:	409a      	lsls	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	1000823f 	.word	0x1000823f
 8007844:	40020940 	.word	0x40020940

08007848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007856:	e166      	b.n	8007b26 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	2101      	movs	r1, #1
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	fa01 f303 	lsl.w	r3, r1, r3
 8007864:	4013      	ands	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8158 	beq.w	8007b20 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d005      	beq.n	8007888 <HAL_GPIO_Init+0x40>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d130      	bne.n	80078ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	2203      	movs	r2, #3
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	43db      	mvns	r3, r3
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4013      	ands	r3, r2
 800789e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078be:	2201      	movs	r2, #1
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	43db      	mvns	r3, r3
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4013      	ands	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	f003 0201 	and.w	r2, r3, #1
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d017      	beq.n	8007926 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	2203      	movs	r2, #3
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	43db      	mvns	r3, r3
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4013      	ands	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d123      	bne.n	800797a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	08da      	lsrs	r2, r3, #3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3208      	adds	r2, #8
 800793a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	220f      	movs	r2, #15
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	43db      	mvns	r3, r3
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4013      	ands	r3, r2
 8007954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	08da      	lsrs	r2, r3, #3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3208      	adds	r2, #8
 8007974:	6939      	ldr	r1, [r7, #16]
 8007976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	2203      	movs	r2, #3
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	43db      	mvns	r3, r3
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4013      	ands	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f003 0203 	and.w	r2, r3, #3
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 80b2 	beq.w	8007b20 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079bc:	4b61      	ldr	r3, [pc, #388]	; (8007b44 <HAL_GPIO_Init+0x2fc>)
 80079be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c0:	4a60      	ldr	r2, [pc, #384]	; (8007b44 <HAL_GPIO_Init+0x2fc>)
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	6613      	str	r3, [r2, #96]	; 0x60
 80079c8:	4b5e      	ldr	r3, [pc, #376]	; (8007b44 <HAL_GPIO_Init+0x2fc>)
 80079ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80079d4:	4a5c      	ldr	r2, [pc, #368]	; (8007b48 <HAL_GPIO_Init+0x300>)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	089b      	lsrs	r3, r3, #2
 80079da:	3302      	adds	r3, #2
 80079dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	220f      	movs	r2, #15
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	43db      	mvns	r3, r3
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4013      	ands	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80079fe:	d02b      	beq.n	8007a58 <HAL_GPIO_Init+0x210>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a52      	ldr	r2, [pc, #328]	; (8007b4c <HAL_GPIO_Init+0x304>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d025      	beq.n	8007a54 <HAL_GPIO_Init+0x20c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a51      	ldr	r2, [pc, #324]	; (8007b50 <HAL_GPIO_Init+0x308>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d01f      	beq.n	8007a50 <HAL_GPIO_Init+0x208>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a50      	ldr	r2, [pc, #320]	; (8007b54 <HAL_GPIO_Init+0x30c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d019      	beq.n	8007a4c <HAL_GPIO_Init+0x204>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a4f      	ldr	r2, [pc, #316]	; (8007b58 <HAL_GPIO_Init+0x310>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d013      	beq.n	8007a48 <HAL_GPIO_Init+0x200>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a4e      	ldr	r2, [pc, #312]	; (8007b5c <HAL_GPIO_Init+0x314>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00d      	beq.n	8007a44 <HAL_GPIO_Init+0x1fc>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a4d      	ldr	r2, [pc, #308]	; (8007b60 <HAL_GPIO_Init+0x318>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d007      	beq.n	8007a40 <HAL_GPIO_Init+0x1f8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a4c      	ldr	r2, [pc, #304]	; (8007b64 <HAL_GPIO_Init+0x31c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d101      	bne.n	8007a3c <HAL_GPIO_Init+0x1f4>
 8007a38:	2307      	movs	r3, #7
 8007a3a:	e00e      	b.n	8007a5a <HAL_GPIO_Init+0x212>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	e00c      	b.n	8007a5a <HAL_GPIO_Init+0x212>
 8007a40:	2306      	movs	r3, #6
 8007a42:	e00a      	b.n	8007a5a <HAL_GPIO_Init+0x212>
 8007a44:	2305      	movs	r3, #5
 8007a46:	e008      	b.n	8007a5a <HAL_GPIO_Init+0x212>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	e006      	b.n	8007a5a <HAL_GPIO_Init+0x212>
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e004      	b.n	8007a5a <HAL_GPIO_Init+0x212>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e002      	b.n	8007a5a <HAL_GPIO_Init+0x212>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <HAL_GPIO_Init+0x212>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	f002 0203 	and.w	r2, r2, #3
 8007a60:	0092      	lsls	r2, r2, #2
 8007a62:	4093      	lsls	r3, r2
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007a6a:	4937      	ldr	r1, [pc, #220]	; (8007b48 <HAL_GPIO_Init+0x300>)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	089b      	lsrs	r3, r3, #2
 8007a70:	3302      	adds	r3, #2
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a78:	4b3b      	ldr	r3, [pc, #236]	; (8007b68 <HAL_GPIO_Init+0x320>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4013      	ands	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007a9c:	4a32      	ldr	r2, [pc, #200]	; (8007b68 <HAL_GPIO_Init+0x320>)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007aa2:	4b31      	ldr	r3, [pc, #196]	; (8007b68 <HAL_GPIO_Init+0x320>)
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007ac6:	4a28      	ldr	r2, [pc, #160]	; (8007b68 <HAL_GPIO_Init+0x320>)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007acc:	4b26      	ldr	r3, [pc, #152]	; (8007b68 <HAL_GPIO_Init+0x320>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007af0:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <HAL_GPIO_Init+0x320>)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007af6:	4b1c      	ldr	r3, [pc, #112]	; (8007b68 <HAL_GPIO_Init+0x320>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	43db      	mvns	r3, r3
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4013      	ands	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b1a:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <HAL_GPIO_Init+0x320>)
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	3301      	adds	r3, #1
 8007b24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f47f ae91 	bne.w	8007858 <HAL_GPIO_Init+0x10>
  }
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	371c      	adds	r7, #28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	40021000 	.word	0x40021000
 8007b48:	40010000 	.word	0x40010000
 8007b4c:	48000400 	.word	0x48000400
 8007b50:	48000800 	.word	0x48000800
 8007b54:	48000c00 	.word	0x48000c00
 8007b58:	48001000 	.word	0x48001000
 8007b5c:	48001400 	.word	0x48001400
 8007b60:	48001800 	.word	0x48001800
 8007b64:	48001c00 	.word	0x48001c00
 8007b68:	40010400 	.word	0x40010400

08007b6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007b7a:	e0c9      	b.n	8007d10 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	4013      	ands	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80bc 	beq.w	8007d0a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007b92:	4a66      	ldr	r2, [pc, #408]	; (8007d2c <HAL_GPIO_DeInit+0x1c0>)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	089b      	lsrs	r3, r3, #2
 8007b98:	3302      	adds	r3, #2
 8007b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b9e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	220f      	movs	r2, #15
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007bba:	d02b      	beq.n	8007c14 <HAL_GPIO_DeInit+0xa8>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a5c      	ldr	r2, [pc, #368]	; (8007d30 <HAL_GPIO_DeInit+0x1c4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d025      	beq.n	8007c10 <HAL_GPIO_DeInit+0xa4>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a5b      	ldr	r2, [pc, #364]	; (8007d34 <HAL_GPIO_DeInit+0x1c8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d01f      	beq.n	8007c0c <HAL_GPIO_DeInit+0xa0>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a5a      	ldr	r2, [pc, #360]	; (8007d38 <HAL_GPIO_DeInit+0x1cc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d019      	beq.n	8007c08 <HAL_GPIO_DeInit+0x9c>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a59      	ldr	r2, [pc, #356]	; (8007d3c <HAL_GPIO_DeInit+0x1d0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d013      	beq.n	8007c04 <HAL_GPIO_DeInit+0x98>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a58      	ldr	r2, [pc, #352]	; (8007d40 <HAL_GPIO_DeInit+0x1d4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00d      	beq.n	8007c00 <HAL_GPIO_DeInit+0x94>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a57      	ldr	r2, [pc, #348]	; (8007d44 <HAL_GPIO_DeInit+0x1d8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d007      	beq.n	8007bfc <HAL_GPIO_DeInit+0x90>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a56      	ldr	r2, [pc, #344]	; (8007d48 <HAL_GPIO_DeInit+0x1dc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d101      	bne.n	8007bf8 <HAL_GPIO_DeInit+0x8c>
 8007bf4:	2307      	movs	r3, #7
 8007bf6:	e00e      	b.n	8007c16 <HAL_GPIO_DeInit+0xaa>
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	e00c      	b.n	8007c16 <HAL_GPIO_DeInit+0xaa>
 8007bfc:	2306      	movs	r3, #6
 8007bfe:	e00a      	b.n	8007c16 <HAL_GPIO_DeInit+0xaa>
 8007c00:	2305      	movs	r3, #5
 8007c02:	e008      	b.n	8007c16 <HAL_GPIO_DeInit+0xaa>
 8007c04:	2304      	movs	r3, #4
 8007c06:	e006      	b.n	8007c16 <HAL_GPIO_DeInit+0xaa>
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e004      	b.n	8007c16 <HAL_GPIO_DeInit+0xaa>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e002      	b.n	8007c16 <HAL_GPIO_DeInit+0xaa>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <HAL_GPIO_DeInit+0xaa>
 8007c14:	2300      	movs	r3, #0
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	f002 0203 	and.w	r2, r2, #3
 8007c1c:	0092      	lsls	r2, r2, #2
 8007c1e:	4093      	lsls	r3, r2
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d132      	bne.n	8007c8c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007c26:	4b49      	ldr	r3, [pc, #292]	; (8007d4c <HAL_GPIO_DeInit+0x1e0>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	4947      	ldr	r1, [pc, #284]	; (8007d4c <HAL_GPIO_DeInit+0x1e0>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007c34:	4b45      	ldr	r3, [pc, #276]	; (8007d4c <HAL_GPIO_DeInit+0x1e0>)
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	4943      	ldr	r1, [pc, #268]	; (8007d4c <HAL_GPIO_DeInit+0x1e0>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007c42:	4b42      	ldr	r3, [pc, #264]	; (8007d4c <HAL_GPIO_DeInit+0x1e0>)
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	4940      	ldr	r1, [pc, #256]	; (8007d4c <HAL_GPIO_DeInit+0x1e0>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007c50:	4b3e      	ldr	r3, [pc, #248]	; (8007d4c <HAL_GPIO_DeInit+0x1e0>)
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	43db      	mvns	r3, r3
 8007c58:	493c      	ldr	r1, [pc, #240]	; (8007d4c <HAL_GPIO_DeInit+0x1e0>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	220f      	movs	r2, #15
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007c6e:	4a2f      	ldr	r2, [pc, #188]	; (8007d2c <HAL_GPIO_DeInit+0x1c0>)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	089b      	lsrs	r3, r3, #2
 8007c74:	3302      	adds	r3, #2
 8007c76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	43da      	mvns	r2, r3
 8007c7e:	482b      	ldr	r0, [pc, #172]	; (8007d2c <HAL_GPIO_DeInit+0x1c0>)
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	089b      	lsrs	r3, r3, #2
 8007c84:	400a      	ands	r2, r1
 8007c86:	3302      	adds	r3, #2
 8007c88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	2103      	movs	r1, #3
 8007c96:	fa01 f303 	lsl.w	r3, r1, r3
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	08da      	lsrs	r2, r3, #3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3208      	adds	r2, #8
 8007ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	220f      	movs	r2, #15
 8007cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	08d2      	lsrs	r2, r2, #3
 8007cc0:	4019      	ands	r1, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3208      	adds	r2, #8
 8007cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	2103      	movs	r1, #3
 8007cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	401a      	ands	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cec:	43db      	mvns	r3, r3
 8007cee:	401a      	ands	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	2103      	movs	r1, #3
 8007cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007d02:	43db      	mvns	r3, r3
 8007d04:	401a      	ands	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f47f af2f 	bne.w	8007b7c <HAL_GPIO_DeInit+0x10>
  }
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	40010000 	.word	0x40010000
 8007d30:	48000400 	.word	0x48000400
 8007d34:	48000800 	.word	0x48000800
 8007d38:	48000c00 	.word	0x48000c00
 8007d3c:	48001000 	.word	0x48001000
 8007d40:	48001400 	.word	0x48001400
 8007d44:	48001800 	.word	0x48001800
 8007d48:	48001c00 	.word	0x48001c00
 8007d4c:	40010400 	.word	0x40010400

08007d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d60:	787b      	ldrb	r3, [r7, #1]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d66:	887a      	ldrh	r2, [r7, #2]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007d6c:	e002      	b.n	8007d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007d6e:	887a      	ldrh	r2, [r7, #2]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d92:	887a      	ldrh	r2, [r7, #2]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4013      	ands	r3, r2
 8007d98:	041a      	lsls	r2, r3, #16
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	43d9      	mvns	r1, r3
 8007d9e:	887b      	ldrh	r3, [r7, #2]
 8007da0:	400b      	ands	r3, r1
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	619a      	str	r2, [r3, #24]
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007dbe:	4b08      	ldr	r3, [pc, #32]	; (8007de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007dca:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007dd0:	88fb      	ldrh	r3, [r7, #6]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fd fa44 	bl	8005260 <HAL_GPIO_EXTI_Callback>
  }
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40010400 	.word	0x40010400

08007de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e081      	b.n	8007efa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7fe f8e0 	bl	8005fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2224      	movs	r2, #36	; 0x24
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0201 	bic.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d107      	bne.n	8007e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e5a:	609a      	str	r2, [r3, #8]
 8007e5c:	e006      	b.n	8007e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d104      	bne.n	8007e7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68da      	ldr	r2, [r3, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ea0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69d9      	ldr	r1, [r3, #28]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1a      	ldr	r2, [r3, #32]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e021      	b.n	8007f58 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2224      	movs	r2, #36	; 0x24
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0201 	bic.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7fe f8ad 	bl	800608c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	4608      	mov	r0, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4603      	mov	r3, r0
 8007f70:	817b      	strh	r3, [r7, #10]
 8007f72:	460b      	mov	r3, r1
 8007f74:	813b      	strh	r3, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	f040 80f9 	bne.w	800817a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <HAL_I2C_Mem_Write+0x34>
 8007f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e0ed      	b.n	800817c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d101      	bne.n	8007fae <HAL_I2C_Mem_Write+0x4e>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e0e6      	b.n	800817c <HAL_I2C_Mem_Write+0x21c>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fb6:	f7fe fc8b 	bl	80068d0 <HAL_GetTick>
 8007fba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	2319      	movs	r3, #25
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fac3 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e0d1      	b.n	800817c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2221      	movs	r2, #33	; 0x21
 8007fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2240      	movs	r2, #64	; 0x40
 8007fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a3a      	ldr	r2, [r7, #32]
 8007ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008000:	88f8      	ldrh	r0, [r7, #6]
 8008002:	893a      	ldrh	r2, [r7, #8]
 8008004:	8979      	ldrh	r1, [r7, #10]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	4603      	mov	r3, r0
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f9d3 	bl	80083bc <I2C_RequestMemoryWrite>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e0a9      	b.n	800817c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802c:	b29b      	uxth	r3, r3
 800802e:	2bff      	cmp	r3, #255	; 0xff
 8008030:	d90e      	bls.n	8008050 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	22ff      	movs	r2, #255	; 0xff
 8008036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803c:	b2da      	uxtb	r2, r3
 800803e:	8979      	ldrh	r1, [r7, #10]
 8008040:	2300      	movs	r3, #0
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 fc2b 	bl	80088a4 <I2C_TransferConfig>
 800804e:	e00f      	b.n	8008070 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805e:	b2da      	uxtb	r2, r3
 8008060:	8979      	ldrh	r1, [r7, #10]
 8008062:	2300      	movs	r3, #0
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 fc1a 	bl	80088a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 faad 	bl	80085d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e07b      	b.n	800817c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ac:	3b01      	subs	r3, #1
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d034      	beq.n	8008128 <HAL_I2C_Mem_Write+0x1c8>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d130      	bne.n	8008128 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	2200      	movs	r2, #0
 80080ce:	2180      	movs	r1, #128	; 0x80
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fa3f 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e04d      	b.n	800817c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2bff      	cmp	r3, #255	; 0xff
 80080e8:	d90e      	bls.n	8008108 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	22ff      	movs	r2, #255	; 0xff
 80080ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	8979      	ldrh	r1, [r7, #10]
 80080f8:	2300      	movs	r3, #0
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fbcf 	bl	80088a4 <I2C_TransferConfig>
 8008106:	e00f      	b.n	8008128 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008116:	b2da      	uxtb	r2, r3
 8008118:	8979      	ldrh	r1, [r7, #10]
 800811a:	2300      	movs	r3, #0
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fbbe 	bl	80088a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d19e      	bne.n	8008070 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fa8c 	bl	8008654 <I2C_WaitOnSTOPFlagUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e01a      	b.n	800817c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2220      	movs	r2, #32
 800814c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6859      	ldr	r1, [r3, #4]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <HAL_I2C_Mem_Write+0x224>)
 800815a:	400b      	ands	r3, r1
 800815c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2220      	movs	r2, #32
 8008162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800817a:	2302      	movs	r3, #2
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	fe00e800 	.word	0xfe00e800

08008188 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af02      	add	r7, sp, #8
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	4608      	mov	r0, r1
 8008192:	4611      	mov	r1, r2
 8008194:	461a      	mov	r2, r3
 8008196:	4603      	mov	r3, r0
 8008198:	817b      	strh	r3, [r7, #10]
 800819a:	460b      	mov	r3, r1
 800819c:	813b      	strh	r3, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	f040 80fd 	bne.w	80083aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <HAL_I2C_Mem_Read+0x34>
 80081b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e0f1      	b.n	80083ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_I2C_Mem_Read+0x4e>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e0ea      	b.n	80083ac <HAL_I2C_Mem_Read+0x224>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081de:	f7fe fb77 	bl	80068d0 <HAL_GetTick>
 80081e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2319      	movs	r3, #25
 80081ea:	2201      	movs	r2, #1
 80081ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f000 f9af 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e0d5      	b.n	80083ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2222      	movs	r2, #34	; 0x22
 8008204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2240      	movs	r2, #64	; 0x40
 800820c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a3a      	ldr	r2, [r7, #32]
 800821a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008220:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008228:	88f8      	ldrh	r0, [r7, #6]
 800822a:	893a      	ldrh	r2, [r7, #8]
 800822c:	8979      	ldrh	r1, [r7, #10]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	4603      	mov	r3, r0
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f913 	bl	8008464 <I2C_RequestMemoryRead>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d005      	beq.n	8008250 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e0ad      	b.n	80083ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008254:	b29b      	uxth	r3, r3
 8008256:	2bff      	cmp	r3, #255	; 0xff
 8008258:	d90e      	bls.n	8008278 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	22ff      	movs	r2, #255	; 0xff
 800825e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008264:	b2da      	uxtb	r2, r3
 8008266:	8979      	ldrh	r1, [r7, #10]
 8008268:	4b52      	ldr	r3, [pc, #328]	; (80083b4 <HAL_I2C_Mem_Read+0x22c>)
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fb17 	bl	80088a4 <I2C_TransferConfig>
 8008276:	e00f      	b.n	8008298 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008286:	b2da      	uxtb	r2, r3
 8008288:	8979      	ldrh	r1, [r7, #10]
 800828a:	4b4a      	ldr	r3, [pc, #296]	; (80083b4 <HAL_I2C_Mem_Read+0x22c>)
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fb06 	bl	80088a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2200      	movs	r2, #0
 80082a0:	2104      	movs	r1, #4
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f956 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e07c      	b.n	80083ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ce:	3b01      	subs	r3, #1
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3b01      	subs	r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d034      	beq.n	8008358 <HAL_I2C_Mem_Read+0x1d0>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d130      	bne.n	8008358 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	2200      	movs	r2, #0
 80082fe:	2180      	movs	r1, #128	; 0x80
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f927 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e04d      	b.n	80083ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008314:	b29b      	uxth	r3, r3
 8008316:	2bff      	cmp	r3, #255	; 0xff
 8008318:	d90e      	bls.n	8008338 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	22ff      	movs	r2, #255	; 0xff
 800831e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008324:	b2da      	uxtb	r2, r3
 8008326:	8979      	ldrh	r1, [r7, #10]
 8008328:	2300      	movs	r3, #0
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 fab7 	bl	80088a4 <I2C_TransferConfig>
 8008336:	e00f      	b.n	8008358 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008346:	b2da      	uxtb	r2, r3
 8008348:	8979      	ldrh	r1, [r7, #10]
 800834a:	2300      	movs	r3, #0
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 faa6 	bl	80088a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835c:	b29b      	uxth	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d19a      	bne.n	8008298 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f974 	bl	8008654 <I2C_WaitOnSTOPFlagUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e01a      	b.n	80083ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2220      	movs	r2, #32
 800837c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6859      	ldr	r1, [r3, #4]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	4b0b      	ldr	r3, [pc, #44]	; (80083b8 <HAL_I2C_Mem_Read+0x230>)
 800838a:	400b      	ands	r3, r1
 800838c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2220      	movs	r2, #32
 8008392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	e000      	b.n	80083ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80083aa:	2302      	movs	r3, #2
  }
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	80002400 	.word	0x80002400
 80083b8:	fe00e800 	.word	0xfe00e800

080083bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af02      	add	r7, sp, #8
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	4608      	mov	r0, r1
 80083c6:	4611      	mov	r1, r2
 80083c8:	461a      	mov	r2, r3
 80083ca:	4603      	mov	r3, r0
 80083cc:	817b      	strh	r3, [r7, #10]
 80083ce:	460b      	mov	r3, r1
 80083d0:	813b      	strh	r3, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	8979      	ldrh	r1, [r7, #10]
 80083dc:	4b20      	ldr	r3, [pc, #128]	; (8008460 <I2C_RequestMemoryWrite+0xa4>)
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fa5d 	bl	80088a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	69b9      	ldr	r1, [r7, #24]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 f8f0 	bl	80085d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e02c      	b.n	8008458 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d105      	bne.n	8008410 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008404:	893b      	ldrh	r3, [r7, #8]
 8008406:	b2da      	uxtb	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	629a      	str	r2, [r3, #40]	; 0x28
 800840e:	e015      	b.n	800843c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008410:	893b      	ldrh	r3, [r7, #8]
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	b29b      	uxth	r3, r3
 8008416:	b2da      	uxtb	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	69b9      	ldr	r1, [r7, #24]
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f8d6 	bl	80085d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e012      	b.n	8008458 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008432:	893b      	ldrh	r3, [r7, #8]
 8008434:	b2da      	uxtb	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2200      	movs	r2, #0
 8008444:	2180      	movs	r1, #128	; 0x80
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f884 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e000      	b.n	8008458 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	80002000 	.word	0x80002000

08008464 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af02      	add	r7, sp, #8
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	461a      	mov	r2, r3
 8008472:	4603      	mov	r3, r0
 8008474:	817b      	strh	r3, [r7, #10]
 8008476:	460b      	mov	r3, r1
 8008478:	813b      	strh	r3, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800847e:	88fb      	ldrh	r3, [r7, #6]
 8008480:	b2da      	uxtb	r2, r3
 8008482:	8979      	ldrh	r1, [r7, #10]
 8008484:	4b20      	ldr	r3, [pc, #128]	; (8008508 <I2C_RequestMemoryRead+0xa4>)
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 fa0a 	bl	80088a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	69b9      	ldr	r1, [r7, #24]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f89d 	bl	80085d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e02c      	b.n	80084fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d105      	bne.n	80084b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	629a      	str	r2, [r3, #40]	; 0x28
 80084b4:	e015      	b.n	80084e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084b6:	893b      	ldrh	r3, [r7, #8]
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084c4:	69fa      	ldr	r2, [r7, #28]
 80084c6:	69b9      	ldr	r1, [r7, #24]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f883 	bl	80085d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e012      	b.n	80084fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084d8:	893b      	ldrh	r3, [r7, #8]
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2200      	movs	r2, #0
 80084ea:	2140      	movs	r1, #64	; 0x40
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 f831 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	80002000 	.word	0x80002000

0800850c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b02      	cmp	r3, #2
 8008520:	d103      	bne.n	800852a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2200      	movs	r2, #0
 8008528:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b01      	cmp	r3, #1
 8008536:	d007      	beq.n	8008548 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	619a      	str	r2, [r3, #24]
  }
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008564:	e022      	b.n	80085ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d01e      	beq.n	80085ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800856e:	f7fe f9af 	bl	80068d0 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	429a      	cmp	r2, r3
 800857c:	d302      	bcc.n	8008584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d113      	bne.n	80085ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008588:	f043 0220 	orr.w	r2, r3, #32
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e00f      	b.n	80085cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699a      	ldr	r2, [r3, #24]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4013      	ands	r3, r2
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	bf0c      	ite	eq
 80085bc:	2301      	moveq	r3, #1
 80085be:	2300      	movne	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d0cd      	beq.n	8008566 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085e0:	e02c      	b.n	800863c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f870 	bl	80086cc <I2C_IsErrorOccurred>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e02a      	b.n	800864c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fc:	d01e      	beq.n	800863c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fe:	f7fe f967 	bl	80068d0 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	429a      	cmp	r2, r3
 800860c:	d302      	bcc.n	8008614 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d113      	bne.n	800863c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008618:	f043 0220 	orr.w	r2, r3, #32
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e007      	b.n	800864c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b02      	cmp	r3, #2
 8008648:	d1cb      	bne.n	80085e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008660:	e028      	b.n	80086b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f830 	bl	80086cc <I2C_IsErrorOccurred>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e026      	b.n	80086c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008676:	f7fe f92b 	bl	80068d0 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	429a      	cmp	r2, r3
 8008684:	d302      	bcc.n	800868c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d113      	bne.n	80086b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008690:	f043 0220 	orr.w	r2, r3, #32
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2220      	movs	r2, #32
 800869c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e007      	b.n	80086c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d1cf      	bne.n	8008662 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08a      	sub	sp, #40	; 0x28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d075      	beq.n	80087e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2210      	movs	r2, #16
 80086fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008700:	e056      	b.n	80087b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008708:	d052      	beq.n	80087b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800870a:	f7fe f8e1 	bl	80068d0 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	429a      	cmp	r2, r3
 8008718:	d302      	bcc.n	8008720 <I2C_IsErrorOccurred+0x54>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d147      	bne.n	80087b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800872a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008732:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800873e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008742:	d12e      	bne.n	80087a2 <I2C_IsErrorOccurred+0xd6>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874a:	d02a      	beq.n	80087a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800874c:	7cfb      	ldrb	r3, [r7, #19]
 800874e:	2b20      	cmp	r3, #32
 8008750:	d027      	beq.n	80087a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008760:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008762:	f7fe f8b5 	bl	80068d0 <HAL_GetTick>
 8008766:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008768:	e01b      	b.n	80087a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800876a:	f7fe f8b1 	bl	80068d0 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b19      	cmp	r3, #25
 8008776:	d914      	bls.n	80087a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877c:	f043 0220 	orr.w	r2, r3, #32
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d1dc      	bne.n	800876a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d003      	beq.n	80087c6 <I2C_IsErrorOccurred+0xfa>
 80087be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d09d      	beq.n	8008702 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80087c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d103      	bne.n	80087d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2220      	movs	r2, #32
 80087d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	f043 0304 	orr.w	r3, r3, #4
 80087dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00b      	beq.n	800880e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008806:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008818:	6a3b      	ldr	r3, [r7, #32]
 800881a:	f043 0308 	orr.w	r3, r3, #8
 800881e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008828:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00b      	beq.n	8008852 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	f043 0302 	orr.w	r3, r3, #2
 8008840:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800884a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01c      	beq.n	8008894 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f7ff fe56 	bl	800850c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6859      	ldr	r1, [r3, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <I2C_IsErrorOccurred+0x1d4>)
 800886c:	400b      	ands	r3, r1
 800886e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	431a      	orrs	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008898:	4618      	mov	r0, r3
 800889a:	3728      	adds	r7, #40	; 0x28
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	fe00e800 	.word	0xfe00e800

080088a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	607b      	str	r3, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	817b      	strh	r3, [r7, #10]
 80088b2:	4613      	mov	r3, r2
 80088b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088b6:	897b      	ldrh	r3, [r7, #10]
 80088b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088bc:	7a7b      	ldrb	r3, [r7, #9]
 80088be:	041b      	lsls	r3, r3, #16
 80088c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	0d5b      	lsrs	r3, r3, #21
 80088de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80088e2:	4b08      	ldr	r3, [pc, #32]	; (8008904 <I2C_TransferConfig+0x60>)
 80088e4:	430b      	orrs	r3, r1
 80088e6:	43db      	mvns	r3, r3
 80088e8:	ea02 0103 	and.w	r1, r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80088f6:	bf00      	nop
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	03ff63ff 	.word	0x03ff63ff

08008908 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b20      	cmp	r3, #32
 800891c:	d138      	bne.n	8008990 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008924:	2b01      	cmp	r3, #1
 8008926:	d101      	bne.n	800892c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008928:	2302      	movs	r3, #2
 800892a:	e032      	b.n	8008992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2224      	movs	r2, #36	; 0x24
 8008938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0201 	bic.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800895a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6819      	ldr	r1, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	e000      	b.n	8008992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008990:	2302      	movs	r3, #2
  }
}
 8008992:	4618      	mov	r0, r3
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	d139      	bne.n	8008a28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d101      	bne.n	80089c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80089be:	2302      	movs	r3, #2
 80089c0:	e033      	b.n	8008a2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2224      	movs	r2, #36	; 0x24
 80089ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0201 	bic.w	r2, r2, #1
 80089e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80089f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0201 	orr.w	r2, r2, #1
 8008a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e000      	b.n	8008a2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a28:	2302      	movs	r3, #2
  }
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
	...

08008a38 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8008a44:	f7fd ff44 	bl	80068d0 <HAL_GetTick>
 8008a48:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	73fb      	strb	r3, [r7, #15]
 8008a54:	e08f      	b.n	8008b76 <HAL_OSPI_Init+0x13e>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f040 8088 	bne.w	8008b76 <HAL_OSPI_Init+0x13e>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7fd fb34 	bl	80060d4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8008a6c:	f241 3188 	movw	r1, #5000	; 0x1388
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 facc 	bl	800900e <HAL_OSPI_SetTimeout>

     /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1, (OCTOSPI_DCR1_MTYP | OCTOSPI_DCR1_DEVSIZE | OCTOSPI_DCR1_CSHT |
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	4b40      	ldr	r3, [pc, #256]	; (8008b80 <HAL_OSPI_Init+0x148>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	68d1      	ldr	r1, [r2, #12]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6912      	ldr	r2, [r2, #16]
 8008a88:	3a01      	subs	r2, #1
 8008a8a:	0412      	lsls	r2, r2, #16
 8008a8c:	4311      	orrs	r1, r2
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6952      	ldr	r2, [r2, #20]
 8008a92:	3a01      	subs	r2, #1
 8008a94:	0212      	lsls	r2, r2, #8
 8008a96:	4311      	orrs	r1, r2
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	69d2      	ldr	r2, [r2, #28]
 8008a9c:	4311      	orrs	r1, r2
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	0412      	lsls	r2, r2, #16
 8008ab0:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	021a      	lsls	r2, r3, #8
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2120      	movs	r1, #32
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fddb 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d146      	bne.n	8008b76 <HAL_OSPI_Init+0x13e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	1e5a      	subs	r2, r3, #1
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008b1e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f042 0201 	orr.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d107      	bne.n	8008b5e <HAL_OSPI_Init+0x126>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0202 	orr.w	r2, r2, #2
 8008b5c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b66:	d103      	bne.n	8008b70 <HAL_OSPI_Init+0x138>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	645a      	str	r2, [r3, #68]	; 0x44
 8008b6e:	e002      	b.n	8008b76 <HAL_OSPI_Init+0x13e>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	f8e0f8fc 	.word	0xf8e0f8fc

08008b84 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	73fb      	strb	r3, [r7, #15]
 8008b9a:	e015      	b.n	8008bc8 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0201 	bic.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0202 	bic.w	r2, r2, #2
 8008bba:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7fd faf5 	bl	80061ac <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b08a      	sub	sp, #40	; 0x28
 8008bd6:	af02      	add	r7, sp, #8
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8008bde:	f7fd fe77 	bl	80068d0 <HAL_GetTick>
 8008be2:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bee:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d104      	bne.n	8008c00 <HAL_OSPI_Command+0x2e>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bfe:	d10d      	bne.n	8008c1c <HAL_OSPI_Command+0x4a>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	2b14      	cmp	r3, #20
 8008c04:	d103      	bne.n	8008c0e <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d006      	beq.n	8008c1c <HAL_OSPI_Command+0x4a>
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b24      	cmp	r3, #36	; 0x24
 8008c12:	d153      	bne.n	8008cbc <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d14f      	bne.n	8008cbc <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	2200      	movs	r2, #0
 8008c24:	2120      	movs	r1, #32
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fd34 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8008c30:	7ffb      	ldrb	r3, [r7, #31]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d148      	bne.n	8008cc8 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fd60 	bl	8009704 <OSPI_ConfigCmd>
 8008c44:	4603      	mov	r3, r0
 8008c46:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8008c48:	7ffb      	ldrb	r3, [r7, #31]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d13c      	bne.n	8008cc8 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10e      	bne.n	8008c74 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	2102      	movs	r1, #2
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fd17 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008c72:	e029      	b.n	8008cc8 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d103      	bne.n	8008c84 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2204      	movs	r2, #4
 8008c80:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8008c82:	e021      	b.n	8008cc8 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d10b      	bne.n	8008ca4 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c90:	2b24      	cmp	r3, #36	; 0x24
 8008c92:	d103      	bne.n	8008c9c <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2204      	movs	r2, #4
 8008c98:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8008c9a:	e015      	b.n	8008cc8 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2214      	movs	r2, #20
 8008ca0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8008ca2:	e011      	b.n	8008cc8 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca8:	2b14      	cmp	r3, #20
 8008caa:	d103      	bne.n	8008cb4 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2204      	movs	r2, #4
 8008cb0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8008cb2:	e009      	b.n	8008cc8 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2224      	movs	r2, #36	; 0x24
 8008cb8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8008cba:	e005      	b.n	8008cc8 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2210      	movs	r2, #16
 8008cc4:	649a      	str	r2, [r3, #72]	; 0x48
 8008cc6:	e000      	b.n	8008cca <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8008cc8:	bf00      	nop
  }

  /* Return function status */
  return status;
 8008cca:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3720      	adds	r7, #32
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	; 0x28
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008ce0:	f7fd fdf6 	bl	80068d0 <HAL_GetTick>
 8008ce4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3350      	adds	r3, #80	; 0x50
 8008cec:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d105      	bne.n	8008d00 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	649a      	str	r2, [r3, #72]	; 0x48
 8008cfe:	e057      	b.n	8008db0 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d14e      	bne.n	8008da6 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	1c5a      	adds	r2, r3, #1
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008d30:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	2104      	movs	r1, #4
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 fca9 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008d42:	4603      	mov	r3, r0
 8008d44:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8008d46:	7ffb      	ldrb	r3, [r7, #31]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d113      	bne.n	8008d74 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d50:	781a      	ldrb	r2, [r3, #0]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d64:	1e5a      	subs	r2, r3, #1
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1df      	bne.n	8008d32 <HAL_OSPI_Transmit+0x5e>
 8008d72:	e000      	b.n	8008d76 <HAL_OSPI_Transmit+0xa2>
          break;
 8008d74:	bf00      	nop

      if (status == HAL_OK)
 8008d76:	7ffb      	ldrb	r3, [r7, #31]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d119      	bne.n	8008db0 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	2201      	movs	r2, #1
 8008d84:	2102      	movs	r1, #2
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fc84 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8008d90:	7ffb      	ldrb	r3, [r7, #31]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10c      	bne.n	8008db0 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2202      	movs	r2, #2
 8008da2:	645a      	str	r2, [r3, #68]	; 0x44
 8008da4:	e004      	b.n	8008db0 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2210      	movs	r2, #16
 8008dae:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8008db0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3720      	adds	r7, #32
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b08c      	sub	sp, #48	; 0x30
 8008dbe:	af02      	add	r7, sp, #8
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008dc6:	f7fd fd83 	bl	80068d0 <HAL_GetTick>
 8008dca:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3350      	adds	r3, #80	; 0x50
 8008dd2:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dda:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008de4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d106      	bne.n	8008dfa <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2208      	movs	r2, #8
 8008df6:	649a      	str	r2, [r3, #72]	; 0x48
 8008df8:	e07c      	b.n	8008ef4 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d172      	bne.n	8008ee8 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008e2e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e38:	d104      	bne.n	8008e44 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	649a      	str	r2, [r3, #72]	; 0x48
 8008e42:	e011      	b.n	8008e68 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	649a      	str	r2, [r3, #72]	; 0x48
 8008e5c:	e004      	b.n	8008e68 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	2106      	movs	r1, #6
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 fc0e 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8008e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d114      	bne.n	8008eb0 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	7812      	ldrb	r2, [r2, #0]
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea0:	1e5a      	subs	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1dc      	bne.n	8008e68 <HAL_OSPI_Receive+0xae>
 8008eae:	e000      	b.n	8008eb2 <HAL_OSPI_Receive+0xf8>
          break;
 8008eb0:	bf00      	nop

      if (status == HAL_OK)
 8008eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d11c      	bne.n	8008ef4 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	2102      	movs	r1, #2
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 fbe5 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8008ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10d      	bne.n	8008ef4 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2202      	movs	r2, #2
 8008ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	645a      	str	r2, [r3, #68]	; 0x44
 8008ee6:	e005      	b.n	8008ef4 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2210      	movs	r2, #16
 8008ef2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8008ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3728      	adds	r7, #40	; 0x28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08a      	sub	sp, #40	; 0x28
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008f0c:	f7fd fce0 	bl	80068d0 <HAL_GetTick>
 8008f10:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f18:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008f22:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d164      	bne.n	8008ff6 <HAL_OSPI_AutoPolling+0xf6>
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f34:	d15f      	bne.n	8008ff6 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2120      	movs	r1, #32
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 fba7 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008f46:	4603      	mov	r3, r0
 8008f48:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8008f4a:	7ffb      	ldrb	r3, [r7, #31]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d158      	bne.n	8009002 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	6852      	ldr	r2, [r2, #4]
 8008f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	6912      	ldr	r2, [r2, #16]
 8008f70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6899      	ldr	r1, [r3, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	430b      	orrs	r3, r1
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008f92:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f9c:	d104      	bne.n	8008fa8 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	649a      	str	r2, [r3, #72]	; 0x48
 8008fa6:	e011      	b.n	8008fcc <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d004      	beq.n	8008fc2 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	649a      	str	r2, [r3, #72]	; 0x48
 8008fc0:	e004      	b.n	8008fcc <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	2108      	movs	r1, #8
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 fb5c 	bl	8009694 <OSPI_WaitFlagStateUntilTimeout>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8008fe0:	7ffb      	ldrb	r3, [r7, #31]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10d      	bne.n	8009002 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2208      	movs	r2, #8
 8008fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8008ff4:	e005      	b.n	8009002 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2210      	movs	r2, #16
 8008ffe:	649a      	str	r2, [r3, #72]	; 0x48
 8009000:	e000      	b.n	8009004 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8009002:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009004:	7ffb      	ldrb	r3, [r7, #31]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3720      	adds	r7, #32
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b092      	sub	sp, #72	; 0x48
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a08      	ldr	r2, [pc, #32]	; (800906c <HAL_OSPIM_Config+0x40>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d105      	bne.n	800905a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8009052:	2301      	movs	r3, #1
 8009054:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009058:	e004      	b.n	8009064 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800905a:	2301      	movs	r3, #1
 800905c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009064:	2300      	movs	r3, #0
 8009066:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800906a:	e01f      	b.n	80090ac <HAL_OSPIM_Config+0x80>
 800906c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8009070:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009074:	3301      	adds	r3, #1
 8009076:	b2d8      	uxtb	r0, r3
 8009078:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800907c:	f107 0114 	add.w	r1, r7, #20
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	440b      	add	r3, r1
 800908a:	4619      	mov	r1, r3
 800908c:	f000 fc9c 	bl	80099c8 <OSPIM_GetConfig>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d005      	beq.n	80090a2 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2208      	movs	r2, #8
 80090a0:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80090a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090a6:	3301      	adds	r3, #1
 80090a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80090ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d9dd      	bls.n	8009070 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80090b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f040 82de 	bne.w	800967a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80090be:	4bc6      	ldr	r3, [pc, #792]	; (80093d8 <HAL_OSPIM_Config+0x3ac>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00b      	beq.n	80090e2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80090ca:	4bc3      	ldr	r3, [pc, #780]	; (80093d8 <HAL_OSPIM_Config+0x3ac>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4ac2      	ldr	r2, [pc, #776]	; (80093d8 <HAL_OSPIM_Config+0x3ac>)
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80090d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80090da:	f043 0301 	orr.w	r3, r3, #1
 80090de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80090e2:	4bbe      	ldr	r3, [pc, #760]	; (80093dc <HAL_OSPIM_Config+0x3b0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80090ee:	4bbb      	ldr	r3, [pc, #748]	; (80093dc <HAL_OSPIM_Config+0x3b0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4aba      	ldr	r2, [pc, #744]	; (80093dc <HAL_OSPIM_Config+0x3b0>)
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80090fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80090fe:	f043 0302 	orr.w	r3, r3, #2
 8009102:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8009106:	49b6      	ldr	r1, [pc, #728]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 8009108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	3348      	adds	r3, #72	; 0x48
 8009114:	443b      	add	r3, r7
 8009116:	3b2c      	subs	r3, #44	; 0x2c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3b01      	subs	r3, #1
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	440b      	add	r3, r1
 8009120:	6859      	ldr	r1, [r3, #4]
 8009122:	48af      	ldr	r0, [pc, #700]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 8009124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	3348      	adds	r3, #72	; 0x48
 8009130:	443b      	add	r3, r7
 8009132:	3b2c      	subs	r3, #44	; 0x2c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3b01      	subs	r3, #1
 8009138:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4403      	add	r3, r0
 8009140:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8009142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	3348      	adds	r3, #72	; 0x48
 800914e:	443b      	add	r3, r7
 8009150:	3b34      	subs	r3, #52	; 0x34
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 80a1 	beq.w	800929c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800915a:	49a1      	ldr	r1, [pc, #644]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 800915c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	3348      	adds	r3, #72	; 0x48
 8009168:	443b      	add	r3, r7
 800916a:	3b34      	subs	r3, #52	; 0x34
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3b01      	subs	r3, #1
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	440b      	add	r3, r1
 8009174:	6859      	ldr	r1, [r3, #4]
 8009176:	489a      	ldr	r0, [pc, #616]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 8009178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	3348      	adds	r3, #72	; 0x48
 8009184:	443b      	add	r3, r7
 8009186:	3b34      	subs	r3, #52	; 0x34
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3b01      	subs	r3, #1
 800918c:	f021 0201 	bic.w	r2, r1, #1
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4403      	add	r3, r0
 8009194:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8009196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	3348      	adds	r3, #72	; 0x48
 80091a2:	443b      	add	r3, r7
 80091a4:	3b30      	subs	r3, #48	; 0x30
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01d      	beq.n	80091e8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80091ac:	498c      	ldr	r1, [pc, #560]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 80091ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091b0:	4613      	mov	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	3348      	adds	r3, #72	; 0x48
 80091ba:	443b      	add	r3, r7
 80091bc:	3b30      	subs	r3, #48	; 0x30
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	6859      	ldr	r1, [r3, #4]
 80091c8:	4885      	ldr	r0, [pc, #532]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 80091ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	3348      	adds	r3, #72	; 0x48
 80091d6:	443b      	add	r3, r7
 80091d8:	3b30      	subs	r3, #48	; 0x30
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3b01      	subs	r3, #1
 80091de:	f021 0210 	bic.w	r2, r1, #16
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4403      	add	r3, r0
 80091e6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80091e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	3348      	adds	r3, #72	; 0x48
 80091f4:	443b      	add	r3, r7
 80091f6:	3b28      	subs	r3, #40	; 0x28
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d021      	beq.n	8009242 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80091fe:	4978      	ldr	r1, [pc, #480]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 8009200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	3348      	adds	r3, #72	; 0x48
 800920c:	443b      	add	r3, r7
 800920e:	3b28      	subs	r3, #40	; 0x28
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3b01      	subs	r3, #1
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	6859      	ldr	r1, [r3, #4]
 800921e:	4870      	ldr	r0, [pc, #448]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 8009220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	3348      	adds	r3, #72	; 0x48
 800922c:	443b      	add	r3, r7
 800922e:	3b28      	subs	r3, #40	; 0x28
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3b01      	subs	r3, #1
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4403      	add	r3, r0
 8009240:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	3348      	adds	r3, #72	; 0x48
 800924e:	443b      	add	r3, r7
 8009250:	3b24      	subs	r3, #36	; 0x24
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d021      	beq.n	800929c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009258:	4961      	ldr	r1, [pc, #388]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 800925a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	3348      	adds	r3, #72	; 0x48
 8009266:	443b      	add	r3, r7
 8009268:	3b24      	subs	r3, #36	; 0x24
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3b01      	subs	r3, #1
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	6859      	ldr	r1, [r3, #4]
 8009278:	4859      	ldr	r0, [pc, #356]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 800927a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	3348      	adds	r3, #72	; 0x48
 8009286:	443b      	add	r3, r7
 8009288:	3b24      	subs	r3, #36	; 0x24
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3b01      	subs	r3, #1
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4403      	add	r3, r0
 800929a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6819      	ldr	r1, [r3, #0]
 80092a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	3348      	adds	r3, #72	; 0x48
 80092ae:	443b      	add	r3, r7
 80092b0:	3b34      	subs	r3, #52	; 0x34
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4299      	cmp	r1, r3
 80092b6:	d038      	beq.n	800932a <HAL_OSPIM_Config+0x2fe>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	6859      	ldr	r1, [r3, #4]
 80092bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	3348      	adds	r3, #72	; 0x48
 80092ca:	443b      	add	r3, r7
 80092cc:	3b30      	subs	r3, #48	; 0x30
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4299      	cmp	r1, r3
 80092d2:	d02a      	beq.n	800932a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	6899      	ldr	r1, [r3, #8]
 80092d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	3348      	adds	r3, #72	; 0x48
 80092e6:	443b      	add	r3, r7
 80092e8:	3b2c      	subs	r3, #44	; 0x2c
 80092ea:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80092ec:	4299      	cmp	r1, r3
 80092ee:	d01c      	beq.n	800932a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	68d9      	ldr	r1, [r3, #12]
 80092f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	3348      	adds	r3, #72	; 0x48
 8009302:	443b      	add	r3, r7
 8009304:	3b28      	subs	r3, #40	; 0x28
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4299      	cmp	r1, r3
 800930a:	d00e      	beq.n	800932a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	6919      	ldr	r1, [r3, #16]
 8009310:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	3348      	adds	r3, #72	; 0x48
 800931e:	443b      	add	r3, r7
 8009320:	3b24      	subs	r3, #36	; 0x24
 8009322:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009324:	4299      	cmp	r1, r3
 8009326:	f040 80d3 	bne.w	80094d0 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800932a:	492d      	ldr	r1, [pc, #180]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 800932c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	3348      	adds	r3, #72	; 0x48
 800933a:	443b      	add	r3, r7
 800933c:	3b34      	subs	r3, #52	; 0x34
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3b01      	subs	r3, #1
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	6859      	ldr	r1, [r3, #4]
 8009348:	4825      	ldr	r0, [pc, #148]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 800934a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	3348      	adds	r3, #72	; 0x48
 8009358:	443b      	add	r3, r7
 800935a:	3b34      	subs	r3, #52	; 0x34
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3b01      	subs	r3, #1
 8009360:	f021 0201 	bic.w	r2, r1, #1
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4403      	add	r3, r0
 8009368:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800936a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	3348      	adds	r3, #72	; 0x48
 8009378:	443b      	add	r3, r7
 800937a:	3b30      	subs	r3, #48	; 0x30
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d01f      	beq.n	80093c2 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8009382:	4917      	ldr	r1, [pc, #92]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 8009384:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	3348      	adds	r3, #72	; 0x48
 8009392:	443b      	add	r3, r7
 8009394:	3b30      	subs	r3, #48	; 0x30
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3b01      	subs	r3, #1
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	6859      	ldr	r1, [r3, #4]
 80093a0:	480f      	ldr	r0, [pc, #60]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 80093a2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	3348      	adds	r3, #72	; 0x48
 80093b0:	443b      	add	r3, r7
 80093b2:	3b30      	subs	r3, #48	; 0x30
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	f021 0210 	bic.w	r2, r1, #16
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4403      	add	r3, r0
 80093c0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80093c2:	4907      	ldr	r1, [pc, #28]	; (80093e0 <HAL_OSPIM_Config+0x3b4>)
 80093c4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	3348      	adds	r3, #72	; 0x48
 80093d2:	443b      	add	r3, r7
 80093d4:	3b2c      	subs	r3, #44	; 0x2c
 80093d6:	e005      	b.n	80093e4 <HAL_OSPIM_Config+0x3b8>
 80093d8:	a0001000 	.word	0xa0001000
 80093dc:	a0001400 	.word	0xa0001400
 80093e0:	50061c00 	.word	0x50061c00
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	6859      	ldr	r1, [r3, #4]
 80093ee:	48a6      	ldr	r0, [pc, #664]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80093f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80093f4:	4613      	mov	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	3348      	adds	r3, #72	; 0x48
 80093fe:	443b      	add	r3, r7
 8009400:	3b2c      	subs	r3, #44	; 0x2c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3b01      	subs	r3, #1
 8009406:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4403      	add	r3, r0
 800940e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009410:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	3348      	adds	r3, #72	; 0x48
 800941e:	443b      	add	r3, r7
 8009420:	3b28      	subs	r3, #40	; 0x28
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d023      	beq.n	8009470 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009428:	4997      	ldr	r1, [pc, #604]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 800942a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	3348      	adds	r3, #72	; 0x48
 8009438:	443b      	add	r3, r7
 800943a:	3b28      	subs	r3, #40	; 0x28
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3b01      	subs	r3, #1
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	6859      	ldr	r1, [r3, #4]
 800944a:	488f      	ldr	r0, [pc, #572]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 800944c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	3348      	adds	r3, #72	; 0x48
 800945a:	443b      	add	r3, r7
 800945c:	3b28      	subs	r3, #40	; 0x28
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3b01      	subs	r3, #1
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4403      	add	r3, r0
 800946e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009470:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8009474:	4613      	mov	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	3348      	adds	r3, #72	; 0x48
 800947e:	443b      	add	r3, r7
 8009480:	3b24      	subs	r3, #36	; 0x24
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d023      	beq.n	80094d0 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009488:	497f      	ldr	r1, [pc, #508]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 800948a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	3348      	adds	r3, #72	; 0x48
 8009498:	443b      	add	r3, r7
 800949a:	3b24      	subs	r3, #36	; 0x24
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3b01      	subs	r3, #1
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	6859      	ldr	r1, [r3, #4]
 80094aa:	4877      	ldr	r0, [pc, #476]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80094ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	3348      	adds	r3, #72	; 0x48
 80094ba:	443b      	add	r3, r7
 80094bc:	3b24      	subs	r3, #36	; 0x24
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4403      	add	r3, r0
 80094ce:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80094d0:	4a6d      	ldr	r2, [pc, #436]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e4:	025b      	lsls	r3, r3, #9
 80094e6:	431a      	orrs	r2, r3
 80094e8:	4967      	ldr	r1, [pc, #412]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80094fa:	4a63      	ldr	r2, [pc, #396]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3b01      	subs	r3, #1
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f023 0203 	bic.w	r2, r3, #3
 800950c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	431a      	orrs	r2, r3
 8009512:	495d      	ldr	r1, [pc, #372]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3b01      	subs	r3, #1
 800951a:	f042 0201 	orr.w	r2, r2, #1
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d014      	beq.n	8009556 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800952c:	4a56      	ldr	r2, [pc, #344]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	3b01      	subs	r3, #1
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800953e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009540:	015b      	lsls	r3, r3, #5
 8009542:	431a      	orrs	r2, r3
 8009544:	4950      	ldr	r1, [pc, #320]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	3b01      	subs	r3, #1
 800954c:	f042 0210 	orr.w	r2, r2, #16
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	440b      	add	r3, r1
 8009554:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d019      	beq.n	8009596 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009562:	4a49      	ldr	r2, [pc, #292]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	3b01      	subs	r3, #1
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957a:	049b      	lsls	r3, r3, #18
 800957c:	431a      	orrs	r2, r3
 800957e:	4942      	ldr	r1, [pc, #264]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	3b01      	subs	r3, #1
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	605a      	str	r2, [r3, #4]
 8009594:	e01c      	b.n	80095d0 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d018      	beq.n	80095d0 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800959e:	4a3a      	ldr	r2, [pc, #232]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b6:	069b      	lsls	r3, r3, #26
 80095b8:	431a      	orrs	r2, r3
 80095ba:	4933      	ldr	r1, [pc, #204]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	440b      	add	r3, r1
 80095ce:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d019      	beq.n	8009610 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80095dc:	4a2a      	ldr	r2, [pc, #168]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80095f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f4:	049b      	lsls	r3, r3, #18
 80095f6:	431a      	orrs	r2, r3
 80095f8:	4923      	ldr	r1, [pc, #140]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	3b01      	subs	r3, #1
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	605a      	str	r2, [r3, #4]
 800960e:	e01c      	b.n	800964a <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d018      	beq.n	800964a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009618:	4a1b      	ldr	r2, [pc, #108]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	3b01      	subs	r3, #1
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800962e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009630:	069b      	lsls	r3, r3, #26
 8009632:	431a      	orrs	r2, r3
 8009634:	4914      	ldr	r1, [pc, #80]	; (8009688 <HAL_OSPIM_Config+0x65c>)
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	3b01      	subs	r3, #1
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	440b      	add	r3, r1
 8009648:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800964a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009656:	4b0d      	ldr	r3, [pc, #52]	; (800968c <HAL_OSPIM_Config+0x660>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a0c      	ldr	r2, [pc, #48]	; (800968c <HAL_OSPIM_Config+0x660>)
 800965c:	f043 0301 	orr.w	r3, r3, #1
 8009660:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8009662:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d005      	beq.n	800967a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800966e:	4b08      	ldr	r3, [pc, #32]	; (8009690 <HAL_OSPIM_Config+0x664>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a07      	ldr	r2, [pc, #28]	; (8009690 <HAL_OSPIM_Config+0x664>)
 8009674:	f043 0301 	orr.w	r3, r3, #1
 8009678:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800967a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800967e:	4618      	mov	r0, r3
 8009680:	3748      	adds	r7, #72	; 0x48
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	50061c00 	.word	0x50061c00
 800968c:	a0001000 	.word	0xa0001000
 8009690:	a0001400 	.word	0xa0001400

08009694 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80096a4:	e01a      	b.n	80096dc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d016      	beq.n	80096dc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ae:	f7fd f90f 	bl	80068d0 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d302      	bcc.n	80096c4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10b      	bne.n	80096dc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096ca:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d0:	f043 0201 	orr.w	r2, r3, #1
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e00e      	b.n	80096fa <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6a1a      	ldr	r2, [r3, #32]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	4013      	ands	r3, r2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bf14      	ite	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	2300      	moveq	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	461a      	mov	r2, r3
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d1d6      	bne.n	80096a6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8009704:	b480      	push	{r7}
 8009706:	b089      	sub	sp, #36	; 0x24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009720:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b02      	cmp	r3, #2
 8009746:	d114      	bne.n	8009772 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009750:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800975a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009764:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	e013      	b.n	800979a <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800977a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8009784:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800978e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009798:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a2:	431a      	orrs	r2, r3
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d012      	beq.n	80097d6 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c8:	4319      	orrs	r1, r3
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	430b      	orrs	r3, r1
 80097d0:	431a      	orrs	r2, r3
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f023 021f 	bic.w	r2, r3, #31
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e2:	431a      	orrs	r2, r3
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d009      	beq.n	8009804 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d105      	bne.n	8009804 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3a01      	subs	r2, #1
 8009802:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8099 	beq.w	8009940 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d055      	beq.n	80098c2 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	2b00      	cmp	r3, #0
 800981c:	d01e      	beq.n	800985c <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4b68      	ldr	r3, [pc, #416]	; (80099c4 <OSPI_ConfigCmd+0x2c0>)
 8009824:	4013      	ands	r3, r2
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	68d1      	ldr	r1, [r2, #12]
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	6952      	ldr	r2, [r2, #20]
 800982e:	4311      	orrs	r1, r2
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	6912      	ldr	r2, [r2, #16]
 8009834:	4311      	orrs	r1, r2
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	69d2      	ldr	r2, [r2, #28]
 800983a:	4311      	orrs	r1, r2
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009840:	4311      	orrs	r1, r2
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	6a12      	ldr	r2, [r2, #32]
 8009846:	4311      	orrs	r1, r2
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800984c:	4311      	orrs	r1, r2
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009852:	430a      	orrs	r2, r1
 8009854:	431a      	orrs	r2, r3
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e028      	b.n	80098ae <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	68d1      	ldr	r1, [r2, #12]
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	6952      	ldr	r2, [r2, #20]
 8009870:	4311      	orrs	r1, r2
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	6912      	ldr	r2, [r2, #16]
 8009876:	4311      	orrs	r1, r2
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	69d2      	ldr	r2, [r2, #28]
 800987c:	4311      	orrs	r1, r2
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009882:	4311      	orrs	r1, r2
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	6a12      	ldr	r2, [r2, #32]
 8009888:	430a      	orrs	r2, r1
 800988a:	431a      	orrs	r2, r3
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009898:	d109      	bne.n	80098ae <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d105      	bne.n	80098ae <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	6992      	ldr	r2, [r2, #24]
 80098be:	649a      	str	r2, [r3, #72]	; 0x48
 80098c0:	e078      	b.n	80099b4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d017      	beq.n	80098fa <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80098d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	68d1      	ldr	r1, [r2, #12]
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	6952      	ldr	r2, [r2, #20]
 80098de:	4311      	orrs	r1, r2
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	6912      	ldr	r2, [r2, #16]
 80098e4:	4311      	orrs	r1, r2
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098ea:	4311      	orrs	r1, r2
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80098f0:	430a      	orrs	r2, r1
 80098f2:	431a      	orrs	r2, r3
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	e01d      	b.n	8009936 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	68d9      	ldr	r1, [r3, #12]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	4319      	orrs	r1, r3
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	430b      	orrs	r3, r1
 8009912:	431a      	orrs	r2, r3
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009920:	d109      	bne.n	8009936 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009926:	2b08      	cmp	r3, #8
 8009928:	d105      	bne.n	8009936 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	689a      	ldr	r2, [r3, #8]
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e039      	b.n	80099b4 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d030      	beq.n	80099aa <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994c:	2b00      	cmp	r3, #0
 800994e:	d017      	beq.n	8009980 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8009958:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	69d1      	ldr	r1, [r2, #28]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009964:	4311      	orrs	r1, r2
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	6a12      	ldr	r2, [r2, #32]
 800996a:	4311      	orrs	r1, r2
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009970:	4311      	orrs	r1, r2
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009976:	430a      	orrs	r2, r1
 8009978:	431a      	orrs	r2, r3
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	e00e      	b.n	800999e <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	69d9      	ldr	r1, [r3, #28]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	4319      	orrs	r1, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	430b      	orrs	r3, r1
 8009998:	431a      	orrs	r2, r3
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	6992      	ldr	r2, [r2, #24]
 80099a6:	649a      	str	r2, [r3, #72]	; 0x48
 80099a8:	e004      	b.n	80099b4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2208      	movs	r2, #8
 80099b2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80099b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3724      	adds	r7, #36	; 0x24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	f0ffc0c0 	.word	0xf0ffc0c0

080099c8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	6039      	str	r1, [r7, #0]
 80099d2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d005      	beq.n	80099ee <OSPIM_GetConfig+0x26>
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d802      	bhi.n	80099ee <OSPIM_GetConfig+0x26>
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d102      	bne.n	80099f4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	75fb      	strb	r3, [r7, #23]
 80099f2:	e08e      	b.n	8009b12 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2200      	movs	r2, #0
 80099fe:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2200      	movs	r2, #0
 8009a04:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8009a12:	79fb      	ldrb	r3, [r7, #7]
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d101      	bne.n	8009a1c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8009a18:	4b41      	ldr	r3, [pc, #260]	; (8009b20 <OSPIM_GetConfig+0x158>)
 8009a1a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	e074      	b.n	8009b0c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8009a22:	4a40      	ldr	r2, [pc, #256]	; (8009b24 <OSPIM_GetConfig+0x15c>)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00a      	beq.n	8009a4e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	4053      	eors	r3, r2
 8009a3e:	f003 0302 	and.w	r3, r3, #2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00a      	beq.n	8009a6e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	4053      	eors	r3, r2
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d103      	bne.n	8009a6e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	4053      	eors	r3, r2
 8009a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d103      	bne.n	8009a8e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d018      	beq.n	8009aca <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	4053      	eors	r3, r2
 8009a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d111      	bne.n	8009aca <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d106      	bne.n	8009abe <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	60da      	str	r2, [r3, #12]
 8009abc:	e005      	b.n	8009aca <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d018      	beq.n	8009b06 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	4053      	eors	r3, r2
 8009ada:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d111      	bne.n	8009b06 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d106      	bne.n	8009afa <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	611a      	str	r2, [r3, #16]
 8009af8:	e005      	b.n	8009b06 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d987      	bls.n	8009a22 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	371c      	adds	r7, #28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	04040222 	.word	0x04040222
 8009b24:	50061c00 	.word	0x50061c00

08009b28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b38:	d102      	bne.n	8009b40 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b3e:	e00b      	b.n	8009b58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8009b40:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b4e:	d102      	bne.n	8009b56 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8009b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b54:	e000      	b.n	8009b58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8009b56:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40007000 	.word	0x40007000

08009b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d141      	bne.n	8009bfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009b76:	4b4b      	ldr	r3, [pc, #300]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b82:	d131      	bne.n	8009be8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009b84:	4b47      	ldr	r3, [pc, #284]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b8a:	4a46      	ldr	r2, [pc, #280]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b94:	4b43      	ldr	r3, [pc, #268]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009b9c:	4a41      	ldr	r2, [pc, #260]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ba2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009ba4:	4b40      	ldr	r3, [pc, #256]	; (8009ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2232      	movs	r2, #50	; 0x32
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	4a3f      	ldr	r2, [pc, #252]	; (8009cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb4:	0c9b      	lsrs	r3, r3, #18
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009bba:	e002      	b.n	8009bc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009bc2:	4b38      	ldr	r3, [pc, #224]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bce:	d102      	bne.n	8009bd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1f2      	bne.n	8009bbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009bd6:	4b33      	ldr	r3, [pc, #204]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be2:	d158      	bne.n	8009c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e057      	b.n	8009c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009be8:	4b2e      	ldr	r3, [pc, #184]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bee:	4a2d      	ldr	r2, [pc, #180]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009bf8:	e04d      	b.n	8009c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c00:	d141      	bne.n	8009c86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009c02:	4b28      	ldr	r3, [pc, #160]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c0e:	d131      	bne.n	8009c74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009c10:	4b24      	ldr	r3, [pc, #144]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c16:	4a23      	ldr	r2, [pc, #140]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c20:	4b20      	ldr	r3, [pc, #128]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c28:	4a1e      	ldr	r2, [pc, #120]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009c30:	4b1d      	ldr	r3, [pc, #116]	; (8009ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2232      	movs	r2, #50	; 0x32
 8009c36:	fb02 f303 	mul.w	r3, r2, r3
 8009c3a:	4a1c      	ldr	r2, [pc, #112]	; (8009cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c40:	0c9b      	lsrs	r3, r3, #18
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c46:	e002      	b.n	8009c4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c4e:	4b15      	ldr	r3, [pc, #84]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c5a:	d102      	bne.n	8009c62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1f2      	bne.n	8009c48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c62:	4b10      	ldr	r3, [pc, #64]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c6e:	d112      	bne.n	8009c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e011      	b.n	8009c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009c74:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c7a:	4a0a      	ldr	r2, [pc, #40]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009c84:	e007      	b.n	8009c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009c86:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c8e:	4a05      	ldr	r2, [pc, #20]	; (8009ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c94:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	40007000 	.word	0x40007000
 8009ca8:	200001b8 	.word	0x200001b8
 8009cac:	431bde83 	.word	0x431bde83

08009cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d102      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f000 bc16 	b.w	800a4f0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cc4:	4b96      	ldr	r3, [pc, #600]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f003 030c 	and.w	r3, r3, #12
 8009ccc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009cce:	4b94      	ldr	r3, [pc, #592]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80e4 	beq.w	8009eae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <HAL_RCC_OscConfig+0x4c>
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	2b0c      	cmp	r3, #12
 8009cf0:	f040 808b 	bne.w	8009e0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	f040 8087 	bne.w	8009e0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009cfc:	4b88      	ldr	r3, [pc, #544]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <HAL_RCC_OscConfig+0x64>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e3ed      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a1a      	ldr	r2, [r3, #32]
 8009d18:	4b81      	ldr	r3, [pc, #516]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0308 	and.w	r3, r3, #8
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d004      	beq.n	8009d2e <HAL_RCC_OscConfig+0x7e>
 8009d24:	4b7e      	ldr	r3, [pc, #504]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d2c:	e005      	b.n	8009d3a <HAL_RCC_OscConfig+0x8a>
 8009d2e:	4b7c      	ldr	r3, [pc, #496]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d34:	091b      	lsrs	r3, r3, #4
 8009d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d223      	bcs.n	8009d86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fdfc 	bl	800a940 <RCC_SetFlashLatencyFromMSIRange>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e3ce      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d52:	4b73      	ldr	r3, [pc, #460]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a72      	ldr	r2, [pc, #456]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d58:	f043 0308 	orr.w	r3, r3, #8
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	4b70      	ldr	r3, [pc, #448]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	496d      	ldr	r1, [pc, #436]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d70:	4b6b      	ldr	r3, [pc, #428]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	021b      	lsls	r3, r3, #8
 8009d7e:	4968      	ldr	r1, [pc, #416]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	604b      	str	r3, [r1, #4]
 8009d84:	e025      	b.n	8009dd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d86:	4b66      	ldr	r3, [pc, #408]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a65      	ldr	r2, [pc, #404]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d8c:	f043 0308 	orr.w	r3, r3, #8
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	4b63      	ldr	r3, [pc, #396]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	4960      	ldr	r1, [pc, #384]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009da4:	4b5e      	ldr	r3, [pc, #376]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	495b      	ldr	r1, [pc, #364]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d109      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 fdbc 	bl	800a940 <RCC_SetFlashLatencyFromMSIRange>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e38e      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009dd2:	f000 fcbf 	bl	800a754 <HAL_RCC_GetSysClockFreq>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	4b51      	ldr	r3, [pc, #324]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	091b      	lsrs	r3, r3, #4
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	4950      	ldr	r1, [pc, #320]	; (8009f24 <HAL_RCC_OscConfig+0x274>)
 8009de4:	5ccb      	ldrb	r3, [r1, r3]
 8009de6:	f003 031f 	and.w	r3, r3, #31
 8009dea:	fa22 f303 	lsr.w	r3, r2, r3
 8009dee:	4a4e      	ldr	r2, [pc, #312]	; (8009f28 <HAL_RCC_OscConfig+0x278>)
 8009df0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009df2:	4b4e      	ldr	r3, [pc, #312]	; (8009f2c <HAL_RCC_OscConfig+0x27c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fc fa7e 	bl	80062f8 <HAL_InitTick>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d052      	beq.n	8009eac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	e372      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d032      	beq.n	8009e78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009e12:	4b43      	ldr	r3, [pc, #268]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a42      	ldr	r2, [pc, #264]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e18:	f043 0301 	orr.w	r3, r3, #1
 8009e1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009e1e:	f7fc fd57 	bl	80068d0 <HAL_GetTick>
 8009e22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e24:	e008      	b.n	8009e38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e26:	f7fc fd53 	bl	80068d0 <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d901      	bls.n	8009e38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e35b      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e38:	4b39      	ldr	r3, [pc, #228]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0f0      	beq.n	8009e26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009e44:	4b36      	ldr	r3, [pc, #216]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a35      	ldr	r2, [pc, #212]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e4a:	f043 0308 	orr.w	r3, r3, #8
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	4b33      	ldr	r3, [pc, #204]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	4930      	ldr	r1, [pc, #192]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e62:	4b2f      	ldr	r3, [pc, #188]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	492b      	ldr	r1, [pc, #172]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	604b      	str	r3, [r1, #4]
 8009e76:	e01a      	b.n	8009eae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009e78:	4b29      	ldr	r3, [pc, #164]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a28      	ldr	r2, [pc, #160]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009e84:	f7fc fd24 	bl	80068d0 <HAL_GetTick>
 8009e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e8a:	e008      	b.n	8009e9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e8c:	f7fc fd20 	bl	80068d0 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d901      	bls.n	8009e9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e328      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e9e:	4b20      	ldr	r3, [pc, #128]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1f0      	bne.n	8009e8c <HAL_RCC_OscConfig+0x1dc>
 8009eaa:	e000      	b.n	8009eae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d073      	beq.n	8009fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d005      	beq.n	8009ecc <HAL_RCC_OscConfig+0x21c>
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	2b0c      	cmp	r3, #12
 8009ec4:	d10e      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d10b      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ecc:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d063      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x2f0>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d15f      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e305      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eec:	d106      	bne.n	8009efc <HAL_RCC_OscConfig+0x24c>
 8009eee:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a0b      	ldr	r2, [pc, #44]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ef8:	6013      	str	r3, [r2, #0]
 8009efa:	e025      	b.n	8009f48 <HAL_RCC_OscConfig+0x298>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f04:	d114      	bne.n	8009f30 <HAL_RCC_OscConfig+0x280>
 8009f06:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a05      	ldr	r2, [pc, #20]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a02      	ldr	r2, [pc, #8]	; (8009f20 <HAL_RCC_OscConfig+0x270>)
 8009f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	e013      	b.n	8009f48 <HAL_RCC_OscConfig+0x298>
 8009f20:	40021000 	.word	0x40021000
 8009f24:	0800e374 	.word	0x0800e374
 8009f28:	200001b8 	.word	0x200001b8
 8009f2c:	200001f0 	.word	0x200001f0
 8009f30:	4ba0      	ldr	r3, [pc, #640]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a9f      	ldr	r2, [pc, #636]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	4b9d      	ldr	r3, [pc, #628]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a9c      	ldr	r2, [pc, #624]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d013      	beq.n	8009f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f50:	f7fc fcbe 	bl	80068d0 <HAL_GetTick>
 8009f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f56:	e008      	b.n	8009f6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f58:	f7fc fcba 	bl	80068d0 <HAL_GetTick>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	2b64      	cmp	r3, #100	; 0x64
 8009f64:	d901      	bls.n	8009f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e2c2      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f6a:	4b92      	ldr	r3, [pc, #584]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d0f0      	beq.n	8009f58 <HAL_RCC_OscConfig+0x2a8>
 8009f76:	e014      	b.n	8009fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f78:	f7fc fcaa 	bl	80068d0 <HAL_GetTick>
 8009f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f7e:	e008      	b.n	8009f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f80:	f7fc fca6 	bl	80068d0 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b64      	cmp	r3, #100	; 0x64
 8009f8c:	d901      	bls.n	8009f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e2ae      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f92:	4b88      	ldr	r3, [pc, #544]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1f0      	bne.n	8009f80 <HAL_RCC_OscConfig+0x2d0>
 8009f9e:	e000      	b.n	8009fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0302 	and.w	r3, r3, #2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d060      	beq.n	800a070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	2b04      	cmp	r3, #4
 8009fb2:	d005      	beq.n	8009fc0 <HAL_RCC_OscConfig+0x310>
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	2b0c      	cmp	r3, #12
 8009fb8:	d119      	bne.n	8009fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d116      	bne.n	8009fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fc0:	4b7c      	ldr	r3, [pc, #496]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x328>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e28b      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fd8:	4b76      	ldr	r3, [pc, #472]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	061b      	lsls	r3, r3, #24
 8009fe6:	4973      	ldr	r1, [pc, #460]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fec:	e040      	b.n	800a070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d023      	beq.n	800a03e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ff6:	4b6f      	ldr	r3, [pc, #444]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a6e      	ldr	r2, [pc, #440]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 8009ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a002:	f7fc fc65 	bl	80068d0 <HAL_GetTick>
 800a006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a008:	e008      	b.n	800a01c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a00a:	f7fc fc61 	bl	80068d0 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	2b02      	cmp	r3, #2
 800a016:	d901      	bls.n	800a01c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e269      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a01c:	4b65      	ldr	r3, [pc, #404]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0f0      	beq.n	800a00a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a028:	4b62      	ldr	r3, [pc, #392]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	061b      	lsls	r3, r3, #24
 800a036:	495f      	ldr	r1, [pc, #380]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a038:	4313      	orrs	r3, r2
 800a03a:	604b      	str	r3, [r1, #4]
 800a03c:	e018      	b.n	800a070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a03e:	4b5d      	ldr	r3, [pc, #372]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a5c      	ldr	r2, [pc, #368]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a04a:	f7fc fc41 	bl	80068d0 <HAL_GetTick>
 800a04e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a050:	e008      	b.n	800a064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a052:	f7fc fc3d 	bl	80068d0 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d901      	bls.n	800a064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e245      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a064:	4b53      	ldr	r3, [pc, #332]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1f0      	bne.n	800a052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d03c      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d01c      	beq.n	800a0be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a084:	4b4b      	ldr	r3, [pc, #300]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a08a:	4a4a      	ldr	r2, [pc, #296]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a08c:	f043 0301 	orr.w	r3, r3, #1
 800a090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a094:	f7fc fc1c 	bl	80068d0 <HAL_GetTick>
 800a098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a09a:	e008      	b.n	800a0ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a09c:	f7fc fc18 	bl	80068d0 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d901      	bls.n	800a0ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e220      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a0ae:	4b41      	ldr	r3, [pc, #260]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a0b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0b4:	f003 0302 	and.w	r3, r3, #2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0ef      	beq.n	800a09c <HAL_RCC_OscConfig+0x3ec>
 800a0bc:	e01b      	b.n	800a0f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0be:	4b3d      	ldr	r3, [pc, #244]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a0c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0c4:	4a3b      	ldr	r2, [pc, #236]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0ce:	f7fc fbff 	bl	80068d0 <HAL_GetTick>
 800a0d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0d4:	e008      	b.n	800a0e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0d6:	f7fc fbfb 	bl	80068d0 <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d901      	bls.n	800a0e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e203      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0e8:	4b32      	ldr	r3, [pc, #200]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a0ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1ef      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0304 	and.w	r3, r3, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 80a6 	beq.w	800a250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a104:	2300      	movs	r3, #0
 800a106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a108:	4b2a      	ldr	r3, [pc, #168]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10d      	bne.n	800a130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a114:	4b27      	ldr	r3, [pc, #156]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a118:	4a26      	ldr	r2, [pc, #152]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a11a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a11e:	6593      	str	r3, [r2, #88]	; 0x58
 800a120:	4b24      	ldr	r3, [pc, #144]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a128:	60bb      	str	r3, [r7, #8]
 800a12a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a12c:	2301      	movs	r3, #1
 800a12e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a130:	4b21      	ldr	r3, [pc, #132]	; (800a1b8 <HAL_RCC_OscConfig+0x508>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d118      	bne.n	800a16e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a13c:	4b1e      	ldr	r3, [pc, #120]	; (800a1b8 <HAL_RCC_OscConfig+0x508>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a1d      	ldr	r2, [pc, #116]	; (800a1b8 <HAL_RCC_OscConfig+0x508>)
 800a142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a148:	f7fc fbc2 	bl	80068d0 <HAL_GetTick>
 800a14c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a14e:	e008      	b.n	800a162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a150:	f7fc fbbe 	bl	80068d0 <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d901      	bls.n	800a162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e1c6      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a162:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <HAL_RCC_OscConfig+0x508>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0f0      	beq.n	800a150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d108      	bne.n	800a188 <HAL_RCC_OscConfig+0x4d8>
 800a176:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a17c:	4a0d      	ldr	r2, [pc, #52]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a17e:	f043 0301 	orr.w	r3, r3, #1
 800a182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a186:	e029      	b.n	800a1dc <HAL_RCC_OscConfig+0x52c>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	2b05      	cmp	r3, #5
 800a18e:	d115      	bne.n	800a1bc <HAL_RCC_OscConfig+0x50c>
 800a190:	4b08      	ldr	r3, [pc, #32]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a196:	4a07      	ldr	r2, [pc, #28]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a198:	f043 0304 	orr.w	r3, r3, #4
 800a19c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a1a0:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a6:	4a03      	ldr	r2, [pc, #12]	; (800a1b4 <HAL_RCC_OscConfig+0x504>)
 800a1a8:	f043 0301 	orr.w	r3, r3, #1
 800a1ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a1b0:	e014      	b.n	800a1dc <HAL_RCC_OscConfig+0x52c>
 800a1b2:	bf00      	nop
 800a1b4:	40021000 	.word	0x40021000
 800a1b8:	40007000 	.word	0x40007000
 800a1bc:	4b9d      	ldr	r3, [pc, #628]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c2:	4a9c      	ldr	r2, [pc, #624]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a1c4:	f023 0301 	bic.w	r3, r3, #1
 800a1c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a1cc:	4b99      	ldr	r3, [pc, #612]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d2:	4a98      	ldr	r2, [pc, #608]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a1d4:	f023 0304 	bic.w	r3, r3, #4
 800a1d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d016      	beq.n	800a212 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e4:	f7fc fb74 	bl	80068d0 <HAL_GetTick>
 800a1e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1ea:	e00a      	b.n	800a202 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ec:	f7fc fb70 	bl	80068d0 <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d901      	bls.n	800a202 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e176      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a202:	4b8c      	ldr	r3, [pc, #560]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0ed      	beq.n	800a1ec <HAL_RCC_OscConfig+0x53c>
 800a210:	e015      	b.n	800a23e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a212:	f7fc fb5d 	bl	80068d0 <HAL_GetTick>
 800a216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a218:	e00a      	b.n	800a230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a21a:	f7fc fb59 	bl	80068d0 <HAL_GetTick>
 800a21e:	4602      	mov	r2, r0
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	f241 3288 	movw	r2, #5000	; 0x1388
 800a228:	4293      	cmp	r3, r2
 800a22a:	d901      	bls.n	800a230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e15f      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a230:	4b80      	ldr	r3, [pc, #512]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1ed      	bne.n	800a21a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a23e:	7ffb      	ldrb	r3, [r7, #31]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d105      	bne.n	800a250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a244:	4b7b      	ldr	r3, [pc, #492]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a248:	4a7a      	ldr	r2, [pc, #488]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a24a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a24e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0320 	and.w	r3, r3, #32
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d03c      	beq.n	800a2d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	d01c      	beq.n	800a29e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a264:	4b73      	ldr	r3, [pc, #460]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a26a:	4a72      	ldr	r2, [pc, #456]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a26c:	f043 0301 	orr.w	r3, r3, #1
 800a270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a274:	f7fc fb2c 	bl	80068d0 <HAL_GetTick>
 800a278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a27a:	e008      	b.n	800a28e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a27c:	f7fc fb28 	bl	80068d0 <HAL_GetTick>
 800a280:	4602      	mov	r2, r0
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	2b02      	cmp	r3, #2
 800a288:	d901      	bls.n	800a28e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e130      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a28e:	4b69      	ldr	r3, [pc, #420]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a294:	f003 0302 	and.w	r3, r3, #2
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d0ef      	beq.n	800a27c <HAL_RCC_OscConfig+0x5cc>
 800a29c:	e01b      	b.n	800a2d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a29e:	4b65      	ldr	r3, [pc, #404]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a2a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2a4:	4a63      	ldr	r2, [pc, #396]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a2a6:	f023 0301 	bic.w	r3, r3, #1
 800a2aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2ae:	f7fc fb0f 	bl	80068d0 <HAL_GetTick>
 800a2b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a2b4:	e008      	b.n	800a2c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2b6:	f7fc fb0b 	bl	80068d0 <HAL_GetTick>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d901      	bls.n	800a2c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e113      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a2c8:	4b5a      	ldr	r3, [pc, #360]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a2ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1ef      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 8107 	beq.w	800a4ee <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	f040 80cf 	bne.w	800a488 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a2ea:	4b52      	ldr	r3, [pc, #328]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f003 0203 	and.w	r2, r3, #3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d12c      	bne.n	800a358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a308:	3b01      	subs	r3, #1
 800a30a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d123      	bne.n	800a358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d11b      	bne.n	800a358 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d113      	bne.n	800a358 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33a:	085b      	lsrs	r3, r3, #1
 800a33c:	3b01      	subs	r3, #1
 800a33e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a340:	429a      	cmp	r2, r3
 800a342:	d109      	bne.n	800a358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	085b      	lsrs	r3, r3, #1
 800a350:	3b01      	subs	r3, #1
 800a352:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a354:	429a      	cmp	r2, r3
 800a356:	d071      	beq.n	800a43c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	2b0c      	cmp	r3, #12
 800a35c:	d068      	beq.n	800a430 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a35e:	4b35      	ldr	r3, [pc, #212]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d105      	bne.n	800a376 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a36a:	4b32      	ldr	r3, [pc, #200]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e0ba      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a37a:	4b2e      	ldr	r3, [pc, #184]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a2d      	ldr	r2, [pc, #180]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a384:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a386:	f7fc faa3 	bl	80068d0 <HAL_GetTick>
 800a38a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a38c:	e008      	b.n	800a3a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a38e:	f7fc fa9f 	bl	80068d0 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d901      	bls.n	800a3a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e0a7      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3a0:	4b24      	ldr	r3, [pc, #144]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f0      	bne.n	800a38e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3ac:	4b21      	ldr	r3, [pc, #132]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	4b21      	ldr	r3, [pc, #132]	; (800a438 <HAL_RCC_OscConfig+0x788>)
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a3bc:	3a01      	subs	r2, #1
 800a3be:	0112      	lsls	r2, r2, #4
 800a3c0:	4311      	orrs	r1, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a3c6:	0212      	lsls	r2, r2, #8
 800a3c8:	4311      	orrs	r1, r2
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a3ce:	0852      	lsrs	r2, r2, #1
 800a3d0:	3a01      	subs	r2, #1
 800a3d2:	0552      	lsls	r2, r2, #21
 800a3d4:	4311      	orrs	r1, r2
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a3da:	0852      	lsrs	r2, r2, #1
 800a3dc:	3a01      	subs	r2, #1
 800a3de:	0652      	lsls	r2, r2, #25
 800a3e0:	4311      	orrs	r1, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a3e6:	06d2      	lsls	r2, r2, #27
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	4912      	ldr	r1, [pc, #72]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a0f      	ldr	r2, [pc, #60]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a3f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a406:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a408:	f7fc fa62 	bl	80068d0 <HAL_GetTick>
 800a40c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a40e:	e008      	b.n	800a422 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a410:	f7fc fa5e 	bl	80068d0 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d901      	bls.n	800a422 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e066      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a422:	4b04      	ldr	r3, [pc, #16]	; (800a434 <HAL_RCC_OscConfig+0x784>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0f0      	beq.n	800a410 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a42e:	e05e      	b.n	800a4ee <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e05d      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
 800a434:	40021000 	.word	0x40021000
 800a438:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a43c:	4b2e      	ldr	r3, [pc, #184]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d152      	bne.n	800a4ee <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a448:	4b2b      	ldr	r3, [pc, #172]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a2a      	ldr	r2, [pc, #168]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a44e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a454:	4b28      	ldr	r3, [pc, #160]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	4a27      	ldr	r2, [pc, #156]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a45a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a45e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a460:	f7fc fa36 	bl	80068d0 <HAL_GetTick>
 800a464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a466:	e008      	b.n	800a47a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a468:	f7fc fa32 	bl	80068d0 <HAL_GetTick>
 800a46c:	4602      	mov	r2, r0
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	2b02      	cmp	r3, #2
 800a474:	d901      	bls.n	800a47a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e03a      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a47a:	4b1f      	ldr	r3, [pc, #124]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0f0      	beq.n	800a468 <HAL_RCC_OscConfig+0x7b8>
 800a486:	e032      	b.n	800a4ee <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	2b0c      	cmp	r3, #12
 800a48c:	d02d      	beq.n	800a4ea <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a48e:	4b1a      	ldr	r3, [pc, #104]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a19      	ldr	r2, [pc, #100]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a498:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800a49a:	4b17      	ldr	r3, [pc, #92]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d105      	bne.n	800a4b2 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a4a6:	4b14      	ldr	r3, [pc, #80]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	4a13      	ldr	r2, [pc, #76]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a4b2:	4b11      	ldr	r3, [pc, #68]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	4a10      	ldr	r2, [pc, #64]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a4b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a4bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c2:	f7fc fa05 	bl	80068d0 <HAL_GetTick>
 800a4c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4c8:	e008      	b.n	800a4dc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4ca:	f7fc fa01 	bl	80068d0 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e009      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4dc:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <HAL_RCC_OscConfig+0x848>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1f0      	bne.n	800a4ca <HAL_RCC_OscConfig+0x81a>
 800a4e8:	e001      	b.n	800a4ee <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e000      	b.n	800a4f0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3720      	adds	r7, #32
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	40021000 	.word	0x40021000

0800a4fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a506:	2300      	movs	r3, #0
 800a508:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e10f      	b.n	800a734 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a514:	4b89      	ldr	r3, [pc, #548]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 030f 	and.w	r3, r3, #15
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d910      	bls.n	800a544 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a522:	4b86      	ldr	r3, [pc, #536]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f023 020f 	bic.w	r2, r3, #15
 800a52a:	4984      	ldr	r1, [pc, #528]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	4313      	orrs	r3, r2
 800a530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a532:	4b82      	ldr	r3, [pc, #520]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d001      	beq.n	800a544 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e0f7      	b.n	800a734 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 8089 	beq.w	800a664 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	2b03      	cmp	r3, #3
 800a558:	d133      	bne.n	800a5c2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a55a:	4b79      	ldr	r3, [pc, #484]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e0e4      	b.n	800a734 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a56a:	f000 fa43 	bl	800a9f4 <RCC_GetSysClockFreqFromPLLSource>
 800a56e:	4603      	mov	r3, r0
 800a570:	4a74      	ldr	r2, [pc, #464]	; (800a744 <HAL_RCC_ClockConfig+0x248>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d955      	bls.n	800a622 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a576:	4b72      	ldr	r3, [pc, #456]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a582:	4b6f      	ldr	r3, [pc, #444]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a58a:	4a6d      	ldr	r2, [pc, #436]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a590:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a592:	2380      	movs	r3, #128	; 0x80
 800a594:	617b      	str	r3, [r7, #20]
 800a596:	e044      	b.n	800a622 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0302 	and.w	r3, r3, #2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d03e      	beq.n	800a622 <HAL_RCC_ClockConfig+0x126>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d13a      	bne.n	800a622 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a5ac:	4b64      	ldr	r3, [pc, #400]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5b4:	4a62      	ldr	r2, [pc, #392]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a5bc:	2380      	movs	r3, #128	; 0x80
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	e02f      	b.n	800a622 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d107      	bne.n	800a5da <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5ca:	4b5d      	ldr	r3, [pc, #372]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d115      	bne.n	800a602 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e0ac      	b.n	800a734 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d107      	bne.n	800a5f2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a5e2:	4b57      	ldr	r3, [pc, #348]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e0a0      	b.n	800a734 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5f2:	4b53      	ldr	r3, [pc, #332]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e098      	b.n	800a734 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a602:	f000 f8a7 	bl	800a754 <HAL_RCC_GetSysClockFreq>
 800a606:	4603      	mov	r3, r0
 800a608:	4a4e      	ldr	r2, [pc, #312]	; (800a744 <HAL_RCC_ClockConfig+0x248>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d909      	bls.n	800a622 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a60e:	4b4c      	ldr	r3, [pc, #304]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a616:	4a4a      	ldr	r2, [pc, #296]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a61c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a61e:	2380      	movs	r3, #128	; 0x80
 800a620:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a622:	4b47      	ldr	r3, [pc, #284]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f023 0203 	bic.w	r2, r3, #3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	4944      	ldr	r1, [pc, #272]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a630:	4313      	orrs	r3, r2
 800a632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a634:	f7fc f94c 	bl	80068d0 <HAL_GetTick>
 800a638:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a63a:	e00a      	b.n	800a652 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a63c:	f7fc f948 	bl	80068d0 <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	f241 3288 	movw	r2, #5000	; 0x1388
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d901      	bls.n	800a652 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e070      	b.n	800a734 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a652:	4b3b      	ldr	r3, [pc, #236]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f003 020c 	and.w	r2, r3, #12
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	429a      	cmp	r2, r3
 800a662:	d1eb      	bne.n	800a63c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d009      	beq.n	800a684 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a670:	4b33      	ldr	r3, [pc, #204]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	4930      	ldr	r1, [pc, #192]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	608b      	str	r3, [r1, #8]
 800a682:	e008      	b.n	800a696 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	2b80      	cmp	r3, #128	; 0x80
 800a688:	d105      	bne.n	800a696 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a68a:	4b2d      	ldr	r3, [pc, #180]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	4a2c      	ldr	r2, [pc, #176]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a694:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a696:	4b29      	ldr	r3, [pc, #164]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 030f 	and.w	r3, r3, #15
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d210      	bcs.n	800a6c6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6a4:	4b25      	ldr	r3, [pc, #148]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f023 020f 	bic.w	r2, r3, #15
 800a6ac:	4923      	ldr	r1, [pc, #140]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6b4:	4b21      	ldr	r3, [pc, #132]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 030f 	and.w	r3, r3, #15
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d001      	beq.n	800a6c6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e036      	b.n	800a734 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0304 	and.w	r3, r3, #4
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d008      	beq.n	800a6e4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6d2:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	4918      	ldr	r1, [pc, #96]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0308 	and.w	r3, r3, #8
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d009      	beq.n	800a704 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a6f0:	4b13      	ldr	r3, [pc, #76]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	4910      	ldr	r1, [pc, #64]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a700:	4313      	orrs	r3, r2
 800a702:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a704:	f000 f826 	bl	800a754 <HAL_RCC_GetSysClockFreq>
 800a708:	4602      	mov	r2, r0
 800a70a:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	091b      	lsrs	r3, r3, #4
 800a710:	f003 030f 	and.w	r3, r3, #15
 800a714:	490c      	ldr	r1, [pc, #48]	; (800a748 <HAL_RCC_ClockConfig+0x24c>)
 800a716:	5ccb      	ldrb	r3, [r1, r3]
 800a718:	f003 031f 	and.w	r3, r3, #31
 800a71c:	fa22 f303 	lsr.w	r3, r2, r3
 800a720:	4a0a      	ldr	r2, [pc, #40]	; (800a74c <HAL_RCC_ClockConfig+0x250>)
 800a722:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <HAL_RCC_ClockConfig+0x254>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fb fde5 	bl	80062f8 <HAL_InitTick>
 800a72e:	4603      	mov	r3, r0
 800a730:	73fb      	strb	r3, [r7, #15]

  return status;
 800a732:	7bfb      	ldrb	r3, [r7, #15]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3718      	adds	r7, #24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	40022000 	.word	0x40022000
 800a740:	40021000 	.word	0x40021000
 800a744:	04c4b400 	.word	0x04c4b400
 800a748:	0800e374 	.word	0x0800e374
 800a74c:	200001b8 	.word	0x200001b8
 800a750:	200001f0 	.word	0x200001f0

0800a754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a754:	b480      	push	{r7}
 800a756:	b089      	sub	sp, #36	; 0x24
 800a758:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	2300      	movs	r3, #0
 800a760:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a762:	4b3e      	ldr	r3, [pc, #248]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f003 030c 	and.w	r3, r3, #12
 800a76a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a76c:	4b3b      	ldr	r3, [pc, #236]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f003 0303 	and.w	r3, r3, #3
 800a774:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <HAL_RCC_GetSysClockFreq+0x34>
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	2b0c      	cmp	r3, #12
 800a780:	d121      	bne.n	800a7c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d11e      	bne.n	800a7c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a788:	4b34      	ldr	r3, [pc, #208]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0308 	and.w	r3, r3, #8
 800a790:	2b00      	cmp	r3, #0
 800a792:	d107      	bne.n	800a7a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a794:	4b31      	ldr	r3, [pc, #196]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a79a:	0a1b      	lsrs	r3, r3, #8
 800a79c:	f003 030f 	and.w	r3, r3, #15
 800a7a0:	61fb      	str	r3, [r7, #28]
 800a7a2:	e005      	b.n	800a7b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a7a4:	4b2d      	ldr	r3, [pc, #180]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	091b      	lsrs	r3, r3, #4
 800a7aa:	f003 030f 	and.w	r3, r3, #15
 800a7ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a7b0:	4a2b      	ldr	r2, [pc, #172]	; (800a860 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10d      	bne.n	800a7dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a7c4:	e00a      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d102      	bne.n	800a7d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a7cc:	4b25      	ldr	r3, [pc, #148]	; (800a864 <HAL_RCC_GetSysClockFreq+0x110>)
 800a7ce:	61bb      	str	r3, [r7, #24]
 800a7d0:	e004      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	2b08      	cmp	r3, #8
 800a7d6:	d101      	bne.n	800a7dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a7d8:	4b23      	ldr	r3, [pc, #140]	; (800a868 <HAL_RCC_GetSysClockFreq+0x114>)
 800a7da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b0c      	cmp	r3, #12
 800a7e0:	d134      	bne.n	800a84c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a7e2:	4b1e      	ldr	r3, [pc, #120]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	f003 0303 	and.w	r3, r3, #3
 800a7ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d003      	beq.n	800a7fa <HAL_RCC_GetSysClockFreq+0xa6>
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d003      	beq.n	800a800 <HAL_RCC_GetSysClockFreq+0xac>
 800a7f8:	e005      	b.n	800a806 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a7fa:	4b1a      	ldr	r3, [pc, #104]	; (800a864 <HAL_RCC_GetSysClockFreq+0x110>)
 800a7fc:	617b      	str	r3, [r7, #20]
      break;
 800a7fe:	e005      	b.n	800a80c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a800:	4b19      	ldr	r3, [pc, #100]	; (800a868 <HAL_RCC_GetSysClockFreq+0x114>)
 800a802:	617b      	str	r3, [r7, #20]
      break;
 800a804:	e002      	b.n	800a80c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	617b      	str	r3, [r7, #20]
      break;
 800a80a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a80c:	4b13      	ldr	r3, [pc, #76]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	091b      	lsrs	r3, r3, #4
 800a812:	f003 030f 	and.w	r3, r3, #15
 800a816:	3301      	adds	r3, #1
 800a818:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a81a:	4b10      	ldr	r3, [pc, #64]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	0a1b      	lsrs	r3, r3, #8
 800a820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	fb03 f202 	mul.w	r2, r3, r2
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a830:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a832:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <HAL_RCC_GetSysClockFreq+0x108>)
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	0e5b      	lsrs	r3, r3, #25
 800a838:	f003 0303 	and.w	r3, r3, #3
 800a83c:	3301      	adds	r3, #1
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	fbb2 f3f3 	udiv	r3, r2, r3
 800a84a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a84c:	69bb      	ldr	r3, [r7, #24]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3724      	adds	r7, #36	; 0x24
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40021000 	.word	0x40021000
 800a860:	0800e38c 	.word	0x0800e38c
 800a864:	00f42400 	.word	0x00f42400
 800a868:	007a1200 	.word	0x007a1200

0800a86c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a86c:	b480      	push	{r7}
 800a86e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a870:	4b03      	ldr	r3, [pc, #12]	; (800a880 <HAL_RCC_GetHCLKFreq+0x14>)
 800a872:	681b      	ldr	r3, [r3, #0]
}
 800a874:	4618      	mov	r0, r3
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	200001b8 	.word	0x200001b8

0800a884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a888:	f7ff fff0 	bl	800a86c <HAL_RCC_GetHCLKFreq>
 800a88c:	4602      	mov	r2, r0
 800a88e:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	f003 0307 	and.w	r3, r3, #7
 800a898:	4904      	ldr	r1, [pc, #16]	; (800a8ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800a89a:	5ccb      	ldrb	r3, [r1, r3]
 800a89c:	f003 031f 	and.w	r3, r3, #31
 800a8a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	40021000 	.word	0x40021000
 800a8ac:	0800e384 	.word	0x0800e384

0800a8b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a8b4:	f7ff ffda 	bl	800a86c <HAL_RCC_GetHCLKFreq>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	4b06      	ldr	r3, [pc, #24]	; (800a8d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	0adb      	lsrs	r3, r3, #11
 800a8c0:	f003 0307 	and.w	r3, r3, #7
 800a8c4:	4904      	ldr	r1, [pc, #16]	; (800a8d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8c6:	5ccb      	ldrb	r3, [r1, r3]
 800a8c8:	f003 031f 	and.w	r3, r3, #31
 800a8cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	40021000 	.word	0x40021000
 800a8d8:	0800e384 	.word	0x0800e384

0800a8dc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	220f      	movs	r2, #15
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a8ec:	4b12      	ldr	r3, [pc, #72]	; (800a938 <HAL_RCC_GetClockConfig+0x5c>)
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f003 0203 	and.w	r2, r3, #3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a8f8:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <HAL_RCC_GetClockConfig+0x5c>)
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a904:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <HAL_RCC_GetClockConfig+0x5c>)
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a910:	4b09      	ldr	r3, [pc, #36]	; (800a938 <HAL_RCC_GetClockConfig+0x5c>)
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	08db      	lsrs	r3, r3, #3
 800a916:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a91e:	4b07      	ldr	r3, [pc, #28]	; (800a93c <HAL_RCC_GetClockConfig+0x60>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 020f 	and.w	r2, r3, #15
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	601a      	str	r2, [r3, #0]
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	40021000 	.word	0x40021000
 800a93c:	40022000 	.word	0x40022000

0800a940 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a948:	2300      	movs	r3, #0
 800a94a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a94c:	4b27      	ldr	r3, [pc, #156]	; (800a9ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a958:	f7ff f8e6 	bl	8009b28 <HAL_PWREx_GetVoltageRange>
 800a95c:	6178      	str	r0, [r7, #20]
 800a95e:	e014      	b.n	800a98a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a960:	4b22      	ldr	r3, [pc, #136]	; (800a9ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a964:	4a21      	ldr	r2, [pc, #132]	; (800a9ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a96a:	6593      	str	r3, [r2, #88]	; 0x58
 800a96c:	4b1f      	ldr	r3, [pc, #124]	; (800a9ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a978:	f7ff f8d6 	bl	8009b28 <HAL_PWREx_GetVoltageRange>
 800a97c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a97e:	4b1b      	ldr	r3, [pc, #108]	; (800a9ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a982:	4a1a      	ldr	r2, [pc, #104]	; (800a9ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a988:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a990:	d10b      	bne.n	800a9aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b80      	cmp	r3, #128	; 0x80
 800a996:	d913      	bls.n	800a9c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2ba0      	cmp	r3, #160	; 0xa0
 800a99c:	d902      	bls.n	800a9a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a99e:	2302      	movs	r3, #2
 800a9a0:	613b      	str	r3, [r7, #16]
 800a9a2:	e00d      	b.n	800a9c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	613b      	str	r3, [r7, #16]
 800a9a8:	e00a      	b.n	800a9c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b7f      	cmp	r3, #127	; 0x7f
 800a9ae:	d902      	bls.n	800a9b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	613b      	str	r3, [r7, #16]
 800a9b4:	e004      	b.n	800a9c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b70      	cmp	r3, #112	; 0x70
 800a9ba:	d101      	bne.n	800a9c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a9bc:	2301      	movs	r3, #1
 800a9be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	; (800a9f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f023 020f 	bic.w	r2, r3, #15
 800a9c8:	4909      	ldr	r1, [pc, #36]	; (800a9f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a9d0:	4b07      	ldr	r3, [pc, #28]	; (800a9f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 030f 	and.w	r3, r3, #15
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d001      	beq.n	800a9e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	40021000 	.word	0x40021000
 800a9f0:	40022000 	.word	0x40022000

0800a9f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800a9fe:	4b2d      	ldr	r3, [pc, #180]	; (800aab4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	f003 0303 	and.w	r3, r3, #3
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d118      	bne.n	800aa3c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aa0a:	4b2a      	ldr	r3, [pc, #168]	; (800aab4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0308 	and.w	r3, r3, #8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d107      	bne.n	800aa26 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aa16:	4b27      	ldr	r3, [pc, #156]	; (800aab4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa1c:	0a1b      	lsrs	r3, r3, #8
 800aa1e:	f003 030f 	and.w	r3, r3, #15
 800aa22:	617b      	str	r3, [r7, #20]
 800aa24:	e005      	b.n	800aa32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aa26:	4b23      	ldr	r3, [pc, #140]	; (800aab4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	091b      	lsrs	r3, r3, #4
 800aa2c:	f003 030f 	and.w	r3, r3, #15
 800aa30:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aa32:	4a21      	ldr	r2, [pc, #132]	; (800aab8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa3a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aa3c:	4b1d      	ldr	r3, [pc, #116]	; (800aab4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	f003 0303 	and.w	r3, r3, #3
 800aa44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d003      	beq.n	800aa54 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d003      	beq.n	800aa5a <RCC_GetSysClockFreqFromPLLSource+0x66>
 800aa52:	e005      	b.n	800aa60 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800aa54:	4b19      	ldr	r3, [pc, #100]	; (800aabc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800aa56:	613b      	str	r3, [r7, #16]
    break;
 800aa58:	e005      	b.n	800aa66 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800aa5a:	4b19      	ldr	r3, [pc, #100]	; (800aac0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800aa5c:	613b      	str	r3, [r7, #16]
    break;
 800aa5e:	e002      	b.n	800aa66 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	613b      	str	r3, [r7, #16]
    break;
 800aa64:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	091b      	lsrs	r3, r3, #4
 800aa6c:	f003 030f 	and.w	r3, r3, #15
 800aa70:	3301      	adds	r3, #1
 800aa72:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800aa74:	4b0f      	ldr	r3, [pc, #60]	; (800aab4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	0a1b      	lsrs	r3, r3, #8
 800aa7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	fb03 f202 	mul.w	r2, r3, r2
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aa8c:	4b09      	ldr	r3, [pc, #36]	; (800aab4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	0e5b      	lsrs	r3, r3, #25
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	3301      	adds	r3, #1
 800aa98:	005b      	lsls	r3, r3, #1
 800aa9a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800aaa6:	683b      	ldr	r3, [r7, #0]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	40021000 	.word	0x40021000
 800aab8:	0800e38c 	.word	0x0800e38c
 800aabc:	00f42400 	.word	0x00f42400
 800aac0:	007a1200 	.word	0x007a1200

0800aac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aacc:	2300      	movs	r3, #0
 800aace:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aad0:	2300      	movs	r3, #0
 800aad2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d040      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae4:	2b80      	cmp	r3, #128	; 0x80
 800aae6:	d02a      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aae8:	2b80      	cmp	r3, #128	; 0x80
 800aaea:	d825      	bhi.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aaec:	2b60      	cmp	r3, #96	; 0x60
 800aaee:	d026      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aaf0:	2b60      	cmp	r3, #96	; 0x60
 800aaf2:	d821      	bhi.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aaf4:	2b40      	cmp	r3, #64	; 0x40
 800aaf6:	d006      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800aaf8:	2b40      	cmp	r3, #64	; 0x40
 800aafa:	d81d      	bhi.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d009      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800ab00:	2b20      	cmp	r3, #32
 800ab02:	d010      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800ab04:	e018      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ab06:	4b89      	ldr	r3, [pc, #548]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	4a88      	ldr	r2, [pc, #544]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab10:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ab12:	e015      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3304      	adds	r3, #4
 800ab18:	2100      	movs	r1, #0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fb02 	bl	800b124 <RCCEx_PLLSAI1_Config>
 800ab20:	4603      	mov	r3, r0
 800ab22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ab24:	e00c      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	3320      	adds	r3, #32
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fbed 	bl	800b30c <RCCEx_PLLSAI2_Config>
 800ab32:	4603      	mov	r3, r0
 800ab34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ab36:	e003      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	74fb      	strb	r3, [r7, #19]
      break;
 800ab3c:	e000      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800ab3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab40:	7cfb      	ldrb	r3, [r7, #19]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10b      	bne.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab46:	4b79      	ldr	r3, [pc, #484]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab4c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab54:	4975      	ldr	r1, [pc, #468]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800ab5c:	e001      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5e:	7cfb      	ldrb	r3, [r7, #19]
 800ab60:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d047      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab76:	d030      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ab78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab7c:	d82a      	bhi.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ab7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab82:	d02a      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ab84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab88:	d824      	bhi.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ab8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab8e:	d008      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800ab90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab94:	d81e      	bhi.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00a      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800ab9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab9e:	d010      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aba0:	e018      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aba2:	4b62      	ldr	r3, [pc, #392]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	4a61      	ldr	r2, [pc, #388]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800abae:	e015      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3304      	adds	r3, #4
 800abb4:	2100      	movs	r1, #0
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fab4 	bl	800b124 <RCCEx_PLLSAI1_Config>
 800abbc:	4603      	mov	r3, r0
 800abbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800abc0:	e00c      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3320      	adds	r3, #32
 800abc6:	2100      	movs	r1, #0
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fb9f 	bl	800b30c <RCCEx_PLLSAI2_Config>
 800abce:	4603      	mov	r3, r0
 800abd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800abd2:	e003      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	74fb      	strb	r3, [r7, #19]
      break;
 800abd8:	e000      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800abda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abdc:	7cfb      	ldrb	r3, [r7, #19]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10b      	bne.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800abe2:	4b52      	ldr	r3, [pc, #328]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf0:	494e      	ldr	r1, [pc, #312]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800abf8:	e001      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abfa:	7cfb      	ldrb	r3, [r7, #19]
 800abfc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 809f 	beq.w	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ac10:	4b46      	ldr	r3, [pc, #280]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e000      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800ac20:	2300      	movs	r3, #0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00d      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac26:	4b41      	ldr	r3, [pc, #260]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac2a:	4a40      	ldr	r2, [pc, #256]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac30:	6593      	str	r3, [r2, #88]	; 0x58
 800ac32:	4b3e      	ldr	r3, [pc, #248]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac3a:	60bb      	str	r3, [r7, #8]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac42:	4b3b      	ldr	r3, [pc, #236]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a3a      	ldr	r2, [pc, #232]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ac48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac4e:	f7fb fe3f 	bl	80068d0 <HAL_GetTick>
 800ac52:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ac54:	e009      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac56:	f7fb fe3b 	bl	80068d0 <HAL_GetTick>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d902      	bls.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	74fb      	strb	r3, [r7, #19]
        break;
 800ac68:	e005      	b.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ac6a:	4b31      	ldr	r3, [pc, #196]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0ef      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800ac76:	7cfb      	ldrb	r3, [r7, #19]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d15b      	bne.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ac7c:	4b2b      	ldr	r3, [pc, #172]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac86:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01f      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d019      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ac9a:	4b24      	ldr	r3, [pc, #144]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aca4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aca6:	4b21      	ldr	r3, [pc, #132]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acac:	4a1f      	ldr	r2, [pc, #124]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800acb6:	4b1d      	ldr	r3, [pc, #116]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acbc:	4a1b      	ldr	r2, [pc, #108]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800acc6:	4a19      	ldr	r2, [pc, #100]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d016      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd8:	f7fb fdfa 	bl	80068d0 <HAL_GetTick>
 800acdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acde:	e00b      	b.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ace0:	f7fb fdf6 	bl	80068d0 <HAL_GetTick>
 800ace4:	4602      	mov	r2, r0
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	f241 3288 	movw	r2, #5000	; 0x1388
 800acee:	4293      	cmp	r3, r2
 800acf0:	d902      	bls.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800acf2:	2303      	movs	r3, #3
 800acf4:	74fb      	strb	r3, [r7, #19]
            break;
 800acf6:	e006      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0ec      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800ad06:	7cfb      	ldrb	r3, [r7, #19]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10c      	bne.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad0c:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ad0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad1c:	4903      	ldr	r1, [pc, #12]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ad24:	e008      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad26:	7cfb      	ldrb	r3, [r7, #19]
 800ad28:	74bb      	strb	r3, [r7, #18]
 800ad2a:	e005      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800ad2c:	40021000 	.word	0x40021000
 800ad30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad34:	7cfb      	ldrb	r3, [r7, #19]
 800ad36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad38:	7c7b      	ldrb	r3, [r7, #17]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d105      	bne.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad3e:	4ba0      	ldr	r3, [pc, #640]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad42:	4a9f      	ldr	r2, [pc, #636]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad56:	4b9a      	ldr	r3, [pc, #616]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5c:	f023 0203 	bic.w	r2, r3, #3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad64:	4996      	ldr	r1, [pc, #600]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad66:	4313      	orrs	r3, r2
 800ad68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 0302 	and.w	r3, r3, #2
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad78:	4b91      	ldr	r3, [pc, #580]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7e:	f023 020c 	bic.w	r2, r3, #12
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad86:	498e      	ldr	r1, [pc, #568]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad9a:	4b89      	ldr	r3, [pc, #548]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada8:	4985      	ldr	r1, [pc, #532]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adaa:	4313      	orrs	r3, r2
 800adac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0308 	and.w	r3, r3, #8
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800adbc:	4b80      	ldr	r3, [pc, #512]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adca:	497d      	ldr	r1, [pc, #500]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0310 	and.w	r3, r3, #16
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800adde:	4b78      	ldr	r3, [pc, #480]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ade0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adec:	4974      	ldr	r1, [pc, #464]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adee:	4313      	orrs	r3, r2
 800adf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0320 	and.w	r3, r3, #32
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00a      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ae00:	4b6f      	ldr	r3, [pc, #444]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae0e:	496c      	ldr	r1, [pc, #432]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae10:	4313      	orrs	r3, r2
 800ae12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00a      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae22:	4b67      	ldr	r3, [pc, #412]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae30:	4963      	ldr	r1, [pc, #396]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae32:	4313      	orrs	r3, r2
 800ae34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00a      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ae44:	4b5e      	ldr	r3, [pc, #376]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae52:	495b      	ldr	r1, [pc, #364]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae54:	4313      	orrs	r3, r2
 800ae56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00a      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ae66:	4b56      	ldr	r3, [pc, #344]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae74:	4952      	ldr	r1, [pc, #328]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00a      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ae88:	4b4d      	ldr	r3, [pc, #308]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae96:	494a      	ldr	r1, [pc, #296]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aeaa:	4b45      	ldr	r3, [pc, #276]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aeac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeb8:	4941      	ldr	r1, [pc, #260]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aecc:	4b3c      	ldr	r3, [pc, #240]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aed2:	f023 0203 	bic.w	r2, r3, #3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeda:	4939      	ldr	r1, [pc, #228]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aedc:	4313      	orrs	r3, r2
 800aede:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d028      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aeee:	4b34      	ldr	r3, [pc, #208]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aefc:	4930      	ldr	r1, [pc, #192]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aefe:	4313      	orrs	r3, r2
 800af00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af0c:	d106      	bne.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af0e:	4b2c      	ldr	r3, [pc, #176]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	4a2b      	ldr	r2, [pc, #172]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af18:	60d3      	str	r3, [r2, #12]
 800af1a:	e011      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af24:	d10c      	bne.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3304      	adds	r3, #4
 800af2a:	2101      	movs	r1, #1
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 f8f9 	bl	800b124 <RCCEx_PLLSAI1_Config>
 800af32:	4603      	mov	r3, r0
 800af34:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800af36:	7cfb      	ldrb	r3, [r7, #19]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800af3c:	7cfb      	ldrb	r3, [r7, #19]
 800af3e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d04d      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af54:	d108      	bne.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800af56:	4b1a      	ldr	r3, [pc, #104]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af5c:	4a18      	ldr	r2, [pc, #96]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800af66:	e012      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800af68:	4b15      	ldr	r3, [pc, #84]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af6e:	4a14      	ldr	r2, [pc, #80]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af74:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800af78:	4b11      	ldr	r3, [pc, #68]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af86:	490e      	ldr	r1, [pc, #56]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af88:	4313      	orrs	r3, r2
 800af8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af96:	d106      	bne.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af98:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	4a08      	ldr	r2, [pc, #32]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afa2:	60d3      	str	r3, [r2, #12]
 800afa4:	e020      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afae:	d109      	bne.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800afb0:	4b03      	ldr	r3, [pc, #12]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	4a02      	ldr	r2, [pc, #8]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800afb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afba:	60d3      	str	r3, [r2, #12]
 800afbc:	e014      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800afbe:	bf00      	nop
 800afc0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afcc:	d10c      	bne.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3304      	adds	r3, #4
 800afd2:	2101      	movs	r1, #1
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 f8a5 	bl	800b124 <RCCEx_PLLSAI1_Config>
 800afda:	4603      	mov	r3, r0
 800afdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800afde:	7cfb      	ldrb	r3, [r7, #19]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800afe4:	7cfb      	ldrb	r3, [r7, #19]
 800afe6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d028      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aff4:	4b4a      	ldr	r3, [pc, #296]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b002:	4947      	ldr	r1, [pc, #284]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b004:	4313      	orrs	r3, r2
 800b006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b00e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b012:	d106      	bne.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b014:	4b42      	ldr	r3, [pc, #264]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	4a41      	ldr	r2, [pc, #260]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b01e:	60d3      	str	r3, [r2, #12]
 800b020:	e011      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b02a:	d10c      	bne.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3304      	adds	r3, #4
 800b030:	2101      	movs	r1, #1
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f876 	bl	800b124 <RCCEx_PLLSAI1_Config>
 800b038:	4603      	mov	r3, r0
 800b03a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b03c:	7cfb      	ldrb	r3, [r7, #19]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b042:	7cfb      	ldrb	r3, [r7, #19]
 800b044:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01e      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b052:	4b33      	ldr	r3, [pc, #204]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b058:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b062:	492f      	ldr	r1, [pc, #188]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b064:	4313      	orrs	r3, r2
 800b066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b074:	d10c      	bne.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	3304      	adds	r3, #4
 800b07a:	2102      	movs	r1, #2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 f851 	bl	800b124 <RCCEx_PLLSAI1_Config>
 800b082:	4603      	mov	r3, r0
 800b084:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b086:	7cfb      	ldrb	r3, [r7, #19]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b08c:	7cfb      	ldrb	r3, [r7, #19]
 800b08e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b09c:	4b20      	ldr	r3, [pc, #128]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b09e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0a2:	f023 0204 	bic.w	r2, r3, #4
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ac:	491c      	ldr	r1, [pc, #112]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00b      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b0c0:	4b17      	ldr	r3, [pc, #92]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b0c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0c6:	f023 0218 	bic.w	r2, r3, #24
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d0:	4913      	ldr	r1, [pc, #76]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d017      	beq.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b0e4:	4b0e      	ldr	r3, [pc, #56]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b0e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0f4:	490a      	ldr	r1, [pc, #40]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b106:	d105      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b108:	4b05      	ldr	r3, [pc, #20]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	4a04      	ldr	r2, [pc, #16]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b10e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b112:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b114:	7cbb      	ldrb	r3, [r7, #18]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	40021000 	.word	0x40021000

0800b124 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b132:	4b72      	ldr	r3, [pc, #456]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	f003 0303 	and.w	r3, r3, #3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00e      	beq.n	800b15c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b13e:	4b6f      	ldr	r3, [pc, #444]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f003 0203 	and.w	r2, r3, #3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d103      	bne.n	800b156 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
       ||
 800b152:	2b00      	cmp	r3, #0
 800b154:	d142      	bne.n	800b1dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	73fb      	strb	r3, [r7, #15]
 800b15a:	e03f      	b.n	800b1dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b03      	cmp	r3, #3
 800b162:	d018      	beq.n	800b196 <RCCEx_PLLSAI1_Config+0x72>
 800b164:	2b03      	cmp	r3, #3
 800b166:	d825      	bhi.n	800b1b4 <RCCEx_PLLSAI1_Config+0x90>
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d002      	beq.n	800b172 <RCCEx_PLLSAI1_Config+0x4e>
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d009      	beq.n	800b184 <RCCEx_PLLSAI1_Config+0x60>
 800b170:	e020      	b.n	800b1b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b172:	4b62      	ldr	r3, [pc, #392]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 0302 	and.w	r3, r3, #2
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d11d      	bne.n	800b1ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b182:	e01a      	b.n	800b1ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b184:	4b5d      	ldr	r3, [pc, #372]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d116      	bne.n	800b1be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b194:	e013      	b.n	800b1be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b196:	4b59      	ldr	r3, [pc, #356]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10f      	bne.n	800b1c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b1a2:	4b56      	ldr	r3, [pc, #344]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d109      	bne.n	800b1c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b1b2:	e006      	b.n	800b1c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1b8:	e004      	b.n	800b1c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b1ba:	bf00      	nop
 800b1bc:	e002      	b.n	800b1c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b1be:	bf00      	nop
 800b1c0:	e000      	b.n	800b1c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b1c2:	bf00      	nop
    }

    if(status == HAL_OK)
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d108      	bne.n	800b1dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b1ca:	4b4c      	ldr	r3, [pc, #304]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f023 0203 	bic.w	r2, r3, #3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4949      	ldr	r1, [pc, #292]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f040 8086 	bne.w	800b2f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b1e4:	4b45      	ldr	r3, [pc, #276]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a44      	ldr	r2, [pc, #272]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1f0:	f7fb fb6e 	bl	80068d0 <HAL_GetTick>
 800b1f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b1f6:	e009      	b.n	800b20c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b1f8:	f7fb fb6a 	bl	80068d0 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b02      	cmp	r3, #2
 800b204:	d902      	bls.n	800b20c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	73fb      	strb	r3, [r7, #15]
        break;
 800b20a:	e005      	b.n	800b218 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b20c:	4b3b      	ldr	r3, [pc, #236]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1ef      	bne.n	800b1f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d168      	bne.n	800b2f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d113      	bne.n	800b24c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b224:	4b35      	ldr	r3, [pc, #212]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b226:	691a      	ldr	r2, [r3, #16]
 800b228:	4b35      	ldr	r3, [pc, #212]	; (800b300 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b22a:	4013      	ands	r3, r2
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	6892      	ldr	r2, [r2, #8]
 800b230:	0211      	lsls	r1, r2, #8
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	68d2      	ldr	r2, [r2, #12]
 800b236:	06d2      	lsls	r2, r2, #27
 800b238:	4311      	orrs	r1, r2
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	6852      	ldr	r2, [r2, #4]
 800b23e:	3a01      	subs	r2, #1
 800b240:	0112      	lsls	r2, r2, #4
 800b242:	430a      	orrs	r2, r1
 800b244:	492d      	ldr	r1, [pc, #180]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b246:	4313      	orrs	r3, r2
 800b248:	610b      	str	r3, [r1, #16]
 800b24a:	e02d      	b.n	800b2a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d115      	bne.n	800b27e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b252:	4b2a      	ldr	r3, [pc, #168]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b254:	691a      	ldr	r2, [r3, #16]
 800b256:	4b2b      	ldr	r3, [pc, #172]	; (800b304 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b258:	4013      	ands	r3, r2
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	6892      	ldr	r2, [r2, #8]
 800b25e:	0211      	lsls	r1, r2, #8
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	6912      	ldr	r2, [r2, #16]
 800b264:	0852      	lsrs	r2, r2, #1
 800b266:	3a01      	subs	r2, #1
 800b268:	0552      	lsls	r2, r2, #21
 800b26a:	4311      	orrs	r1, r2
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	6852      	ldr	r2, [r2, #4]
 800b270:	3a01      	subs	r2, #1
 800b272:	0112      	lsls	r2, r2, #4
 800b274:	430a      	orrs	r2, r1
 800b276:	4921      	ldr	r1, [pc, #132]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b278:	4313      	orrs	r3, r2
 800b27a:	610b      	str	r3, [r1, #16]
 800b27c:	e014      	b.n	800b2a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b27e:	4b1f      	ldr	r3, [pc, #124]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b280:	691a      	ldr	r2, [r3, #16]
 800b282:	4b21      	ldr	r3, [pc, #132]	; (800b308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b284:	4013      	ands	r3, r2
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	6892      	ldr	r2, [r2, #8]
 800b28a:	0211      	lsls	r1, r2, #8
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	6952      	ldr	r2, [r2, #20]
 800b290:	0852      	lsrs	r2, r2, #1
 800b292:	3a01      	subs	r2, #1
 800b294:	0652      	lsls	r2, r2, #25
 800b296:	4311      	orrs	r1, r2
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	6852      	ldr	r2, [r2, #4]
 800b29c:	3a01      	subs	r2, #1
 800b29e:	0112      	lsls	r2, r2, #4
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	4916      	ldr	r1, [pc, #88]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b2a8:	4b14      	ldr	r3, [pc, #80]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a13      	ldr	r2, [pc, #76]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b2b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2b4:	f7fb fb0c 	bl	80068d0 <HAL_GetTick>
 800b2b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b2ba:	e009      	b.n	800b2d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b2bc:	f7fb fb08 	bl	80068d0 <HAL_GetTick>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d902      	bls.n	800b2d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	73fb      	strb	r3, [r7, #15]
          break;
 800b2ce:	e005      	b.n	800b2dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b2d0:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d0ef      	beq.n	800b2bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b2e2:	4b06      	ldr	r3, [pc, #24]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2e4:	691a      	ldr	r2, [r3, #16]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	4904      	ldr	r1, [pc, #16]	; (800b2fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	40021000 	.word	0x40021000
 800b300:	07ff800f 	.word	0x07ff800f
 800b304:	ff9f800f 	.word	0xff9f800f
 800b308:	f9ff800f 	.word	0xf9ff800f

0800b30c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b31a:	4b72      	ldr	r3, [pc, #456]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00e      	beq.n	800b344 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b326:	4b6f      	ldr	r3, [pc, #444]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f003 0203 	and.w	r2, r3, #3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d103      	bne.n	800b33e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
       ||
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d142      	bne.n	800b3c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	73fb      	strb	r3, [r7, #15]
 800b342:	e03f      	b.n	800b3c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d018      	beq.n	800b37e <RCCEx_PLLSAI2_Config+0x72>
 800b34c:	2b03      	cmp	r3, #3
 800b34e:	d825      	bhi.n	800b39c <RCCEx_PLLSAI2_Config+0x90>
 800b350:	2b01      	cmp	r3, #1
 800b352:	d002      	beq.n	800b35a <RCCEx_PLLSAI2_Config+0x4e>
 800b354:	2b02      	cmp	r3, #2
 800b356:	d009      	beq.n	800b36c <RCCEx_PLLSAI2_Config+0x60>
 800b358:	e020      	b.n	800b39c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b35a:	4b62      	ldr	r3, [pc, #392]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d11d      	bne.n	800b3a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b36a:	e01a      	b.n	800b3a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b36c:	4b5d      	ldr	r3, [pc, #372]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b374:	2b00      	cmp	r3, #0
 800b376:	d116      	bne.n	800b3a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b37c:	e013      	b.n	800b3a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b37e:	4b59      	ldr	r3, [pc, #356]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10f      	bne.n	800b3aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b38a:	4b56      	ldr	r3, [pc, #344]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d109      	bne.n	800b3aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b39a:	e006      	b.n	800b3aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a0:	e004      	b.n	800b3ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b3a2:	bf00      	nop
 800b3a4:	e002      	b.n	800b3ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b3a6:	bf00      	nop
 800b3a8:	e000      	b.n	800b3ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b3aa:	bf00      	nop
    }

    if(status == HAL_OK)
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d108      	bne.n	800b3c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b3b2:	4b4c      	ldr	r3, [pc, #304]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	f023 0203 	bic.w	r2, r3, #3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4949      	ldr	r1, [pc, #292]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f040 8086 	bne.w	800b4d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b3cc:	4b45      	ldr	r3, [pc, #276]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a44      	ldr	r2, [pc, #272]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3d8:	f7fb fa7a 	bl	80068d0 <HAL_GetTick>
 800b3dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b3de:	e009      	b.n	800b3f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b3e0:	f7fb fa76 	bl	80068d0 <HAL_GetTick>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d902      	bls.n	800b3f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	73fb      	strb	r3, [r7, #15]
        break;
 800b3f2:	e005      	b.n	800b400 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b3f4:	4b3b      	ldr	r3, [pc, #236]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1ef      	bne.n	800b3e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b400:	7bfb      	ldrb	r3, [r7, #15]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d168      	bne.n	800b4d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d113      	bne.n	800b434 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b40c:	4b35      	ldr	r3, [pc, #212]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b40e:	695a      	ldr	r2, [r3, #20]
 800b410:	4b35      	ldr	r3, [pc, #212]	; (800b4e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b412:	4013      	ands	r3, r2
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6892      	ldr	r2, [r2, #8]
 800b418:	0211      	lsls	r1, r2, #8
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	68d2      	ldr	r2, [r2, #12]
 800b41e:	06d2      	lsls	r2, r2, #27
 800b420:	4311      	orrs	r1, r2
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	6852      	ldr	r2, [r2, #4]
 800b426:	3a01      	subs	r2, #1
 800b428:	0112      	lsls	r2, r2, #4
 800b42a:	430a      	orrs	r2, r1
 800b42c:	492d      	ldr	r1, [pc, #180]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	614b      	str	r3, [r1, #20]
 800b432:	e02d      	b.n	800b490 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d115      	bne.n	800b466 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b43a:	4b2a      	ldr	r3, [pc, #168]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b43c:	695a      	ldr	r2, [r3, #20]
 800b43e:	4b2b      	ldr	r3, [pc, #172]	; (800b4ec <RCCEx_PLLSAI2_Config+0x1e0>)
 800b440:	4013      	ands	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	6892      	ldr	r2, [r2, #8]
 800b446:	0211      	lsls	r1, r2, #8
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	6912      	ldr	r2, [r2, #16]
 800b44c:	0852      	lsrs	r2, r2, #1
 800b44e:	3a01      	subs	r2, #1
 800b450:	0552      	lsls	r2, r2, #21
 800b452:	4311      	orrs	r1, r2
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	6852      	ldr	r2, [r2, #4]
 800b458:	3a01      	subs	r2, #1
 800b45a:	0112      	lsls	r2, r2, #4
 800b45c:	430a      	orrs	r2, r1
 800b45e:	4921      	ldr	r1, [pc, #132]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b460:	4313      	orrs	r3, r2
 800b462:	614b      	str	r3, [r1, #20]
 800b464:	e014      	b.n	800b490 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b466:	4b1f      	ldr	r3, [pc, #124]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b468:	695a      	ldr	r2, [r3, #20]
 800b46a:	4b21      	ldr	r3, [pc, #132]	; (800b4f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b46c:	4013      	ands	r3, r2
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	6892      	ldr	r2, [r2, #8]
 800b472:	0211      	lsls	r1, r2, #8
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6952      	ldr	r2, [r2, #20]
 800b478:	0852      	lsrs	r2, r2, #1
 800b47a:	3a01      	subs	r2, #1
 800b47c:	0652      	lsls	r2, r2, #25
 800b47e:	4311      	orrs	r1, r2
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6852      	ldr	r2, [r2, #4]
 800b484:	3a01      	subs	r2, #1
 800b486:	0112      	lsls	r2, r2, #4
 800b488:	430a      	orrs	r2, r1
 800b48a:	4916      	ldr	r1, [pc, #88]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b48c:	4313      	orrs	r3, r2
 800b48e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b490:	4b14      	ldr	r3, [pc, #80]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a13      	ldr	r2, [pc, #76]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b49a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b49c:	f7fb fa18 	bl	80068d0 <HAL_GetTick>
 800b4a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b4a2:	e009      	b.n	800b4b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b4a4:	f7fb fa14 	bl	80068d0 <HAL_GetTick>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d902      	bls.n	800b4b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	73fb      	strb	r3, [r7, #15]
          break;
 800b4b6:	e005      	b.n	800b4c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b4b8:	4b0a      	ldr	r3, [pc, #40]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0ef      	beq.n	800b4a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d106      	bne.n	800b4d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b4ca:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4cc:	695a      	ldr	r2, [r3, #20]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	4904      	ldr	r1, [pc, #16]	; (800b4e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	40021000 	.word	0x40021000
 800b4e8:	07ff800f 	.word	0x07ff800f
 800b4ec:	ff9f800f 	.word	0xff9f800f
 800b4f0:	f9ff800f 	.word	0xf9ff800f

0800b4f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e049      	b.n	800b59a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7fa fe6a 	bl	80061f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3304      	adds	r3, #4
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f000 fab6 	bl	800baa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d001      	beq.n	800b5bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e04f      	b.n	800b65c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2202      	movs	r2, #2
 800b5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68da      	ldr	r2, [r3, #12]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f042 0201 	orr.w	r2, r2, #1
 800b5d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a23      	ldr	r2, [pc, #140]	; (800b668 <HAL_TIM_Base_Start_IT+0xc4>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d01d      	beq.n	800b61a <HAL_TIM_Base_Start_IT+0x76>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e6:	d018      	beq.n	800b61a <HAL_TIM_Base_Start_IT+0x76>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a1f      	ldr	r2, [pc, #124]	; (800b66c <HAL_TIM_Base_Start_IT+0xc8>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d013      	beq.n	800b61a <HAL_TIM_Base_Start_IT+0x76>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a1e      	ldr	r2, [pc, #120]	; (800b670 <HAL_TIM_Base_Start_IT+0xcc>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d00e      	beq.n	800b61a <HAL_TIM_Base_Start_IT+0x76>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a1c      	ldr	r2, [pc, #112]	; (800b674 <HAL_TIM_Base_Start_IT+0xd0>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d009      	beq.n	800b61a <HAL_TIM_Base_Start_IT+0x76>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a1b      	ldr	r2, [pc, #108]	; (800b678 <HAL_TIM_Base_Start_IT+0xd4>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d004      	beq.n	800b61a <HAL_TIM_Base_Start_IT+0x76>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a19      	ldr	r2, [pc, #100]	; (800b67c <HAL_TIM_Base_Start_IT+0xd8>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d115      	bne.n	800b646 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	4b17      	ldr	r3, [pc, #92]	; (800b680 <HAL_TIM_Base_Start_IT+0xdc>)
 800b622:	4013      	ands	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b06      	cmp	r3, #6
 800b62a:	d015      	beq.n	800b658 <HAL_TIM_Base_Start_IT+0xb4>
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b632:	d011      	beq.n	800b658 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f042 0201 	orr.w	r2, r2, #1
 800b642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b644:	e008      	b.n	800b658 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f042 0201 	orr.w	r2, r2, #1
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	e000      	b.n	800b65a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b658:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	40012c00 	.word	0x40012c00
 800b66c:	40000400 	.word	0x40000400
 800b670:	40000800 	.word	0x40000800
 800b674:	40000c00 	.word	0x40000c00
 800b678:	40013400 	.word	0x40013400
 800b67c:	40014000 	.word	0x40014000
 800b680:	00010007 	.word	0x00010007

0800b684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b02      	cmp	r3, #2
 800b698:	d122      	bne.n	800b6e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f003 0302 	and.w	r3, r3, #2
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d11b      	bne.n	800b6e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f06f 0202 	mvn.w	r2, #2
 800b6b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	f003 0303 	and.w	r3, r3, #3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f9ce 	bl	800ba68 <HAL_TIM_IC_CaptureCallback>
 800b6cc:	e005      	b.n	800b6da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f9c0 	bl	800ba54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f9d1 	bl	800ba7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	f003 0304 	and.w	r3, r3, #4
 800b6ea:	2b04      	cmp	r3, #4
 800b6ec:	d122      	bne.n	800b734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b04      	cmp	r3, #4
 800b6fa:	d11b      	bne.n	800b734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f06f 0204 	mvn.w	r2, #4
 800b704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2202      	movs	r2, #2
 800b70a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b716:	2b00      	cmp	r3, #0
 800b718:	d003      	beq.n	800b722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f9a4 	bl	800ba68 <HAL_TIM_IC_CaptureCallback>
 800b720:	e005      	b.n	800b72e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f996 	bl	800ba54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f9a7 	bl	800ba7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	f003 0308 	and.w	r3, r3, #8
 800b73e:	2b08      	cmp	r3, #8
 800b740:	d122      	bne.n	800b788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	f003 0308 	and.w	r3, r3, #8
 800b74c:	2b08      	cmp	r3, #8
 800b74e:	d11b      	bne.n	800b788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f06f 0208 	mvn.w	r2, #8
 800b758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2204      	movs	r2, #4
 800b75e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	f003 0303 	and.w	r3, r3, #3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d003      	beq.n	800b776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f97a 	bl	800ba68 <HAL_TIM_IC_CaptureCallback>
 800b774:	e005      	b.n	800b782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f96c 	bl	800ba54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f97d 	bl	800ba7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	f003 0310 	and.w	r3, r3, #16
 800b792:	2b10      	cmp	r3, #16
 800b794:	d122      	bne.n	800b7dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	f003 0310 	and.w	r3, r3, #16
 800b7a0:	2b10      	cmp	r3, #16
 800b7a2:	d11b      	bne.n	800b7dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f06f 0210 	mvn.w	r2, #16
 800b7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2208      	movs	r2, #8
 800b7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f950 	bl	800ba68 <HAL_TIM_IC_CaptureCallback>
 800b7c8:	e005      	b.n	800b7d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f942 	bl	800ba54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f953 	bl	800ba7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	f003 0301 	and.w	r3, r3, #1
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d10e      	bne.n	800b808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d107      	bne.n	800b808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f06f 0201 	mvn.w	r2, #1
 800b800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7f9 fd40 	bl	8005288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b812:	2b80      	cmp	r3, #128	; 0x80
 800b814:	d10e      	bne.n	800b834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b820:	2b80      	cmp	r3, #128	; 0x80
 800b822:	d107      	bne.n	800b834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b82c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fafe 	bl	800be30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b842:	d10e      	bne.n	800b862 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b84e:	2b80      	cmp	r3, #128	; 0x80
 800b850:	d107      	bne.n	800b862 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 faf1 	bl	800be44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b86c:	2b40      	cmp	r3, #64	; 0x40
 800b86e:	d10e      	bne.n	800b88e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b87a:	2b40      	cmp	r3, #64	; 0x40
 800b87c:	d107      	bne.n	800b88e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f901 	bl	800ba90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	f003 0320 	and.w	r3, r3, #32
 800b898:	2b20      	cmp	r3, #32
 800b89a:	d10e      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	f003 0320 	and.w	r3, r3, #32
 800b8a6:	2b20      	cmp	r3, #32
 800b8a8:	d107      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f06f 0220 	mvn.w	r2, #32
 800b8b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fab1 	bl	800be1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8ba:	bf00      	nop
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d101      	bne.n	800b8de <HAL_TIM_ConfigClockSource+0x1c>
 800b8da:	2302      	movs	r3, #2
 800b8dc:	e0b6      	b.n	800ba4c <HAL_TIM_ConfigClockSource+0x18a>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b900:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b908:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b91a:	d03e      	beq.n	800b99a <HAL_TIM_ConfigClockSource+0xd8>
 800b91c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b920:	f200 8087 	bhi.w	800ba32 <HAL_TIM_ConfigClockSource+0x170>
 800b924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b928:	f000 8086 	beq.w	800ba38 <HAL_TIM_ConfigClockSource+0x176>
 800b92c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b930:	d87f      	bhi.n	800ba32 <HAL_TIM_ConfigClockSource+0x170>
 800b932:	2b70      	cmp	r3, #112	; 0x70
 800b934:	d01a      	beq.n	800b96c <HAL_TIM_ConfigClockSource+0xaa>
 800b936:	2b70      	cmp	r3, #112	; 0x70
 800b938:	d87b      	bhi.n	800ba32 <HAL_TIM_ConfigClockSource+0x170>
 800b93a:	2b60      	cmp	r3, #96	; 0x60
 800b93c:	d050      	beq.n	800b9e0 <HAL_TIM_ConfigClockSource+0x11e>
 800b93e:	2b60      	cmp	r3, #96	; 0x60
 800b940:	d877      	bhi.n	800ba32 <HAL_TIM_ConfigClockSource+0x170>
 800b942:	2b50      	cmp	r3, #80	; 0x50
 800b944:	d03c      	beq.n	800b9c0 <HAL_TIM_ConfigClockSource+0xfe>
 800b946:	2b50      	cmp	r3, #80	; 0x50
 800b948:	d873      	bhi.n	800ba32 <HAL_TIM_ConfigClockSource+0x170>
 800b94a:	2b40      	cmp	r3, #64	; 0x40
 800b94c:	d058      	beq.n	800ba00 <HAL_TIM_ConfigClockSource+0x13e>
 800b94e:	2b40      	cmp	r3, #64	; 0x40
 800b950:	d86f      	bhi.n	800ba32 <HAL_TIM_ConfigClockSource+0x170>
 800b952:	2b30      	cmp	r3, #48	; 0x30
 800b954:	d064      	beq.n	800ba20 <HAL_TIM_ConfigClockSource+0x15e>
 800b956:	2b30      	cmp	r3, #48	; 0x30
 800b958:	d86b      	bhi.n	800ba32 <HAL_TIM_ConfigClockSource+0x170>
 800b95a:	2b20      	cmp	r3, #32
 800b95c:	d060      	beq.n	800ba20 <HAL_TIM_ConfigClockSource+0x15e>
 800b95e:	2b20      	cmp	r3, #32
 800b960:	d867      	bhi.n	800ba32 <HAL_TIM_ConfigClockSource+0x170>
 800b962:	2b00      	cmp	r3, #0
 800b964:	d05c      	beq.n	800ba20 <HAL_TIM_ConfigClockSource+0x15e>
 800b966:	2b10      	cmp	r3, #16
 800b968:	d05a      	beq.n	800ba20 <HAL_TIM_ConfigClockSource+0x15e>
 800b96a:	e062      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	6899      	ldr	r1, [r3, #8]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	685a      	ldr	r2, [r3, #4]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f000 f9a6 	bl	800bccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b98e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	609a      	str	r2, [r3, #8]
      break;
 800b998:	e04f      	b.n	800ba3a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6818      	ldr	r0, [r3, #0]
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	6899      	ldr	r1, [r3, #8]
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	f000 f98f 	bl	800bccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9bc:	609a      	str	r2, [r3, #8]
      break;
 800b9be:	e03c      	b.n	800ba3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6818      	ldr	r0, [r3, #0]
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	6859      	ldr	r1, [r3, #4]
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	f000 f903 	bl	800bbd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2150      	movs	r1, #80	; 0x50
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 f95c 	bl	800bc96 <TIM_ITRx_SetConfig>
      break;
 800b9de:	e02c      	b.n	800ba3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6818      	ldr	r0, [r3, #0]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	6859      	ldr	r1, [r3, #4]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	f000 f922 	bl	800bc36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2160      	movs	r1, #96	; 0x60
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 f94c 	bl	800bc96 <TIM_ITRx_SetConfig>
      break;
 800b9fe:	e01c      	b.n	800ba3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6818      	ldr	r0, [r3, #0]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	6859      	ldr	r1, [r3, #4]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	f000 f8e3 	bl	800bbd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2140      	movs	r1, #64	; 0x40
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 f93c 	bl	800bc96 <TIM_ITRx_SetConfig>
      break;
 800ba1e:	e00c      	b.n	800ba3a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	f000 f933 	bl	800bc96 <TIM_ITRx_SetConfig>
      break;
 800ba30:	e003      	b.n	800ba3a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	73fb      	strb	r3, [r7, #15]
      break;
 800ba36:	e000      	b.n	800ba3a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ba38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a40      	ldr	r2, [pc, #256]	; (800bbb8 <TIM_Base_SetConfig+0x114>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d013      	beq.n	800bae4 <TIM_Base_SetConfig+0x40>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bac2:	d00f      	beq.n	800bae4 <TIM_Base_SetConfig+0x40>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a3d      	ldr	r2, [pc, #244]	; (800bbbc <TIM_Base_SetConfig+0x118>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d00b      	beq.n	800bae4 <TIM_Base_SetConfig+0x40>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a3c      	ldr	r2, [pc, #240]	; (800bbc0 <TIM_Base_SetConfig+0x11c>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d007      	beq.n	800bae4 <TIM_Base_SetConfig+0x40>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a3b      	ldr	r2, [pc, #236]	; (800bbc4 <TIM_Base_SetConfig+0x120>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d003      	beq.n	800bae4 <TIM_Base_SetConfig+0x40>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a3a      	ldr	r2, [pc, #232]	; (800bbc8 <TIM_Base_SetConfig+0x124>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d108      	bne.n	800baf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a2f      	ldr	r2, [pc, #188]	; (800bbb8 <TIM_Base_SetConfig+0x114>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d01f      	beq.n	800bb3e <TIM_Base_SetConfig+0x9a>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb04:	d01b      	beq.n	800bb3e <TIM_Base_SetConfig+0x9a>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a2c      	ldr	r2, [pc, #176]	; (800bbbc <TIM_Base_SetConfig+0x118>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d017      	beq.n	800bb3e <TIM_Base_SetConfig+0x9a>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a2b      	ldr	r2, [pc, #172]	; (800bbc0 <TIM_Base_SetConfig+0x11c>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d013      	beq.n	800bb3e <TIM_Base_SetConfig+0x9a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a2a      	ldr	r2, [pc, #168]	; (800bbc4 <TIM_Base_SetConfig+0x120>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d00f      	beq.n	800bb3e <TIM_Base_SetConfig+0x9a>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a29      	ldr	r2, [pc, #164]	; (800bbc8 <TIM_Base_SetConfig+0x124>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d00b      	beq.n	800bb3e <TIM_Base_SetConfig+0x9a>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a28      	ldr	r2, [pc, #160]	; (800bbcc <TIM_Base_SetConfig+0x128>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d007      	beq.n	800bb3e <TIM_Base_SetConfig+0x9a>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a27      	ldr	r2, [pc, #156]	; (800bbd0 <TIM_Base_SetConfig+0x12c>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d003      	beq.n	800bb3e <TIM_Base_SetConfig+0x9a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a26      	ldr	r2, [pc, #152]	; (800bbd4 <TIM_Base_SetConfig+0x130>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d108      	bne.n	800bb50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	689a      	ldr	r2, [r3, #8]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a10      	ldr	r2, [pc, #64]	; (800bbb8 <TIM_Base_SetConfig+0x114>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d00f      	beq.n	800bb9c <TIM_Base_SetConfig+0xf8>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a12      	ldr	r2, [pc, #72]	; (800bbc8 <TIM_Base_SetConfig+0x124>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d00b      	beq.n	800bb9c <TIM_Base_SetConfig+0xf8>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a11      	ldr	r2, [pc, #68]	; (800bbcc <TIM_Base_SetConfig+0x128>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d007      	beq.n	800bb9c <TIM_Base_SetConfig+0xf8>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a10      	ldr	r2, [pc, #64]	; (800bbd0 <TIM_Base_SetConfig+0x12c>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d003      	beq.n	800bb9c <TIM_Base_SetConfig+0xf8>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a0f      	ldr	r2, [pc, #60]	; (800bbd4 <TIM_Base_SetConfig+0x130>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d103      	bne.n	800bba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	691a      	ldr	r2, [r3, #16]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	615a      	str	r2, [r3, #20]
}
 800bbaa:	bf00      	nop
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	40012c00 	.word	0x40012c00
 800bbbc:	40000400 	.word	0x40000400
 800bbc0:	40000800 	.word	0x40000800
 800bbc4:	40000c00 	.word	0x40000c00
 800bbc8:	40013400 	.word	0x40013400
 800bbcc:	40014000 	.word	0x40014000
 800bbd0:	40014400 	.word	0x40014400
 800bbd4:	40014800 	.word	0x40014800

0800bbd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	f023 0201 	bic.w	r2, r3, #1
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f023 030a 	bic.w	r3, r3, #10
 800bc14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	621a      	str	r2, [r3, #32]
}
 800bc2a:	bf00      	nop
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc36:	b480      	push	{r7}
 800bc38:	b087      	sub	sp, #28
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	f023 0210 	bic.w	r2, r3, #16
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6a1b      	ldr	r3, [r3, #32]
 800bc58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	031b      	lsls	r3, r3, #12
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	011b      	lsls	r3, r3, #4
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	621a      	str	r2, [r3, #32]
}
 800bc8a:	bf00      	nop
 800bc8c:	371c      	adds	r7, #28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	f043 0307 	orr.w	r3, r3, #7
 800bcb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	609a      	str	r2, [r3, #8]
}
 800bcc0:	bf00      	nop
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	021a      	lsls	r2, r3, #8
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	431a      	orrs	r2, r3
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	609a      	str	r2, [r3, #8]
}
 800bd00:	bf00      	nop
 800bd02:	371c      	adds	r7, #28
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d101      	bne.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd20:	2302      	movs	r3, #2
 800bd22:	e068      	b.n	800bdf6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a2e      	ldr	r2, [pc, #184]	; (800be04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d004      	beq.n	800bd58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a2d      	ldr	r2, [pc, #180]	; (800be08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d108      	bne.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a1e      	ldr	r2, [pc, #120]	; (800be04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d01d      	beq.n	800bdca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd96:	d018      	beq.n	800bdca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a1b      	ldr	r2, [pc, #108]	; (800be0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d013      	beq.n	800bdca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a1a      	ldr	r2, [pc, #104]	; (800be10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d00e      	beq.n	800bdca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a18      	ldr	r2, [pc, #96]	; (800be14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d009      	beq.n	800bdca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a13      	ldr	r2, [pc, #76]	; (800be08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d004      	beq.n	800bdca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a14      	ldr	r2, [pc, #80]	; (800be18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d10c      	bne.n	800bde4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	40012c00 	.word	0x40012c00
 800be08:	40013400 	.word	0x40013400
 800be0c:	40000400 	.word	0x40000400
 800be10:	40000800 	.word	0x40000800
 800be14:	40000c00 	.word	0x40000c00
 800be18:	40014000 	.word	0x40014000

0800be1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be24:	bf00      	nop
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be38:	bf00      	nop
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e042      	b.n	800bef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be70:	2b00      	cmp	r3, #0
 800be72:	d106      	bne.n	800be82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7fa f9dd 	bl	800623c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2224      	movs	r2, #36	; 0x24
 800be86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f022 0201 	bic.w	r2, r2, #1
 800be98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f8c4 	bl	800c028 <UART_SetConfig>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d101      	bne.n	800beaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e022      	b.n	800bef0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d002      	beq.n	800beb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fbb4 	bl	800c620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	689a      	ldr	r2, [r3, #8]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f042 0201 	orr.w	r2, r2, #1
 800bee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fc3b 	bl	800c764 <UART_CheckIdleState>
 800beee:	4603      	mov	r3, r0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08a      	sub	sp, #40	; 0x28
 800befc:	af02      	add	r7, sp, #8
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	603b      	str	r3, [r7, #0]
 800bf04:	4613      	mov	r3, r2
 800bf06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf0e:	2b20      	cmp	r3, #32
 800bf10:	f040 8084 	bne.w	800c01c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d002      	beq.n	800bf20 <HAL_UART_Transmit+0x28>
 800bf1a:	88fb      	ldrh	r3, [r7, #6]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	e07c      	b.n	800c01e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d101      	bne.n	800bf32 <HAL_UART_Transmit+0x3a>
 800bf2e:	2302      	movs	r3, #2
 800bf30:	e075      	b.n	800c01e <HAL_UART_Transmit+0x126>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2201      	movs	r2, #1
 800bf36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2221      	movs	r2, #33	; 0x21
 800bf46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf4a:	f7fa fcc1 	bl	80068d0 <HAL_GetTick>
 800bf4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	88fa      	ldrh	r2, [r7, #6]
 800bf54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	88fa      	ldrh	r2, [r7, #6]
 800bf5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf68:	d108      	bne.n	800bf7c <HAL_UART_Transmit+0x84>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d104      	bne.n	800bf7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	61bb      	str	r3, [r7, #24]
 800bf7a:	e003      	b.n	800bf84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bf8c:	e02d      	b.n	800bfea <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2200      	movs	r2, #0
 800bf96:	2180      	movs	r1, #128	; 0x80
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 fc2e 	bl	800c7fa <UART_WaitOnFlagUntilTimeout>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e03a      	b.n	800c01e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	881a      	ldrh	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfba:	b292      	uxth	r2, r2
 800bfbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	3302      	adds	r3, #2
 800bfc2:	61bb      	str	r3, [r7, #24]
 800bfc4:	e008      	b.n	800bfd8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	781a      	ldrb	r2, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	b292      	uxth	r2, r2
 800bfd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1cb      	bne.n	800bf8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2200      	movs	r2, #0
 800bffe:	2140      	movs	r1, #64	; 0x40
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f000 fbfa 	bl	800c7fa <UART_WaitOnFlagUntilTimeout>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e006      	b.n	800c01e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2220      	movs	r2, #32
 800c014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	e000      	b.n	800c01e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800c01c:	2302      	movs	r3, #2
  }
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3720      	adds	r7, #32
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
	...

0800c028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c02c:	b08c      	sub	sp, #48	; 0x30
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	689a      	ldr	r2, [r3, #8]
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	431a      	orrs	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	431a      	orrs	r2, r3
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	69db      	ldr	r3, [r3, #28]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	4baa      	ldr	r3, [pc, #680]	; (800c300 <UART_SetConfig+0x2d8>)
 800c058:	4013      	ands	r3, r2
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	6812      	ldr	r2, [r2, #0]
 800c05e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c060:	430b      	orrs	r3, r1
 800c062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	430a      	orrs	r2, r1
 800c078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a9f      	ldr	r2, [pc, #636]	; (800c304 <UART_SetConfig+0x2dc>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d004      	beq.n	800c094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c090:	4313      	orrs	r3, r2
 800c092:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c09e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	6812      	ldr	r2, [r2, #0]
 800c0a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0a8:	430b      	orrs	r3, r1
 800c0aa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b2:	f023 010f 	bic.w	r1, r3, #15
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	430a      	orrs	r2, r1
 800c0c0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a90      	ldr	r2, [pc, #576]	; (800c308 <UART_SetConfig+0x2e0>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d125      	bne.n	800c118 <UART_SetConfig+0xf0>
 800c0cc:	4b8f      	ldr	r3, [pc, #572]	; (800c30c <UART_SetConfig+0x2e4>)
 800c0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0d2:	f003 0303 	and.w	r3, r3, #3
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d81a      	bhi.n	800c110 <UART_SetConfig+0xe8>
 800c0da:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <UART_SetConfig+0xb8>)
 800c0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e0:	0800c0f1 	.word	0x0800c0f1
 800c0e4:	0800c101 	.word	0x0800c101
 800c0e8:	0800c0f9 	.word	0x0800c0f9
 800c0ec:	0800c109 	.word	0x0800c109
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0f6:	e116      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0fe:	e112      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c100:	2304      	movs	r3, #4
 800c102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c106:	e10e      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c108:	2308      	movs	r3, #8
 800c10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c10e:	e10a      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c110:	2310      	movs	r3, #16
 800c112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c116:	e106      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a7c      	ldr	r2, [pc, #496]	; (800c310 <UART_SetConfig+0x2e8>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d138      	bne.n	800c194 <UART_SetConfig+0x16c>
 800c122:	4b7a      	ldr	r3, [pc, #488]	; (800c30c <UART_SetConfig+0x2e4>)
 800c124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c128:	f003 030c 	and.w	r3, r3, #12
 800c12c:	2b0c      	cmp	r3, #12
 800c12e:	d82d      	bhi.n	800c18c <UART_SetConfig+0x164>
 800c130:	a201      	add	r2, pc, #4	; (adr r2, 800c138 <UART_SetConfig+0x110>)
 800c132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c136:	bf00      	nop
 800c138:	0800c16d 	.word	0x0800c16d
 800c13c:	0800c18d 	.word	0x0800c18d
 800c140:	0800c18d 	.word	0x0800c18d
 800c144:	0800c18d 	.word	0x0800c18d
 800c148:	0800c17d 	.word	0x0800c17d
 800c14c:	0800c18d 	.word	0x0800c18d
 800c150:	0800c18d 	.word	0x0800c18d
 800c154:	0800c18d 	.word	0x0800c18d
 800c158:	0800c175 	.word	0x0800c175
 800c15c:	0800c18d 	.word	0x0800c18d
 800c160:	0800c18d 	.word	0x0800c18d
 800c164:	0800c18d 	.word	0x0800c18d
 800c168:	0800c185 	.word	0x0800c185
 800c16c:	2300      	movs	r3, #0
 800c16e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c172:	e0d8      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c174:	2302      	movs	r3, #2
 800c176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c17a:	e0d4      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c17c:	2304      	movs	r3, #4
 800c17e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c182:	e0d0      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c184:	2308      	movs	r3, #8
 800c186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c18a:	e0cc      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c18c:	2310      	movs	r3, #16
 800c18e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c192:	e0c8      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a5e      	ldr	r2, [pc, #376]	; (800c314 <UART_SetConfig+0x2ec>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d125      	bne.n	800c1ea <UART_SetConfig+0x1c2>
 800c19e:	4b5b      	ldr	r3, [pc, #364]	; (800c30c <UART_SetConfig+0x2e4>)
 800c1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c1a8:	2b30      	cmp	r3, #48	; 0x30
 800c1aa:	d016      	beq.n	800c1da <UART_SetConfig+0x1b2>
 800c1ac:	2b30      	cmp	r3, #48	; 0x30
 800c1ae:	d818      	bhi.n	800c1e2 <UART_SetConfig+0x1ba>
 800c1b0:	2b20      	cmp	r3, #32
 800c1b2:	d00a      	beq.n	800c1ca <UART_SetConfig+0x1a2>
 800c1b4:	2b20      	cmp	r3, #32
 800c1b6:	d814      	bhi.n	800c1e2 <UART_SetConfig+0x1ba>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <UART_SetConfig+0x19a>
 800c1bc:	2b10      	cmp	r3, #16
 800c1be:	d008      	beq.n	800c1d2 <UART_SetConfig+0x1aa>
 800c1c0:	e00f      	b.n	800c1e2 <UART_SetConfig+0x1ba>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1c8:	e0ad      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1d0:	e0a9      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c1d2:	2304      	movs	r3, #4
 800c1d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1d8:	e0a5      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c1da:	2308      	movs	r3, #8
 800c1dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1e0:	e0a1      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c1e2:	2310      	movs	r3, #16
 800c1e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1e8:	e09d      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a4a      	ldr	r2, [pc, #296]	; (800c318 <UART_SetConfig+0x2f0>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d125      	bne.n	800c240 <UART_SetConfig+0x218>
 800c1f4:	4b45      	ldr	r3, [pc, #276]	; (800c30c <UART_SetConfig+0x2e4>)
 800c1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c1fe:	2bc0      	cmp	r3, #192	; 0xc0
 800c200:	d016      	beq.n	800c230 <UART_SetConfig+0x208>
 800c202:	2bc0      	cmp	r3, #192	; 0xc0
 800c204:	d818      	bhi.n	800c238 <UART_SetConfig+0x210>
 800c206:	2b80      	cmp	r3, #128	; 0x80
 800c208:	d00a      	beq.n	800c220 <UART_SetConfig+0x1f8>
 800c20a:	2b80      	cmp	r3, #128	; 0x80
 800c20c:	d814      	bhi.n	800c238 <UART_SetConfig+0x210>
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <UART_SetConfig+0x1f0>
 800c212:	2b40      	cmp	r3, #64	; 0x40
 800c214:	d008      	beq.n	800c228 <UART_SetConfig+0x200>
 800c216:	e00f      	b.n	800c238 <UART_SetConfig+0x210>
 800c218:	2300      	movs	r3, #0
 800c21a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c21e:	e082      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c220:	2302      	movs	r3, #2
 800c222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c226:	e07e      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c228:	2304      	movs	r3, #4
 800c22a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c22e:	e07a      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c230:	2308      	movs	r3, #8
 800c232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c236:	e076      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c238:	2310      	movs	r3, #16
 800c23a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c23e:	e072      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a35      	ldr	r2, [pc, #212]	; (800c31c <UART_SetConfig+0x2f4>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d12a      	bne.n	800c2a0 <UART_SetConfig+0x278>
 800c24a:	4b30      	ldr	r3, [pc, #192]	; (800c30c <UART_SetConfig+0x2e4>)
 800c24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c258:	d01a      	beq.n	800c290 <UART_SetConfig+0x268>
 800c25a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c25e:	d81b      	bhi.n	800c298 <UART_SetConfig+0x270>
 800c260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c264:	d00c      	beq.n	800c280 <UART_SetConfig+0x258>
 800c266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c26a:	d815      	bhi.n	800c298 <UART_SetConfig+0x270>
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <UART_SetConfig+0x250>
 800c270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c274:	d008      	beq.n	800c288 <UART_SetConfig+0x260>
 800c276:	e00f      	b.n	800c298 <UART_SetConfig+0x270>
 800c278:	2300      	movs	r3, #0
 800c27a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c27e:	e052      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c280:	2302      	movs	r3, #2
 800c282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c286:	e04e      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c288:	2304      	movs	r3, #4
 800c28a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c28e:	e04a      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c290:	2308      	movs	r3, #8
 800c292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c296:	e046      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c298:	2310      	movs	r3, #16
 800c29a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c29e:	e042      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a17      	ldr	r2, [pc, #92]	; (800c304 <UART_SetConfig+0x2dc>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d13a      	bne.n	800c320 <UART_SetConfig+0x2f8>
 800c2aa:	4b18      	ldr	r3, [pc, #96]	; (800c30c <UART_SetConfig+0x2e4>)
 800c2ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c2b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2b8:	d01a      	beq.n	800c2f0 <UART_SetConfig+0x2c8>
 800c2ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2be:	d81b      	bhi.n	800c2f8 <UART_SetConfig+0x2d0>
 800c2c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2c4:	d00c      	beq.n	800c2e0 <UART_SetConfig+0x2b8>
 800c2c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2ca:	d815      	bhi.n	800c2f8 <UART_SetConfig+0x2d0>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d003      	beq.n	800c2d8 <UART_SetConfig+0x2b0>
 800c2d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2d4:	d008      	beq.n	800c2e8 <UART_SetConfig+0x2c0>
 800c2d6:	e00f      	b.n	800c2f8 <UART_SetConfig+0x2d0>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2de:	e022      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2e6:	e01e      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c2e8:	2304      	movs	r3, #4
 800c2ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2ee:	e01a      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c2f0:	2308      	movs	r3, #8
 800c2f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2f6:	e016      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c2f8:	2310      	movs	r3, #16
 800c2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2fe:	e012      	b.n	800c326 <UART_SetConfig+0x2fe>
 800c300:	cfff69f3 	.word	0xcfff69f3
 800c304:	40008000 	.word	0x40008000
 800c308:	40013800 	.word	0x40013800
 800c30c:	40021000 	.word	0x40021000
 800c310:	40004400 	.word	0x40004400
 800c314:	40004800 	.word	0x40004800
 800c318:	40004c00 	.word	0x40004c00
 800c31c:	40005000 	.word	0x40005000
 800c320:	2310      	movs	r3, #16
 800c322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4aae      	ldr	r2, [pc, #696]	; (800c5e4 <UART_SetConfig+0x5bc>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	f040 8097 	bne.w	800c460 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c336:	2b08      	cmp	r3, #8
 800c338:	d823      	bhi.n	800c382 <UART_SetConfig+0x35a>
 800c33a:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <UART_SetConfig+0x318>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c365 	.word	0x0800c365
 800c344:	0800c383 	.word	0x0800c383
 800c348:	0800c36d 	.word	0x0800c36d
 800c34c:	0800c383 	.word	0x0800c383
 800c350:	0800c373 	.word	0x0800c373
 800c354:	0800c383 	.word	0x0800c383
 800c358:	0800c383 	.word	0x0800c383
 800c35c:	0800c383 	.word	0x0800c383
 800c360:	0800c37b 	.word	0x0800c37b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c364:	f7fe fa8e 	bl	800a884 <HAL_RCC_GetPCLK1Freq>
 800c368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c36a:	e010      	b.n	800c38e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c36c:	4b9e      	ldr	r3, [pc, #632]	; (800c5e8 <UART_SetConfig+0x5c0>)
 800c36e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c370:	e00d      	b.n	800c38e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c372:	f7fe f9ef 	bl	800a754 <HAL_RCC_GetSysClockFreq>
 800c376:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c378:	e009      	b.n	800c38e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c37e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c380:	e005      	b.n	800c38e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c382:	2300      	movs	r3, #0
 800c384:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c38c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 8130 	beq.w	800c5f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	4a94      	ldr	r2, [pc, #592]	; (800c5ec <UART_SetConfig+0x5c4>)
 800c39c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	4413      	add	r3, r2
 800c3b4:	69ba      	ldr	r2, [r7, #24]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d305      	bcc.n	800c3c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3c0:	69ba      	ldr	r2, [r7, #24]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d903      	bls.n	800c3ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c3cc:	e113      	b.n	800c5f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	60bb      	str	r3, [r7, #8]
 800c3d4:	60fa      	str	r2, [r7, #12]
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3da:	4a84      	ldr	r2, [pc, #528]	; (800c5ec <UART_SetConfig+0x5c4>)
 800c3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	603b      	str	r3, [r7, #0]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3f0:	f7f4 fb9c 	bl	8000b2c <__aeabi_uldivmod>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f04f 0200 	mov.w	r2, #0
 800c400:	f04f 0300 	mov.w	r3, #0
 800c404:	020b      	lsls	r3, r1, #8
 800c406:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c40a:	0202      	lsls	r2, r0, #8
 800c40c:	6979      	ldr	r1, [r7, #20]
 800c40e:	6849      	ldr	r1, [r1, #4]
 800c410:	0849      	lsrs	r1, r1, #1
 800c412:	2000      	movs	r0, #0
 800c414:	460c      	mov	r4, r1
 800c416:	4605      	mov	r5, r0
 800c418:	eb12 0804 	adds.w	r8, r2, r4
 800c41c:	eb43 0905 	adc.w	r9, r3, r5
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	469a      	mov	sl, r3
 800c428:	4693      	mov	fp, r2
 800c42a:	4652      	mov	r2, sl
 800c42c:	465b      	mov	r3, fp
 800c42e:	4640      	mov	r0, r8
 800c430:	4649      	mov	r1, r9
 800c432:	f7f4 fb7b 	bl	8000b2c <__aeabi_uldivmod>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	4613      	mov	r3, r2
 800c43c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c444:	d308      	bcc.n	800c458 <UART_SetConfig+0x430>
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c44c:	d204      	bcs.n	800c458 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6a3a      	ldr	r2, [r7, #32]
 800c454:	60da      	str	r2, [r3, #12]
 800c456:	e0ce      	b.n	800c5f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c45e:	e0ca      	b.n	800c5f6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	69db      	ldr	r3, [r3, #28]
 800c464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c468:	d166      	bne.n	800c538 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c46a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c46e:	2b08      	cmp	r3, #8
 800c470:	d827      	bhi.n	800c4c2 <UART_SetConfig+0x49a>
 800c472:	a201      	add	r2, pc, #4	; (adr r2, 800c478 <UART_SetConfig+0x450>)
 800c474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c478:	0800c49d 	.word	0x0800c49d
 800c47c:	0800c4a5 	.word	0x0800c4a5
 800c480:	0800c4ad 	.word	0x0800c4ad
 800c484:	0800c4c3 	.word	0x0800c4c3
 800c488:	0800c4b3 	.word	0x0800c4b3
 800c48c:	0800c4c3 	.word	0x0800c4c3
 800c490:	0800c4c3 	.word	0x0800c4c3
 800c494:	0800c4c3 	.word	0x0800c4c3
 800c498:	0800c4bb 	.word	0x0800c4bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c49c:	f7fe f9f2 	bl	800a884 <HAL_RCC_GetPCLK1Freq>
 800c4a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4a2:	e014      	b.n	800c4ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4a4:	f7fe fa04 	bl	800a8b0 <HAL_RCC_GetPCLK2Freq>
 800c4a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4aa:	e010      	b.n	800c4ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4ac:	4b4e      	ldr	r3, [pc, #312]	; (800c5e8 <UART_SetConfig+0x5c0>)
 800c4ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c4b0:	e00d      	b.n	800c4ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4b2:	f7fe f94f 	bl	800a754 <HAL_RCC_GetSysClockFreq>
 800c4b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4b8:	e009      	b.n	800c4ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c4c0:	e005      	b.n	800c4ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c4cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 8090 	beq.w	800c5f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4da:	4a44      	ldr	r2, [pc, #272]	; (800c5ec <UART_SetConfig+0x5c4>)
 800c4dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4e8:	005a      	lsls	r2, r3, #1
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	085b      	lsrs	r3, r3, #1
 800c4f0:	441a      	add	r2, r3
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4fc:	6a3b      	ldr	r3, [r7, #32]
 800c4fe:	2b0f      	cmp	r3, #15
 800c500:	d916      	bls.n	800c530 <UART_SetConfig+0x508>
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c508:	d212      	bcs.n	800c530 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	f023 030f 	bic.w	r3, r3, #15
 800c512:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	085b      	lsrs	r3, r3, #1
 800c518:	b29b      	uxth	r3, r3
 800c51a:	f003 0307 	and.w	r3, r3, #7
 800c51e:	b29a      	uxth	r2, r3
 800c520:	8bfb      	ldrh	r3, [r7, #30]
 800c522:	4313      	orrs	r3, r2
 800c524:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	8bfa      	ldrh	r2, [r7, #30]
 800c52c:	60da      	str	r2, [r3, #12]
 800c52e:	e062      	b.n	800c5f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c536:	e05e      	b.n	800c5f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c538:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c53c:	2b08      	cmp	r3, #8
 800c53e:	d828      	bhi.n	800c592 <UART_SetConfig+0x56a>
 800c540:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <UART_SetConfig+0x520>)
 800c542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c546:	bf00      	nop
 800c548:	0800c56d 	.word	0x0800c56d
 800c54c:	0800c575 	.word	0x0800c575
 800c550:	0800c57d 	.word	0x0800c57d
 800c554:	0800c593 	.word	0x0800c593
 800c558:	0800c583 	.word	0x0800c583
 800c55c:	0800c593 	.word	0x0800c593
 800c560:	0800c593 	.word	0x0800c593
 800c564:	0800c593 	.word	0x0800c593
 800c568:	0800c58b 	.word	0x0800c58b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c56c:	f7fe f98a 	bl	800a884 <HAL_RCC_GetPCLK1Freq>
 800c570:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c572:	e014      	b.n	800c59e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c574:	f7fe f99c 	bl	800a8b0 <HAL_RCC_GetPCLK2Freq>
 800c578:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c57a:	e010      	b.n	800c59e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c57c:	4b1a      	ldr	r3, [pc, #104]	; (800c5e8 <UART_SetConfig+0x5c0>)
 800c57e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c580:	e00d      	b.n	800c59e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c582:	f7fe f8e7 	bl	800a754 <HAL_RCC_GetSysClockFreq>
 800c586:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c588:	e009      	b.n	800c59e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c58a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c58e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c590:	e005      	b.n	800c59e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c592:	2300      	movs	r3, #0
 800c594:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c59c:	bf00      	nop
    }

    if (pclk != 0U)
 800c59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d028      	beq.n	800c5f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a8:	4a10      	ldr	r2, [pc, #64]	; (800c5ec <UART_SetConfig+0x5c4>)
 800c5aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	085b      	lsrs	r3, r3, #1
 800c5bc:	441a      	add	r2, r3
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5c6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	2b0f      	cmp	r3, #15
 800c5cc:	d910      	bls.n	800c5f0 <UART_SetConfig+0x5c8>
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5d4:	d20c      	bcs.n	800c5f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	60da      	str	r2, [r3, #12]
 800c5e0:	e009      	b.n	800c5f6 <UART_SetConfig+0x5ce>
 800c5e2:	bf00      	nop
 800c5e4:	40008000 	.word	0x40008000
 800c5e8:	00f42400 	.word	0x00f42400
 800c5ec:	0800e3bc 	.word	0x0800e3bc
      }
      else
      {
        ret = HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2201      	movs	r2, #1
 800c602:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2200      	movs	r2, #0
 800c60a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2200      	movs	r2, #0
 800c610:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c612:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c616:	4618      	mov	r0, r3
 800c618:	3730      	adds	r7, #48	; 0x30
 800c61a:	46bd      	mov	sp, r7
 800c61c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62c:	f003 0301 	and.w	r3, r3, #1
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00a      	beq.n	800c64a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	430a      	orrs	r2, r1
 800c648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64e:	f003 0302 	and.w	r3, r3, #2
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00a      	beq.n	800c66c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	430a      	orrs	r2, r1
 800c66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c670:	f003 0304 	and.w	r3, r3, #4
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00a      	beq.n	800c68e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	430a      	orrs	r2, r1
 800c68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c692:	f003 0308 	and.w	r3, r3, #8
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00a      	beq.n	800c6b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	430a      	orrs	r2, r1
 800c6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b4:	f003 0310 	and.w	r3, r3, #16
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00a      	beq.n	800c6d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d6:	f003 0320 	and.w	r3, r3, #32
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	430a      	orrs	r2, r1
 800c6f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d01a      	beq.n	800c736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	430a      	orrs	r2, r1
 800c714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c71e:	d10a      	bne.n	800c736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	430a      	orrs	r2, r1
 800c734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00a      	beq.n	800c758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	430a      	orrs	r2, r1
 800c756:	605a      	str	r2, [r3, #4]
  }
}
 800c758:	bf00      	nop
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af02      	add	r7, sp, #8
 800c76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c774:	f7fa f8ac 	bl	80068d0 <HAL_GetTick>
 800c778:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 0308 	and.w	r3, r3, #8
 800c784:	2b08      	cmp	r3, #8
 800c786:	d10e      	bne.n	800c7a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f82f 	bl	800c7fa <UART_WaitOnFlagUntilTimeout>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e025      	b.n	800c7f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0304 	and.w	r3, r3, #4
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d10e      	bne.n	800c7d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f819 	bl	800c7fa <UART_WaitOnFlagUntilTimeout>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d001      	beq.n	800c7d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e00f      	b.n	800c7f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2220      	movs	r2, #32
 800c7d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2220      	movs	r2, #32
 800c7de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b09c      	sub	sp, #112	; 0x70
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	60b9      	str	r1, [r7, #8]
 800c804:	603b      	str	r3, [r7, #0]
 800c806:	4613      	mov	r3, r2
 800c808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c80a:	e0a9      	b.n	800c960 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c80c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c812:	f000 80a5 	beq.w	800c960 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c816:	f7fa f85b 	bl	80068d0 <HAL_GetTick>
 800c81a:	4602      	mov	r2, r0
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c822:	429a      	cmp	r2, r3
 800c824:	d302      	bcc.n	800c82c <UART_WaitOnFlagUntilTimeout+0x32>
 800c826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d140      	bne.n	800c8ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c834:	e853 3f00 	ldrex	r3, [r3]
 800c838:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c83c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c840:	667b      	str	r3, [r7, #100]	; 0x64
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	461a      	mov	r2, r3
 800c848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c84a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c84c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c852:	e841 2300 	strex	r3, r2, [r1]
 800c856:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1e6      	bne.n	800c82c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3308      	adds	r3, #8
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c868:	e853 3f00 	ldrex	r3, [r3]
 800c86c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	f023 0301 	bic.w	r3, r3, #1
 800c874:	663b      	str	r3, [r7, #96]	; 0x60
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3308      	adds	r3, #8
 800c87c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c87e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c880:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c886:	e841 2300 	strex	r3, r2, [r1]
 800c88a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1e5      	bne.n	800c85e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2220      	movs	r2, #32
 800c896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2220      	movs	r2, #32
 800c89e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e069      	b.n	800c982 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 0304 	and.w	r3, r3, #4
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d051      	beq.n	800c960 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	69db      	ldr	r3, [r3, #28]
 800c8c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8ca:	d149      	bne.n	800c960 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c8d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	e853 3f00 	ldrex	r3, [r3]
 800c8e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c8ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8fc:	e841 2300 	strex	r3, r2, [r1]
 800c900:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1e6      	bne.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3308      	adds	r3, #8
 800c90e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	e853 3f00 	ldrex	r3, [r3]
 800c916:	613b      	str	r3, [r7, #16]
   return(result);
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	f023 0301 	bic.w	r3, r3, #1
 800c91e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3308      	adds	r3, #8
 800c926:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c928:	623a      	str	r2, [r7, #32]
 800c92a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92c:	69f9      	ldr	r1, [r7, #28]
 800c92e:	6a3a      	ldr	r2, [r7, #32]
 800c930:	e841 2300 	strex	r3, r2, [r1]
 800c934:	61bb      	str	r3, [r7, #24]
   return(result);
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1e5      	bne.n	800c908 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2220      	movs	r2, #32
 800c940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2220      	movs	r2, #32
 800c948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2220      	movs	r2, #32
 800c950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e010      	b.n	800c982 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	69da      	ldr	r2, [r3, #28]
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	4013      	ands	r3, r2
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	bf0c      	ite	eq
 800c970:	2301      	moveq	r3, #1
 800c972:	2300      	movne	r3, #0
 800c974:	b2db      	uxtb	r3, r3
 800c976:	461a      	mov	r2, r3
 800c978:	79fb      	ldrb	r3, [r7, #7]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	f43f af46 	beq.w	800c80c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3770      	adds	r7, #112	; 0x70
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b085      	sub	sp, #20
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d101      	bne.n	800c9a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c99c:	2302      	movs	r3, #2
 800c99e:	e027      	b.n	800c9f0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2224      	movs	r2, #36	; 0x24
 800c9ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f022 0201 	bic.w	r2, r2, #1
 800c9c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c9ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2220      	movs	r2, #32
 800c9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d101      	bne.n	800ca14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca10:	2302      	movs	r3, #2
 800ca12:	e02d      	b.n	800ca70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2224      	movs	r2, #36	; 0x24
 800ca20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f022 0201 	bic.w	r2, r2, #1
 800ca3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	430a      	orrs	r2, r1
 800ca4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f84f 	bl	800caf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2220      	movs	r2, #32
 800ca62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d101      	bne.n	800ca90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	e02d      	b.n	800caec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2224      	movs	r2, #36	; 0x24
 800ca9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 0201 	bic.w	r2, r2, #1
 800cab6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	430a      	orrs	r2, r1
 800caca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f811 	bl	800caf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2220      	movs	r2, #32
 800cade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d108      	bne.n	800cb16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb14:	e031      	b.n	800cb7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb16:	2308      	movs	r3, #8
 800cb18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb1a:	2308      	movs	r3, #8
 800cb1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	0e5b      	lsrs	r3, r3, #25
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	f003 0307 	and.w	r3, r3, #7
 800cb2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	0f5b      	lsrs	r3, r3, #29
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	f003 0307 	and.w	r3, r3, #7
 800cb3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb3e:	7bbb      	ldrb	r3, [r7, #14]
 800cb40:	7b3a      	ldrb	r2, [r7, #12]
 800cb42:	4911      	ldr	r1, [pc, #68]	; (800cb88 <UARTEx_SetNbDataToProcess+0x94>)
 800cb44:	5c8a      	ldrb	r2, [r1, r2]
 800cb46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb4a:	7b3a      	ldrb	r2, [r7, #12]
 800cb4c:	490f      	ldr	r1, [pc, #60]	; (800cb8c <UARTEx_SetNbDataToProcess+0x98>)
 800cb4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb50:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
 800cb5e:	7b7a      	ldrb	r2, [r7, #13]
 800cb60:	4909      	ldr	r1, [pc, #36]	; (800cb88 <UARTEx_SetNbDataToProcess+0x94>)
 800cb62:	5c8a      	ldrb	r2, [r1, r2]
 800cb64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb68:	7b7a      	ldrb	r2, [r7, #13]
 800cb6a:	4908      	ldr	r1, [pc, #32]	; (800cb8c <UARTEx_SetNbDataToProcess+0x98>)
 800cb6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cb7a:	bf00      	nop
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	0800e3d4 	.word	0x0800e3d4
 800cb8c:	0800e3dc 	.word	0x0800e3dc

0800cb90 <arm_sin_f32>:
 800cb90:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cc10 <arm_sin_f32+0x80>
 800cb94:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cb98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cba4:	d504      	bpl.n	800cbb0 <arm_sin_f32+0x20>
 800cba6:	ee17 3a90 	vmov	r3, s15
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	ee07 3a90 	vmov	s15, r3
 800cbb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbb4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800cc14 <arm_sin_f32+0x84>
 800cbb8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cbbc:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cbc0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800cbc4:	ee17 3a90 	vmov	r3, s15
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbce:	d21a      	bcs.n	800cc06 <arm_sin_f32+0x76>
 800cbd0:	ee07 3a90 	vmov	s15, r3
 800cbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd8:	1c59      	adds	r1, r3, #1
 800cbda:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cbde:	4a0e      	ldr	r2, [pc, #56]	; (800cc18 <arm_sin_f32+0x88>)
 800cbe0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cbe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbe8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800cbec:	ed93 7a00 	vldr	s14, [r3]
 800cbf0:	edd2 6a00 	vldr	s13, [r2]
 800cbf4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cbf8:	ee20 0a26 	vmul.f32	s0, s0, s13
 800cbfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc00:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cc04:	4770      	bx	lr
 800cc06:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e7e6      	b.n	800cbde <arm_sin_f32+0x4e>
 800cc10:	3e22f983 	.word	0x3e22f983
 800cc14:	44000000 	.word	0x44000000
 800cc18:	0800e3e4 	.word	0x0800e3e4

0800cc1c <__errno>:
 800cc1c:	4b01      	ldr	r3, [pc, #4]	; (800cc24 <__errno+0x8>)
 800cc1e:	6818      	ldr	r0, [r3, #0]
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	200001f8 	.word	0x200001f8

0800cc28 <__libc_init_array>:
 800cc28:	b570      	push	{r4, r5, r6, lr}
 800cc2a:	4d0d      	ldr	r5, [pc, #52]	; (800cc60 <__libc_init_array+0x38>)
 800cc2c:	4c0d      	ldr	r4, [pc, #52]	; (800cc64 <__libc_init_array+0x3c>)
 800cc2e:	1b64      	subs	r4, r4, r5
 800cc30:	10a4      	asrs	r4, r4, #2
 800cc32:	2600      	movs	r6, #0
 800cc34:	42a6      	cmp	r6, r4
 800cc36:	d109      	bne.n	800cc4c <__libc_init_array+0x24>
 800cc38:	4d0b      	ldr	r5, [pc, #44]	; (800cc68 <__libc_init_array+0x40>)
 800cc3a:	4c0c      	ldr	r4, [pc, #48]	; (800cc6c <__libc_init_array+0x44>)
 800cc3c:	f001 fa34 	bl	800e0a8 <_init>
 800cc40:	1b64      	subs	r4, r4, r5
 800cc42:	10a4      	asrs	r4, r4, #2
 800cc44:	2600      	movs	r6, #0
 800cc46:	42a6      	cmp	r6, r4
 800cc48:	d105      	bne.n	800cc56 <__libc_init_array+0x2e>
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
 800cc4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc50:	4798      	blx	r3
 800cc52:	3601      	adds	r6, #1
 800cc54:	e7ee      	b.n	800cc34 <__libc_init_array+0xc>
 800cc56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc5a:	4798      	blx	r3
 800cc5c:	3601      	adds	r6, #1
 800cc5e:	e7f2      	b.n	800cc46 <__libc_init_array+0x1e>
 800cc60:	0800ed38 	.word	0x0800ed38
 800cc64:	0800ed38 	.word	0x0800ed38
 800cc68:	0800ed38 	.word	0x0800ed38
 800cc6c:	0800ed3c 	.word	0x0800ed3c

0800cc70 <memcpy>:
 800cc70:	440a      	add	r2, r1
 800cc72:	4291      	cmp	r1, r2
 800cc74:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc78:	d100      	bne.n	800cc7c <memcpy+0xc>
 800cc7a:	4770      	bx	lr
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc86:	4291      	cmp	r1, r2
 800cc88:	d1f9      	bne.n	800cc7e <memcpy+0xe>
 800cc8a:	bd10      	pop	{r4, pc}

0800cc8c <memset>:
 800cc8c:	4402      	add	r2, r0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d100      	bne.n	800cc96 <memset+0xa>
 800cc94:	4770      	bx	lr
 800cc96:	f803 1b01 	strb.w	r1, [r3], #1
 800cc9a:	e7f9      	b.n	800cc90 <memset+0x4>

0800cc9c <rand>:
 800cc9c:	4b16      	ldr	r3, [pc, #88]	; (800ccf8 <rand+0x5c>)
 800cc9e:	b510      	push	{r4, lr}
 800cca0:	681c      	ldr	r4, [r3, #0]
 800cca2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cca4:	b9b3      	cbnz	r3, 800ccd4 <rand+0x38>
 800cca6:	2018      	movs	r0, #24
 800cca8:	f000 f886 	bl	800cdb8 <malloc>
 800ccac:	63a0      	str	r0, [r4, #56]	; 0x38
 800ccae:	b928      	cbnz	r0, 800ccbc <rand+0x20>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <rand+0x60>)
 800ccb4:	4812      	ldr	r0, [pc, #72]	; (800cd00 <rand+0x64>)
 800ccb6:	214e      	movs	r1, #78	; 0x4e
 800ccb8:	f000 f84e 	bl	800cd58 <__assert_func>
 800ccbc:	4a11      	ldr	r2, [pc, #68]	; (800cd04 <rand+0x68>)
 800ccbe:	4b12      	ldr	r3, [pc, #72]	; (800cd08 <rand+0x6c>)
 800ccc0:	e9c0 2300 	strd	r2, r3, [r0]
 800ccc4:	4b11      	ldr	r3, [pc, #68]	; (800cd0c <rand+0x70>)
 800ccc6:	6083      	str	r3, [r0, #8]
 800ccc8:	230b      	movs	r3, #11
 800ccca:	8183      	strh	r3, [r0, #12]
 800cccc:	2201      	movs	r2, #1
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ccd4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ccd6:	4a0e      	ldr	r2, [pc, #56]	; (800cd10 <rand+0x74>)
 800ccd8:	6920      	ldr	r0, [r4, #16]
 800ccda:	6963      	ldr	r3, [r4, #20]
 800ccdc:	490d      	ldr	r1, [pc, #52]	; (800cd14 <rand+0x78>)
 800ccde:	4342      	muls	r2, r0
 800cce0:	fb01 2203 	mla	r2, r1, r3, r2
 800cce4:	fba0 0101 	umull	r0, r1, r0, r1
 800cce8:	1c43      	adds	r3, r0, #1
 800ccea:	eb42 0001 	adc.w	r0, r2, r1
 800ccee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ccf2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ccf6:	bd10      	pop	{r4, pc}
 800ccf8:	200001f8 	.word	0x200001f8
 800ccfc:	0800ebec 	.word	0x0800ebec
 800cd00:	0800ec03 	.word	0x0800ec03
 800cd04:	abcd330e 	.word	0xabcd330e
 800cd08:	e66d1234 	.word	0xe66d1234
 800cd0c:	0005deec 	.word	0x0005deec
 800cd10:	5851f42d 	.word	0x5851f42d
 800cd14:	4c957f2d 	.word	0x4c957f2d

0800cd18 <siprintf>:
 800cd18:	b40e      	push	{r1, r2, r3}
 800cd1a:	b500      	push	{lr}
 800cd1c:	b09c      	sub	sp, #112	; 0x70
 800cd1e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd20:	9002      	str	r0, [sp, #8]
 800cd22:	9006      	str	r0, [sp, #24]
 800cd24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd28:	4809      	ldr	r0, [pc, #36]	; (800cd50 <siprintf+0x38>)
 800cd2a:	9107      	str	r1, [sp, #28]
 800cd2c:	9104      	str	r1, [sp, #16]
 800cd2e:	4909      	ldr	r1, [pc, #36]	; (800cd54 <siprintf+0x3c>)
 800cd30:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd34:	9105      	str	r1, [sp, #20]
 800cd36:	6800      	ldr	r0, [r0, #0]
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	a902      	add	r1, sp, #8
 800cd3c:	f000 f980 	bl	800d040 <_svfiprintf_r>
 800cd40:	9b02      	ldr	r3, [sp, #8]
 800cd42:	2200      	movs	r2, #0
 800cd44:	701a      	strb	r2, [r3, #0]
 800cd46:	b01c      	add	sp, #112	; 0x70
 800cd48:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd4c:	b003      	add	sp, #12
 800cd4e:	4770      	bx	lr
 800cd50:	200001f8 	.word	0x200001f8
 800cd54:	ffff0208 	.word	0xffff0208

0800cd58 <__assert_func>:
 800cd58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd5a:	4614      	mov	r4, r2
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <__assert_func+0x2c>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4605      	mov	r5, r0
 800cd64:	68d8      	ldr	r0, [r3, #12]
 800cd66:	b14c      	cbz	r4, 800cd7c <__assert_func+0x24>
 800cd68:	4b07      	ldr	r3, [pc, #28]	; (800cd88 <__assert_func+0x30>)
 800cd6a:	9100      	str	r1, [sp, #0]
 800cd6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd70:	4906      	ldr	r1, [pc, #24]	; (800cd8c <__assert_func+0x34>)
 800cd72:	462b      	mov	r3, r5
 800cd74:	f000 f80e 	bl	800cd94 <fiprintf>
 800cd78:	f000 fe20 	bl	800d9bc <abort>
 800cd7c:	4b04      	ldr	r3, [pc, #16]	; (800cd90 <__assert_func+0x38>)
 800cd7e:	461c      	mov	r4, r3
 800cd80:	e7f3      	b.n	800cd6a <__assert_func+0x12>
 800cd82:	bf00      	nop
 800cd84:	200001f8 	.word	0x200001f8
 800cd88:	0800ec5e 	.word	0x0800ec5e
 800cd8c:	0800ec6b 	.word	0x0800ec6b
 800cd90:	0800ec99 	.word	0x0800ec99

0800cd94 <fiprintf>:
 800cd94:	b40e      	push	{r1, r2, r3}
 800cd96:	b503      	push	{r0, r1, lr}
 800cd98:	4601      	mov	r1, r0
 800cd9a:	ab03      	add	r3, sp, #12
 800cd9c:	4805      	ldr	r0, [pc, #20]	; (800cdb4 <fiprintf+0x20>)
 800cd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda2:	6800      	ldr	r0, [r0, #0]
 800cda4:	9301      	str	r3, [sp, #4]
 800cda6:	f000 fa75 	bl	800d294 <_vfiprintf_r>
 800cdaa:	b002      	add	sp, #8
 800cdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdb0:	b003      	add	sp, #12
 800cdb2:	4770      	bx	lr
 800cdb4:	200001f8 	.word	0x200001f8

0800cdb8 <malloc>:
 800cdb8:	4b02      	ldr	r3, [pc, #8]	; (800cdc4 <malloc+0xc>)
 800cdba:	4601      	mov	r1, r0
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	f000 b86f 	b.w	800cea0 <_malloc_r>
 800cdc2:	bf00      	nop
 800cdc4:	200001f8 	.word	0x200001f8

0800cdc8 <_free_r>:
 800cdc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdca:	2900      	cmp	r1, #0
 800cdcc:	d044      	beq.n	800ce58 <_free_r+0x90>
 800cdce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdd2:	9001      	str	r0, [sp, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f1a1 0404 	sub.w	r4, r1, #4
 800cdda:	bfb8      	it	lt
 800cddc:	18e4      	addlt	r4, r4, r3
 800cdde:	f001 f82f 	bl	800de40 <__malloc_lock>
 800cde2:	4a1e      	ldr	r2, [pc, #120]	; (800ce5c <_free_r+0x94>)
 800cde4:	9801      	ldr	r0, [sp, #4]
 800cde6:	6813      	ldr	r3, [r2, #0]
 800cde8:	b933      	cbnz	r3, 800cdf8 <_free_r+0x30>
 800cdea:	6063      	str	r3, [r4, #4]
 800cdec:	6014      	str	r4, [r2, #0]
 800cdee:	b003      	add	sp, #12
 800cdf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdf4:	f001 b82a 	b.w	800de4c <__malloc_unlock>
 800cdf8:	42a3      	cmp	r3, r4
 800cdfa:	d908      	bls.n	800ce0e <_free_r+0x46>
 800cdfc:	6825      	ldr	r5, [r4, #0]
 800cdfe:	1961      	adds	r1, r4, r5
 800ce00:	428b      	cmp	r3, r1
 800ce02:	bf01      	itttt	eq
 800ce04:	6819      	ldreq	r1, [r3, #0]
 800ce06:	685b      	ldreq	r3, [r3, #4]
 800ce08:	1949      	addeq	r1, r1, r5
 800ce0a:	6021      	streq	r1, [r4, #0]
 800ce0c:	e7ed      	b.n	800cdea <_free_r+0x22>
 800ce0e:	461a      	mov	r2, r3
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	b10b      	cbz	r3, 800ce18 <_free_r+0x50>
 800ce14:	42a3      	cmp	r3, r4
 800ce16:	d9fa      	bls.n	800ce0e <_free_r+0x46>
 800ce18:	6811      	ldr	r1, [r2, #0]
 800ce1a:	1855      	adds	r5, r2, r1
 800ce1c:	42a5      	cmp	r5, r4
 800ce1e:	d10b      	bne.n	800ce38 <_free_r+0x70>
 800ce20:	6824      	ldr	r4, [r4, #0]
 800ce22:	4421      	add	r1, r4
 800ce24:	1854      	adds	r4, r2, r1
 800ce26:	42a3      	cmp	r3, r4
 800ce28:	6011      	str	r1, [r2, #0]
 800ce2a:	d1e0      	bne.n	800cdee <_free_r+0x26>
 800ce2c:	681c      	ldr	r4, [r3, #0]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	6053      	str	r3, [r2, #4]
 800ce32:	4421      	add	r1, r4
 800ce34:	6011      	str	r1, [r2, #0]
 800ce36:	e7da      	b.n	800cdee <_free_r+0x26>
 800ce38:	d902      	bls.n	800ce40 <_free_r+0x78>
 800ce3a:	230c      	movs	r3, #12
 800ce3c:	6003      	str	r3, [r0, #0]
 800ce3e:	e7d6      	b.n	800cdee <_free_r+0x26>
 800ce40:	6825      	ldr	r5, [r4, #0]
 800ce42:	1961      	adds	r1, r4, r5
 800ce44:	428b      	cmp	r3, r1
 800ce46:	bf04      	itt	eq
 800ce48:	6819      	ldreq	r1, [r3, #0]
 800ce4a:	685b      	ldreq	r3, [r3, #4]
 800ce4c:	6063      	str	r3, [r4, #4]
 800ce4e:	bf04      	itt	eq
 800ce50:	1949      	addeq	r1, r1, r5
 800ce52:	6021      	streq	r1, [r4, #0]
 800ce54:	6054      	str	r4, [r2, #4]
 800ce56:	e7ca      	b.n	800cdee <_free_r+0x26>
 800ce58:	b003      	add	sp, #12
 800ce5a:	bd30      	pop	{r4, r5, pc}
 800ce5c:	20001790 	.word	0x20001790

0800ce60 <sbrk_aligned>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	4e0e      	ldr	r6, [pc, #56]	; (800ce9c <sbrk_aligned+0x3c>)
 800ce64:	460c      	mov	r4, r1
 800ce66:	6831      	ldr	r1, [r6, #0]
 800ce68:	4605      	mov	r5, r0
 800ce6a:	b911      	cbnz	r1, 800ce72 <sbrk_aligned+0x12>
 800ce6c:	f000 fcd6 	bl	800d81c <_sbrk_r>
 800ce70:	6030      	str	r0, [r6, #0]
 800ce72:	4621      	mov	r1, r4
 800ce74:	4628      	mov	r0, r5
 800ce76:	f000 fcd1 	bl	800d81c <_sbrk_r>
 800ce7a:	1c43      	adds	r3, r0, #1
 800ce7c:	d00a      	beq.n	800ce94 <sbrk_aligned+0x34>
 800ce7e:	1cc4      	adds	r4, r0, #3
 800ce80:	f024 0403 	bic.w	r4, r4, #3
 800ce84:	42a0      	cmp	r0, r4
 800ce86:	d007      	beq.n	800ce98 <sbrk_aligned+0x38>
 800ce88:	1a21      	subs	r1, r4, r0
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f000 fcc6 	bl	800d81c <_sbrk_r>
 800ce90:	3001      	adds	r0, #1
 800ce92:	d101      	bne.n	800ce98 <sbrk_aligned+0x38>
 800ce94:	f04f 34ff 	mov.w	r4, #4294967295
 800ce98:	4620      	mov	r0, r4
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}
 800ce9c:	20001794 	.word	0x20001794

0800cea0 <_malloc_r>:
 800cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea4:	1ccd      	adds	r5, r1, #3
 800cea6:	f025 0503 	bic.w	r5, r5, #3
 800ceaa:	3508      	adds	r5, #8
 800ceac:	2d0c      	cmp	r5, #12
 800ceae:	bf38      	it	cc
 800ceb0:	250c      	movcc	r5, #12
 800ceb2:	2d00      	cmp	r5, #0
 800ceb4:	4607      	mov	r7, r0
 800ceb6:	db01      	blt.n	800cebc <_malloc_r+0x1c>
 800ceb8:	42a9      	cmp	r1, r5
 800ceba:	d905      	bls.n	800cec8 <_malloc_r+0x28>
 800cebc:	230c      	movs	r3, #12
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	2600      	movs	r6, #0
 800cec2:	4630      	mov	r0, r6
 800cec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec8:	4e2e      	ldr	r6, [pc, #184]	; (800cf84 <_malloc_r+0xe4>)
 800ceca:	f000 ffb9 	bl	800de40 <__malloc_lock>
 800cece:	6833      	ldr	r3, [r6, #0]
 800ced0:	461c      	mov	r4, r3
 800ced2:	bb34      	cbnz	r4, 800cf22 <_malloc_r+0x82>
 800ced4:	4629      	mov	r1, r5
 800ced6:	4638      	mov	r0, r7
 800ced8:	f7ff ffc2 	bl	800ce60 <sbrk_aligned>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	4604      	mov	r4, r0
 800cee0:	d14d      	bne.n	800cf7e <_malloc_r+0xde>
 800cee2:	6834      	ldr	r4, [r6, #0]
 800cee4:	4626      	mov	r6, r4
 800cee6:	2e00      	cmp	r6, #0
 800cee8:	d140      	bne.n	800cf6c <_malloc_r+0xcc>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	4631      	mov	r1, r6
 800ceee:	4638      	mov	r0, r7
 800cef0:	eb04 0803 	add.w	r8, r4, r3
 800cef4:	f000 fc92 	bl	800d81c <_sbrk_r>
 800cef8:	4580      	cmp	r8, r0
 800cefa:	d13a      	bne.n	800cf72 <_malloc_r+0xd2>
 800cefc:	6821      	ldr	r1, [r4, #0]
 800cefe:	3503      	adds	r5, #3
 800cf00:	1a6d      	subs	r5, r5, r1
 800cf02:	f025 0503 	bic.w	r5, r5, #3
 800cf06:	3508      	adds	r5, #8
 800cf08:	2d0c      	cmp	r5, #12
 800cf0a:	bf38      	it	cc
 800cf0c:	250c      	movcc	r5, #12
 800cf0e:	4629      	mov	r1, r5
 800cf10:	4638      	mov	r0, r7
 800cf12:	f7ff ffa5 	bl	800ce60 <sbrk_aligned>
 800cf16:	3001      	adds	r0, #1
 800cf18:	d02b      	beq.n	800cf72 <_malloc_r+0xd2>
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	442b      	add	r3, r5
 800cf1e:	6023      	str	r3, [r4, #0]
 800cf20:	e00e      	b.n	800cf40 <_malloc_r+0xa0>
 800cf22:	6822      	ldr	r2, [r4, #0]
 800cf24:	1b52      	subs	r2, r2, r5
 800cf26:	d41e      	bmi.n	800cf66 <_malloc_r+0xc6>
 800cf28:	2a0b      	cmp	r2, #11
 800cf2a:	d916      	bls.n	800cf5a <_malloc_r+0xba>
 800cf2c:	1961      	adds	r1, r4, r5
 800cf2e:	42a3      	cmp	r3, r4
 800cf30:	6025      	str	r5, [r4, #0]
 800cf32:	bf18      	it	ne
 800cf34:	6059      	strne	r1, [r3, #4]
 800cf36:	6863      	ldr	r3, [r4, #4]
 800cf38:	bf08      	it	eq
 800cf3a:	6031      	streq	r1, [r6, #0]
 800cf3c:	5162      	str	r2, [r4, r5]
 800cf3e:	604b      	str	r3, [r1, #4]
 800cf40:	4638      	mov	r0, r7
 800cf42:	f104 060b 	add.w	r6, r4, #11
 800cf46:	f000 ff81 	bl	800de4c <__malloc_unlock>
 800cf4a:	f026 0607 	bic.w	r6, r6, #7
 800cf4e:	1d23      	adds	r3, r4, #4
 800cf50:	1af2      	subs	r2, r6, r3
 800cf52:	d0b6      	beq.n	800cec2 <_malloc_r+0x22>
 800cf54:	1b9b      	subs	r3, r3, r6
 800cf56:	50a3      	str	r3, [r4, r2]
 800cf58:	e7b3      	b.n	800cec2 <_malloc_r+0x22>
 800cf5a:	6862      	ldr	r2, [r4, #4]
 800cf5c:	42a3      	cmp	r3, r4
 800cf5e:	bf0c      	ite	eq
 800cf60:	6032      	streq	r2, [r6, #0]
 800cf62:	605a      	strne	r2, [r3, #4]
 800cf64:	e7ec      	b.n	800cf40 <_malloc_r+0xa0>
 800cf66:	4623      	mov	r3, r4
 800cf68:	6864      	ldr	r4, [r4, #4]
 800cf6a:	e7b2      	b.n	800ced2 <_malloc_r+0x32>
 800cf6c:	4634      	mov	r4, r6
 800cf6e:	6876      	ldr	r6, [r6, #4]
 800cf70:	e7b9      	b.n	800cee6 <_malloc_r+0x46>
 800cf72:	230c      	movs	r3, #12
 800cf74:	603b      	str	r3, [r7, #0]
 800cf76:	4638      	mov	r0, r7
 800cf78:	f000 ff68 	bl	800de4c <__malloc_unlock>
 800cf7c:	e7a1      	b.n	800cec2 <_malloc_r+0x22>
 800cf7e:	6025      	str	r5, [r4, #0]
 800cf80:	e7de      	b.n	800cf40 <_malloc_r+0xa0>
 800cf82:	bf00      	nop
 800cf84:	20001790 	.word	0x20001790

0800cf88 <__ssputs_r>:
 800cf88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf8c:	688e      	ldr	r6, [r1, #8]
 800cf8e:	429e      	cmp	r6, r3
 800cf90:	4682      	mov	sl, r0
 800cf92:	460c      	mov	r4, r1
 800cf94:	4690      	mov	r8, r2
 800cf96:	461f      	mov	r7, r3
 800cf98:	d838      	bhi.n	800d00c <__ssputs_r+0x84>
 800cf9a:	898a      	ldrh	r2, [r1, #12]
 800cf9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfa0:	d032      	beq.n	800d008 <__ssputs_r+0x80>
 800cfa2:	6825      	ldr	r5, [r4, #0]
 800cfa4:	6909      	ldr	r1, [r1, #16]
 800cfa6:	eba5 0901 	sub.w	r9, r5, r1
 800cfaa:	6965      	ldr	r5, [r4, #20]
 800cfac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	444b      	add	r3, r9
 800cfb8:	106d      	asrs	r5, r5, #1
 800cfba:	429d      	cmp	r5, r3
 800cfbc:	bf38      	it	cc
 800cfbe:	461d      	movcc	r5, r3
 800cfc0:	0553      	lsls	r3, r2, #21
 800cfc2:	d531      	bpl.n	800d028 <__ssputs_r+0xa0>
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	f7ff ff6b 	bl	800cea0 <_malloc_r>
 800cfca:	4606      	mov	r6, r0
 800cfcc:	b950      	cbnz	r0, 800cfe4 <__ssputs_r+0x5c>
 800cfce:	230c      	movs	r3, #12
 800cfd0:	f8ca 3000 	str.w	r3, [sl]
 800cfd4:	89a3      	ldrh	r3, [r4, #12]
 800cfd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfda:	81a3      	strh	r3, [r4, #12]
 800cfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe4:	6921      	ldr	r1, [r4, #16]
 800cfe6:	464a      	mov	r2, r9
 800cfe8:	f7ff fe42 	bl	800cc70 <memcpy>
 800cfec:	89a3      	ldrh	r3, [r4, #12]
 800cfee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cff6:	81a3      	strh	r3, [r4, #12]
 800cff8:	6126      	str	r6, [r4, #16]
 800cffa:	6165      	str	r5, [r4, #20]
 800cffc:	444e      	add	r6, r9
 800cffe:	eba5 0509 	sub.w	r5, r5, r9
 800d002:	6026      	str	r6, [r4, #0]
 800d004:	60a5      	str	r5, [r4, #8]
 800d006:	463e      	mov	r6, r7
 800d008:	42be      	cmp	r6, r7
 800d00a:	d900      	bls.n	800d00e <__ssputs_r+0x86>
 800d00c:	463e      	mov	r6, r7
 800d00e:	6820      	ldr	r0, [r4, #0]
 800d010:	4632      	mov	r2, r6
 800d012:	4641      	mov	r1, r8
 800d014:	f000 fefa 	bl	800de0c <memmove>
 800d018:	68a3      	ldr	r3, [r4, #8]
 800d01a:	1b9b      	subs	r3, r3, r6
 800d01c:	60a3      	str	r3, [r4, #8]
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	4433      	add	r3, r6
 800d022:	6023      	str	r3, [r4, #0]
 800d024:	2000      	movs	r0, #0
 800d026:	e7db      	b.n	800cfe0 <__ssputs_r+0x58>
 800d028:	462a      	mov	r2, r5
 800d02a:	f000 ff15 	bl	800de58 <_realloc_r>
 800d02e:	4606      	mov	r6, r0
 800d030:	2800      	cmp	r0, #0
 800d032:	d1e1      	bne.n	800cff8 <__ssputs_r+0x70>
 800d034:	6921      	ldr	r1, [r4, #16]
 800d036:	4650      	mov	r0, sl
 800d038:	f7ff fec6 	bl	800cdc8 <_free_r>
 800d03c:	e7c7      	b.n	800cfce <__ssputs_r+0x46>
	...

0800d040 <_svfiprintf_r>:
 800d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	4698      	mov	r8, r3
 800d046:	898b      	ldrh	r3, [r1, #12]
 800d048:	061b      	lsls	r3, r3, #24
 800d04a:	b09d      	sub	sp, #116	; 0x74
 800d04c:	4607      	mov	r7, r0
 800d04e:	460d      	mov	r5, r1
 800d050:	4614      	mov	r4, r2
 800d052:	d50e      	bpl.n	800d072 <_svfiprintf_r+0x32>
 800d054:	690b      	ldr	r3, [r1, #16]
 800d056:	b963      	cbnz	r3, 800d072 <_svfiprintf_r+0x32>
 800d058:	2140      	movs	r1, #64	; 0x40
 800d05a:	f7ff ff21 	bl	800cea0 <_malloc_r>
 800d05e:	6028      	str	r0, [r5, #0]
 800d060:	6128      	str	r0, [r5, #16]
 800d062:	b920      	cbnz	r0, 800d06e <_svfiprintf_r+0x2e>
 800d064:	230c      	movs	r3, #12
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	f04f 30ff 	mov.w	r0, #4294967295
 800d06c:	e0d1      	b.n	800d212 <_svfiprintf_r+0x1d2>
 800d06e:	2340      	movs	r3, #64	; 0x40
 800d070:	616b      	str	r3, [r5, #20]
 800d072:	2300      	movs	r3, #0
 800d074:	9309      	str	r3, [sp, #36]	; 0x24
 800d076:	2320      	movs	r3, #32
 800d078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d07c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d080:	2330      	movs	r3, #48	; 0x30
 800d082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d22c <_svfiprintf_r+0x1ec>
 800d086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d08a:	f04f 0901 	mov.w	r9, #1
 800d08e:	4623      	mov	r3, r4
 800d090:	469a      	mov	sl, r3
 800d092:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d096:	b10a      	cbz	r2, 800d09c <_svfiprintf_r+0x5c>
 800d098:	2a25      	cmp	r2, #37	; 0x25
 800d09a:	d1f9      	bne.n	800d090 <_svfiprintf_r+0x50>
 800d09c:	ebba 0b04 	subs.w	fp, sl, r4
 800d0a0:	d00b      	beq.n	800d0ba <_svfiprintf_r+0x7a>
 800d0a2:	465b      	mov	r3, fp
 800d0a4:	4622      	mov	r2, r4
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	f7ff ff6d 	bl	800cf88 <__ssputs_r>
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	f000 80aa 	beq.w	800d208 <_svfiprintf_r+0x1c8>
 800d0b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0b6:	445a      	add	r2, fp
 800d0b8:	9209      	str	r2, [sp, #36]	; 0x24
 800d0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f000 80a2 	beq.w	800d208 <_svfiprintf_r+0x1c8>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0ce:	f10a 0a01 	add.w	sl, sl, #1
 800d0d2:	9304      	str	r3, [sp, #16]
 800d0d4:	9307      	str	r3, [sp, #28]
 800d0d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0da:	931a      	str	r3, [sp, #104]	; 0x68
 800d0dc:	4654      	mov	r4, sl
 800d0de:	2205      	movs	r2, #5
 800d0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e4:	4851      	ldr	r0, [pc, #324]	; (800d22c <_svfiprintf_r+0x1ec>)
 800d0e6:	f7f3 f893 	bl	8000210 <memchr>
 800d0ea:	9a04      	ldr	r2, [sp, #16]
 800d0ec:	b9d8      	cbnz	r0, 800d126 <_svfiprintf_r+0xe6>
 800d0ee:	06d0      	lsls	r0, r2, #27
 800d0f0:	bf44      	itt	mi
 800d0f2:	2320      	movmi	r3, #32
 800d0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0f8:	0711      	lsls	r1, r2, #28
 800d0fa:	bf44      	itt	mi
 800d0fc:	232b      	movmi	r3, #43	; 0x2b
 800d0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d102:	f89a 3000 	ldrb.w	r3, [sl]
 800d106:	2b2a      	cmp	r3, #42	; 0x2a
 800d108:	d015      	beq.n	800d136 <_svfiprintf_r+0xf6>
 800d10a:	9a07      	ldr	r2, [sp, #28]
 800d10c:	4654      	mov	r4, sl
 800d10e:	2000      	movs	r0, #0
 800d110:	f04f 0c0a 	mov.w	ip, #10
 800d114:	4621      	mov	r1, r4
 800d116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d11a:	3b30      	subs	r3, #48	; 0x30
 800d11c:	2b09      	cmp	r3, #9
 800d11e:	d94e      	bls.n	800d1be <_svfiprintf_r+0x17e>
 800d120:	b1b0      	cbz	r0, 800d150 <_svfiprintf_r+0x110>
 800d122:	9207      	str	r2, [sp, #28]
 800d124:	e014      	b.n	800d150 <_svfiprintf_r+0x110>
 800d126:	eba0 0308 	sub.w	r3, r0, r8
 800d12a:	fa09 f303 	lsl.w	r3, r9, r3
 800d12e:	4313      	orrs	r3, r2
 800d130:	9304      	str	r3, [sp, #16]
 800d132:	46a2      	mov	sl, r4
 800d134:	e7d2      	b.n	800d0dc <_svfiprintf_r+0x9c>
 800d136:	9b03      	ldr	r3, [sp, #12]
 800d138:	1d19      	adds	r1, r3, #4
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	9103      	str	r1, [sp, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	bfbb      	ittet	lt
 800d142:	425b      	neglt	r3, r3
 800d144:	f042 0202 	orrlt.w	r2, r2, #2
 800d148:	9307      	strge	r3, [sp, #28]
 800d14a:	9307      	strlt	r3, [sp, #28]
 800d14c:	bfb8      	it	lt
 800d14e:	9204      	strlt	r2, [sp, #16]
 800d150:	7823      	ldrb	r3, [r4, #0]
 800d152:	2b2e      	cmp	r3, #46	; 0x2e
 800d154:	d10c      	bne.n	800d170 <_svfiprintf_r+0x130>
 800d156:	7863      	ldrb	r3, [r4, #1]
 800d158:	2b2a      	cmp	r3, #42	; 0x2a
 800d15a:	d135      	bne.n	800d1c8 <_svfiprintf_r+0x188>
 800d15c:	9b03      	ldr	r3, [sp, #12]
 800d15e:	1d1a      	adds	r2, r3, #4
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	9203      	str	r2, [sp, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	bfb8      	it	lt
 800d168:	f04f 33ff 	movlt.w	r3, #4294967295
 800d16c:	3402      	adds	r4, #2
 800d16e:	9305      	str	r3, [sp, #20]
 800d170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d23c <_svfiprintf_r+0x1fc>
 800d174:	7821      	ldrb	r1, [r4, #0]
 800d176:	2203      	movs	r2, #3
 800d178:	4650      	mov	r0, sl
 800d17a:	f7f3 f849 	bl	8000210 <memchr>
 800d17e:	b140      	cbz	r0, 800d192 <_svfiprintf_r+0x152>
 800d180:	2340      	movs	r3, #64	; 0x40
 800d182:	eba0 000a 	sub.w	r0, r0, sl
 800d186:	fa03 f000 	lsl.w	r0, r3, r0
 800d18a:	9b04      	ldr	r3, [sp, #16]
 800d18c:	4303      	orrs	r3, r0
 800d18e:	3401      	adds	r4, #1
 800d190:	9304      	str	r3, [sp, #16]
 800d192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d196:	4826      	ldr	r0, [pc, #152]	; (800d230 <_svfiprintf_r+0x1f0>)
 800d198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d19c:	2206      	movs	r2, #6
 800d19e:	f7f3 f837 	bl	8000210 <memchr>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d038      	beq.n	800d218 <_svfiprintf_r+0x1d8>
 800d1a6:	4b23      	ldr	r3, [pc, #140]	; (800d234 <_svfiprintf_r+0x1f4>)
 800d1a8:	bb1b      	cbnz	r3, 800d1f2 <_svfiprintf_r+0x1b2>
 800d1aa:	9b03      	ldr	r3, [sp, #12]
 800d1ac:	3307      	adds	r3, #7
 800d1ae:	f023 0307 	bic.w	r3, r3, #7
 800d1b2:	3308      	adds	r3, #8
 800d1b4:	9303      	str	r3, [sp, #12]
 800d1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b8:	4433      	add	r3, r6
 800d1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d1bc:	e767      	b.n	800d08e <_svfiprintf_r+0x4e>
 800d1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	e7a5      	b.n	800d114 <_svfiprintf_r+0xd4>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	3401      	adds	r4, #1
 800d1cc:	9305      	str	r3, [sp, #20]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	f04f 0c0a 	mov.w	ip, #10
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1da:	3a30      	subs	r2, #48	; 0x30
 800d1dc:	2a09      	cmp	r2, #9
 800d1de:	d903      	bls.n	800d1e8 <_svfiprintf_r+0x1a8>
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d0c5      	beq.n	800d170 <_svfiprintf_r+0x130>
 800d1e4:	9105      	str	r1, [sp, #20]
 800d1e6:	e7c3      	b.n	800d170 <_svfiprintf_r+0x130>
 800d1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e7f0      	b.n	800d1d4 <_svfiprintf_r+0x194>
 800d1f2:	ab03      	add	r3, sp, #12
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	462a      	mov	r2, r5
 800d1f8:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <_svfiprintf_r+0x1f8>)
 800d1fa:	a904      	add	r1, sp, #16
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f3af 8000 	nop.w
 800d202:	1c42      	adds	r2, r0, #1
 800d204:	4606      	mov	r6, r0
 800d206:	d1d6      	bne.n	800d1b6 <_svfiprintf_r+0x176>
 800d208:	89ab      	ldrh	r3, [r5, #12]
 800d20a:	065b      	lsls	r3, r3, #25
 800d20c:	f53f af2c 	bmi.w	800d068 <_svfiprintf_r+0x28>
 800d210:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d212:	b01d      	add	sp, #116	; 0x74
 800d214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d218:	ab03      	add	r3, sp, #12
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	462a      	mov	r2, r5
 800d21e:	4b06      	ldr	r3, [pc, #24]	; (800d238 <_svfiprintf_r+0x1f8>)
 800d220:	a904      	add	r1, sp, #16
 800d222:	4638      	mov	r0, r7
 800d224:	f000 f9d4 	bl	800d5d0 <_printf_i>
 800d228:	e7eb      	b.n	800d202 <_svfiprintf_r+0x1c2>
 800d22a:	bf00      	nop
 800d22c:	0800ec9a 	.word	0x0800ec9a
 800d230:	0800eca4 	.word	0x0800eca4
 800d234:	00000000 	.word	0x00000000
 800d238:	0800cf89 	.word	0x0800cf89
 800d23c:	0800eca0 	.word	0x0800eca0

0800d240 <__sfputc_r>:
 800d240:	6893      	ldr	r3, [r2, #8]
 800d242:	3b01      	subs	r3, #1
 800d244:	2b00      	cmp	r3, #0
 800d246:	b410      	push	{r4}
 800d248:	6093      	str	r3, [r2, #8]
 800d24a:	da08      	bge.n	800d25e <__sfputc_r+0x1e>
 800d24c:	6994      	ldr	r4, [r2, #24]
 800d24e:	42a3      	cmp	r3, r4
 800d250:	db01      	blt.n	800d256 <__sfputc_r+0x16>
 800d252:	290a      	cmp	r1, #10
 800d254:	d103      	bne.n	800d25e <__sfputc_r+0x1e>
 800d256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d25a:	f000 baef 	b.w	800d83c <__swbuf_r>
 800d25e:	6813      	ldr	r3, [r2, #0]
 800d260:	1c58      	adds	r0, r3, #1
 800d262:	6010      	str	r0, [r2, #0]
 800d264:	7019      	strb	r1, [r3, #0]
 800d266:	4608      	mov	r0, r1
 800d268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <__sfputs_r>:
 800d26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d270:	4606      	mov	r6, r0
 800d272:	460f      	mov	r7, r1
 800d274:	4614      	mov	r4, r2
 800d276:	18d5      	adds	r5, r2, r3
 800d278:	42ac      	cmp	r4, r5
 800d27a:	d101      	bne.n	800d280 <__sfputs_r+0x12>
 800d27c:	2000      	movs	r0, #0
 800d27e:	e007      	b.n	800d290 <__sfputs_r+0x22>
 800d280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d284:	463a      	mov	r2, r7
 800d286:	4630      	mov	r0, r6
 800d288:	f7ff ffda 	bl	800d240 <__sfputc_r>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d1f3      	bne.n	800d278 <__sfputs_r+0xa>
 800d290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d294 <_vfiprintf_r>:
 800d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d298:	460d      	mov	r5, r1
 800d29a:	b09d      	sub	sp, #116	; 0x74
 800d29c:	4614      	mov	r4, r2
 800d29e:	4698      	mov	r8, r3
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	b118      	cbz	r0, 800d2ac <_vfiprintf_r+0x18>
 800d2a4:	6983      	ldr	r3, [r0, #24]
 800d2a6:	b90b      	cbnz	r3, 800d2ac <_vfiprintf_r+0x18>
 800d2a8:	f000 fcaa 	bl	800dc00 <__sinit>
 800d2ac:	4b89      	ldr	r3, [pc, #548]	; (800d4d4 <_vfiprintf_r+0x240>)
 800d2ae:	429d      	cmp	r5, r3
 800d2b0:	d11b      	bne.n	800d2ea <_vfiprintf_r+0x56>
 800d2b2:	6875      	ldr	r5, [r6, #4]
 800d2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2b6:	07d9      	lsls	r1, r3, #31
 800d2b8:	d405      	bmi.n	800d2c6 <_vfiprintf_r+0x32>
 800d2ba:	89ab      	ldrh	r3, [r5, #12]
 800d2bc:	059a      	lsls	r2, r3, #22
 800d2be:	d402      	bmi.n	800d2c6 <_vfiprintf_r+0x32>
 800d2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2c2:	f000 fd3b 	bl	800dd3c <__retarget_lock_acquire_recursive>
 800d2c6:	89ab      	ldrh	r3, [r5, #12]
 800d2c8:	071b      	lsls	r3, r3, #28
 800d2ca:	d501      	bpl.n	800d2d0 <_vfiprintf_r+0x3c>
 800d2cc:	692b      	ldr	r3, [r5, #16]
 800d2ce:	b9eb      	cbnz	r3, 800d30c <_vfiprintf_r+0x78>
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f000 fb04 	bl	800d8e0 <__swsetup_r>
 800d2d8:	b1c0      	cbz	r0, 800d30c <_vfiprintf_r+0x78>
 800d2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2dc:	07dc      	lsls	r4, r3, #31
 800d2de:	d50e      	bpl.n	800d2fe <_vfiprintf_r+0x6a>
 800d2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e4:	b01d      	add	sp, #116	; 0x74
 800d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ea:	4b7b      	ldr	r3, [pc, #492]	; (800d4d8 <_vfiprintf_r+0x244>)
 800d2ec:	429d      	cmp	r5, r3
 800d2ee:	d101      	bne.n	800d2f4 <_vfiprintf_r+0x60>
 800d2f0:	68b5      	ldr	r5, [r6, #8]
 800d2f2:	e7df      	b.n	800d2b4 <_vfiprintf_r+0x20>
 800d2f4:	4b79      	ldr	r3, [pc, #484]	; (800d4dc <_vfiprintf_r+0x248>)
 800d2f6:	429d      	cmp	r5, r3
 800d2f8:	bf08      	it	eq
 800d2fa:	68f5      	ldreq	r5, [r6, #12]
 800d2fc:	e7da      	b.n	800d2b4 <_vfiprintf_r+0x20>
 800d2fe:	89ab      	ldrh	r3, [r5, #12]
 800d300:	0598      	lsls	r0, r3, #22
 800d302:	d4ed      	bmi.n	800d2e0 <_vfiprintf_r+0x4c>
 800d304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d306:	f000 fd1a 	bl	800dd3e <__retarget_lock_release_recursive>
 800d30a:	e7e9      	b.n	800d2e0 <_vfiprintf_r+0x4c>
 800d30c:	2300      	movs	r3, #0
 800d30e:	9309      	str	r3, [sp, #36]	; 0x24
 800d310:	2320      	movs	r3, #32
 800d312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d316:	f8cd 800c 	str.w	r8, [sp, #12]
 800d31a:	2330      	movs	r3, #48	; 0x30
 800d31c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4e0 <_vfiprintf_r+0x24c>
 800d320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d324:	f04f 0901 	mov.w	r9, #1
 800d328:	4623      	mov	r3, r4
 800d32a:	469a      	mov	sl, r3
 800d32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d330:	b10a      	cbz	r2, 800d336 <_vfiprintf_r+0xa2>
 800d332:	2a25      	cmp	r2, #37	; 0x25
 800d334:	d1f9      	bne.n	800d32a <_vfiprintf_r+0x96>
 800d336:	ebba 0b04 	subs.w	fp, sl, r4
 800d33a:	d00b      	beq.n	800d354 <_vfiprintf_r+0xc0>
 800d33c:	465b      	mov	r3, fp
 800d33e:	4622      	mov	r2, r4
 800d340:	4629      	mov	r1, r5
 800d342:	4630      	mov	r0, r6
 800d344:	f7ff ff93 	bl	800d26e <__sfputs_r>
 800d348:	3001      	adds	r0, #1
 800d34a:	f000 80aa 	beq.w	800d4a2 <_vfiprintf_r+0x20e>
 800d34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d350:	445a      	add	r2, fp
 800d352:	9209      	str	r2, [sp, #36]	; 0x24
 800d354:	f89a 3000 	ldrb.w	r3, [sl]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f000 80a2 	beq.w	800d4a2 <_vfiprintf_r+0x20e>
 800d35e:	2300      	movs	r3, #0
 800d360:	f04f 32ff 	mov.w	r2, #4294967295
 800d364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d368:	f10a 0a01 	add.w	sl, sl, #1
 800d36c:	9304      	str	r3, [sp, #16]
 800d36e:	9307      	str	r3, [sp, #28]
 800d370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d374:	931a      	str	r3, [sp, #104]	; 0x68
 800d376:	4654      	mov	r4, sl
 800d378:	2205      	movs	r2, #5
 800d37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d37e:	4858      	ldr	r0, [pc, #352]	; (800d4e0 <_vfiprintf_r+0x24c>)
 800d380:	f7f2 ff46 	bl	8000210 <memchr>
 800d384:	9a04      	ldr	r2, [sp, #16]
 800d386:	b9d8      	cbnz	r0, 800d3c0 <_vfiprintf_r+0x12c>
 800d388:	06d1      	lsls	r1, r2, #27
 800d38a:	bf44      	itt	mi
 800d38c:	2320      	movmi	r3, #32
 800d38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d392:	0713      	lsls	r3, r2, #28
 800d394:	bf44      	itt	mi
 800d396:	232b      	movmi	r3, #43	; 0x2b
 800d398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d39c:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a2:	d015      	beq.n	800d3d0 <_vfiprintf_r+0x13c>
 800d3a4:	9a07      	ldr	r2, [sp, #28]
 800d3a6:	4654      	mov	r4, sl
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	f04f 0c0a 	mov.w	ip, #10
 800d3ae:	4621      	mov	r1, r4
 800d3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3b4:	3b30      	subs	r3, #48	; 0x30
 800d3b6:	2b09      	cmp	r3, #9
 800d3b8:	d94e      	bls.n	800d458 <_vfiprintf_r+0x1c4>
 800d3ba:	b1b0      	cbz	r0, 800d3ea <_vfiprintf_r+0x156>
 800d3bc:	9207      	str	r2, [sp, #28]
 800d3be:	e014      	b.n	800d3ea <_vfiprintf_r+0x156>
 800d3c0:	eba0 0308 	sub.w	r3, r0, r8
 800d3c4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	9304      	str	r3, [sp, #16]
 800d3cc:	46a2      	mov	sl, r4
 800d3ce:	e7d2      	b.n	800d376 <_vfiprintf_r+0xe2>
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	1d19      	adds	r1, r3, #4
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	9103      	str	r1, [sp, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	bfbb      	ittet	lt
 800d3dc:	425b      	neglt	r3, r3
 800d3de:	f042 0202 	orrlt.w	r2, r2, #2
 800d3e2:	9307      	strge	r3, [sp, #28]
 800d3e4:	9307      	strlt	r3, [sp, #28]
 800d3e6:	bfb8      	it	lt
 800d3e8:	9204      	strlt	r2, [sp, #16]
 800d3ea:	7823      	ldrb	r3, [r4, #0]
 800d3ec:	2b2e      	cmp	r3, #46	; 0x2e
 800d3ee:	d10c      	bne.n	800d40a <_vfiprintf_r+0x176>
 800d3f0:	7863      	ldrb	r3, [r4, #1]
 800d3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f4:	d135      	bne.n	800d462 <_vfiprintf_r+0x1ce>
 800d3f6:	9b03      	ldr	r3, [sp, #12]
 800d3f8:	1d1a      	adds	r2, r3, #4
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	9203      	str	r2, [sp, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	bfb8      	it	lt
 800d402:	f04f 33ff 	movlt.w	r3, #4294967295
 800d406:	3402      	adds	r4, #2
 800d408:	9305      	str	r3, [sp, #20]
 800d40a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4f0 <_vfiprintf_r+0x25c>
 800d40e:	7821      	ldrb	r1, [r4, #0]
 800d410:	2203      	movs	r2, #3
 800d412:	4650      	mov	r0, sl
 800d414:	f7f2 fefc 	bl	8000210 <memchr>
 800d418:	b140      	cbz	r0, 800d42c <_vfiprintf_r+0x198>
 800d41a:	2340      	movs	r3, #64	; 0x40
 800d41c:	eba0 000a 	sub.w	r0, r0, sl
 800d420:	fa03 f000 	lsl.w	r0, r3, r0
 800d424:	9b04      	ldr	r3, [sp, #16]
 800d426:	4303      	orrs	r3, r0
 800d428:	3401      	adds	r4, #1
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d430:	482c      	ldr	r0, [pc, #176]	; (800d4e4 <_vfiprintf_r+0x250>)
 800d432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d436:	2206      	movs	r2, #6
 800d438:	f7f2 feea 	bl	8000210 <memchr>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d03f      	beq.n	800d4c0 <_vfiprintf_r+0x22c>
 800d440:	4b29      	ldr	r3, [pc, #164]	; (800d4e8 <_vfiprintf_r+0x254>)
 800d442:	bb1b      	cbnz	r3, 800d48c <_vfiprintf_r+0x1f8>
 800d444:	9b03      	ldr	r3, [sp, #12]
 800d446:	3307      	adds	r3, #7
 800d448:	f023 0307 	bic.w	r3, r3, #7
 800d44c:	3308      	adds	r3, #8
 800d44e:	9303      	str	r3, [sp, #12]
 800d450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d452:	443b      	add	r3, r7
 800d454:	9309      	str	r3, [sp, #36]	; 0x24
 800d456:	e767      	b.n	800d328 <_vfiprintf_r+0x94>
 800d458:	fb0c 3202 	mla	r2, ip, r2, r3
 800d45c:	460c      	mov	r4, r1
 800d45e:	2001      	movs	r0, #1
 800d460:	e7a5      	b.n	800d3ae <_vfiprintf_r+0x11a>
 800d462:	2300      	movs	r3, #0
 800d464:	3401      	adds	r4, #1
 800d466:	9305      	str	r3, [sp, #20]
 800d468:	4619      	mov	r1, r3
 800d46a:	f04f 0c0a 	mov.w	ip, #10
 800d46e:	4620      	mov	r0, r4
 800d470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d474:	3a30      	subs	r2, #48	; 0x30
 800d476:	2a09      	cmp	r2, #9
 800d478:	d903      	bls.n	800d482 <_vfiprintf_r+0x1ee>
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0c5      	beq.n	800d40a <_vfiprintf_r+0x176>
 800d47e:	9105      	str	r1, [sp, #20]
 800d480:	e7c3      	b.n	800d40a <_vfiprintf_r+0x176>
 800d482:	fb0c 2101 	mla	r1, ip, r1, r2
 800d486:	4604      	mov	r4, r0
 800d488:	2301      	movs	r3, #1
 800d48a:	e7f0      	b.n	800d46e <_vfiprintf_r+0x1da>
 800d48c:	ab03      	add	r3, sp, #12
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	462a      	mov	r2, r5
 800d492:	4b16      	ldr	r3, [pc, #88]	; (800d4ec <_vfiprintf_r+0x258>)
 800d494:	a904      	add	r1, sp, #16
 800d496:	4630      	mov	r0, r6
 800d498:	f3af 8000 	nop.w
 800d49c:	4607      	mov	r7, r0
 800d49e:	1c78      	adds	r0, r7, #1
 800d4a0:	d1d6      	bne.n	800d450 <_vfiprintf_r+0x1bc>
 800d4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4a4:	07d9      	lsls	r1, r3, #31
 800d4a6:	d405      	bmi.n	800d4b4 <_vfiprintf_r+0x220>
 800d4a8:	89ab      	ldrh	r3, [r5, #12]
 800d4aa:	059a      	lsls	r2, r3, #22
 800d4ac:	d402      	bmi.n	800d4b4 <_vfiprintf_r+0x220>
 800d4ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4b0:	f000 fc45 	bl	800dd3e <__retarget_lock_release_recursive>
 800d4b4:	89ab      	ldrh	r3, [r5, #12]
 800d4b6:	065b      	lsls	r3, r3, #25
 800d4b8:	f53f af12 	bmi.w	800d2e0 <_vfiprintf_r+0x4c>
 800d4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4be:	e711      	b.n	800d2e4 <_vfiprintf_r+0x50>
 800d4c0:	ab03      	add	r3, sp, #12
 800d4c2:	9300      	str	r3, [sp, #0]
 800d4c4:	462a      	mov	r2, r5
 800d4c6:	4b09      	ldr	r3, [pc, #36]	; (800d4ec <_vfiprintf_r+0x258>)
 800d4c8:	a904      	add	r1, sp, #16
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	f000 f880 	bl	800d5d0 <_printf_i>
 800d4d0:	e7e4      	b.n	800d49c <_vfiprintf_r+0x208>
 800d4d2:	bf00      	nop
 800d4d4:	0800ecf0 	.word	0x0800ecf0
 800d4d8:	0800ed10 	.word	0x0800ed10
 800d4dc:	0800ecd0 	.word	0x0800ecd0
 800d4e0:	0800ec9a 	.word	0x0800ec9a
 800d4e4:	0800eca4 	.word	0x0800eca4
 800d4e8:	00000000 	.word	0x00000000
 800d4ec:	0800d26f 	.word	0x0800d26f
 800d4f0:	0800eca0 	.word	0x0800eca0

0800d4f4 <_printf_common>:
 800d4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f8:	4616      	mov	r6, r2
 800d4fa:	4699      	mov	r9, r3
 800d4fc:	688a      	ldr	r2, [r1, #8]
 800d4fe:	690b      	ldr	r3, [r1, #16]
 800d500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d504:	4293      	cmp	r3, r2
 800d506:	bfb8      	it	lt
 800d508:	4613      	movlt	r3, r2
 800d50a:	6033      	str	r3, [r6, #0]
 800d50c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d510:	4607      	mov	r7, r0
 800d512:	460c      	mov	r4, r1
 800d514:	b10a      	cbz	r2, 800d51a <_printf_common+0x26>
 800d516:	3301      	adds	r3, #1
 800d518:	6033      	str	r3, [r6, #0]
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	0699      	lsls	r1, r3, #26
 800d51e:	bf42      	ittt	mi
 800d520:	6833      	ldrmi	r3, [r6, #0]
 800d522:	3302      	addmi	r3, #2
 800d524:	6033      	strmi	r3, [r6, #0]
 800d526:	6825      	ldr	r5, [r4, #0]
 800d528:	f015 0506 	ands.w	r5, r5, #6
 800d52c:	d106      	bne.n	800d53c <_printf_common+0x48>
 800d52e:	f104 0a19 	add.w	sl, r4, #25
 800d532:	68e3      	ldr	r3, [r4, #12]
 800d534:	6832      	ldr	r2, [r6, #0]
 800d536:	1a9b      	subs	r3, r3, r2
 800d538:	42ab      	cmp	r3, r5
 800d53a:	dc26      	bgt.n	800d58a <_printf_common+0x96>
 800d53c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d540:	1e13      	subs	r3, r2, #0
 800d542:	6822      	ldr	r2, [r4, #0]
 800d544:	bf18      	it	ne
 800d546:	2301      	movne	r3, #1
 800d548:	0692      	lsls	r2, r2, #26
 800d54a:	d42b      	bmi.n	800d5a4 <_printf_common+0xb0>
 800d54c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d550:	4649      	mov	r1, r9
 800d552:	4638      	mov	r0, r7
 800d554:	47c0      	blx	r8
 800d556:	3001      	adds	r0, #1
 800d558:	d01e      	beq.n	800d598 <_printf_common+0xa4>
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	68e5      	ldr	r5, [r4, #12]
 800d55e:	6832      	ldr	r2, [r6, #0]
 800d560:	f003 0306 	and.w	r3, r3, #6
 800d564:	2b04      	cmp	r3, #4
 800d566:	bf08      	it	eq
 800d568:	1aad      	subeq	r5, r5, r2
 800d56a:	68a3      	ldr	r3, [r4, #8]
 800d56c:	6922      	ldr	r2, [r4, #16]
 800d56e:	bf0c      	ite	eq
 800d570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d574:	2500      	movne	r5, #0
 800d576:	4293      	cmp	r3, r2
 800d578:	bfc4      	itt	gt
 800d57a:	1a9b      	subgt	r3, r3, r2
 800d57c:	18ed      	addgt	r5, r5, r3
 800d57e:	2600      	movs	r6, #0
 800d580:	341a      	adds	r4, #26
 800d582:	42b5      	cmp	r5, r6
 800d584:	d11a      	bne.n	800d5bc <_printf_common+0xc8>
 800d586:	2000      	movs	r0, #0
 800d588:	e008      	b.n	800d59c <_printf_common+0xa8>
 800d58a:	2301      	movs	r3, #1
 800d58c:	4652      	mov	r2, sl
 800d58e:	4649      	mov	r1, r9
 800d590:	4638      	mov	r0, r7
 800d592:	47c0      	blx	r8
 800d594:	3001      	adds	r0, #1
 800d596:	d103      	bne.n	800d5a0 <_printf_common+0xac>
 800d598:	f04f 30ff 	mov.w	r0, #4294967295
 800d59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a0:	3501      	adds	r5, #1
 800d5a2:	e7c6      	b.n	800d532 <_printf_common+0x3e>
 800d5a4:	18e1      	adds	r1, r4, r3
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	2030      	movs	r0, #48	; 0x30
 800d5aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5ae:	4422      	add	r2, r4
 800d5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5b8:	3302      	adds	r3, #2
 800d5ba:	e7c7      	b.n	800d54c <_printf_common+0x58>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	4622      	mov	r2, r4
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	4638      	mov	r0, r7
 800d5c4:	47c0      	blx	r8
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	d0e6      	beq.n	800d598 <_printf_common+0xa4>
 800d5ca:	3601      	adds	r6, #1
 800d5cc:	e7d9      	b.n	800d582 <_printf_common+0x8e>
	...

0800d5d0 <_printf_i>:
 800d5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d4:	7e0f      	ldrb	r7, [r1, #24]
 800d5d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5d8:	2f78      	cmp	r7, #120	; 0x78
 800d5da:	4691      	mov	r9, r2
 800d5dc:	4680      	mov	r8, r0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	469a      	mov	sl, r3
 800d5e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5e6:	d807      	bhi.n	800d5f8 <_printf_i+0x28>
 800d5e8:	2f62      	cmp	r7, #98	; 0x62
 800d5ea:	d80a      	bhi.n	800d602 <_printf_i+0x32>
 800d5ec:	2f00      	cmp	r7, #0
 800d5ee:	f000 80d8 	beq.w	800d7a2 <_printf_i+0x1d2>
 800d5f2:	2f58      	cmp	r7, #88	; 0x58
 800d5f4:	f000 80a3 	beq.w	800d73e <_printf_i+0x16e>
 800d5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d600:	e03a      	b.n	800d678 <_printf_i+0xa8>
 800d602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d606:	2b15      	cmp	r3, #21
 800d608:	d8f6      	bhi.n	800d5f8 <_printf_i+0x28>
 800d60a:	a101      	add	r1, pc, #4	; (adr r1, 800d610 <_printf_i+0x40>)
 800d60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d610:	0800d669 	.word	0x0800d669
 800d614:	0800d67d 	.word	0x0800d67d
 800d618:	0800d5f9 	.word	0x0800d5f9
 800d61c:	0800d5f9 	.word	0x0800d5f9
 800d620:	0800d5f9 	.word	0x0800d5f9
 800d624:	0800d5f9 	.word	0x0800d5f9
 800d628:	0800d67d 	.word	0x0800d67d
 800d62c:	0800d5f9 	.word	0x0800d5f9
 800d630:	0800d5f9 	.word	0x0800d5f9
 800d634:	0800d5f9 	.word	0x0800d5f9
 800d638:	0800d5f9 	.word	0x0800d5f9
 800d63c:	0800d789 	.word	0x0800d789
 800d640:	0800d6ad 	.word	0x0800d6ad
 800d644:	0800d76b 	.word	0x0800d76b
 800d648:	0800d5f9 	.word	0x0800d5f9
 800d64c:	0800d5f9 	.word	0x0800d5f9
 800d650:	0800d7ab 	.word	0x0800d7ab
 800d654:	0800d5f9 	.word	0x0800d5f9
 800d658:	0800d6ad 	.word	0x0800d6ad
 800d65c:	0800d5f9 	.word	0x0800d5f9
 800d660:	0800d5f9 	.word	0x0800d5f9
 800d664:	0800d773 	.word	0x0800d773
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	1d1a      	adds	r2, r3, #4
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	602a      	str	r2, [r5, #0]
 800d670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d678:	2301      	movs	r3, #1
 800d67a:	e0a3      	b.n	800d7c4 <_printf_i+0x1f4>
 800d67c:	6820      	ldr	r0, [r4, #0]
 800d67e:	6829      	ldr	r1, [r5, #0]
 800d680:	0606      	lsls	r6, r0, #24
 800d682:	f101 0304 	add.w	r3, r1, #4
 800d686:	d50a      	bpl.n	800d69e <_printf_i+0xce>
 800d688:	680e      	ldr	r6, [r1, #0]
 800d68a:	602b      	str	r3, [r5, #0]
 800d68c:	2e00      	cmp	r6, #0
 800d68e:	da03      	bge.n	800d698 <_printf_i+0xc8>
 800d690:	232d      	movs	r3, #45	; 0x2d
 800d692:	4276      	negs	r6, r6
 800d694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d698:	485e      	ldr	r0, [pc, #376]	; (800d814 <_printf_i+0x244>)
 800d69a:	230a      	movs	r3, #10
 800d69c:	e019      	b.n	800d6d2 <_printf_i+0x102>
 800d69e:	680e      	ldr	r6, [r1, #0]
 800d6a0:	602b      	str	r3, [r5, #0]
 800d6a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6a6:	bf18      	it	ne
 800d6a8:	b236      	sxthne	r6, r6
 800d6aa:	e7ef      	b.n	800d68c <_printf_i+0xbc>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	6820      	ldr	r0, [r4, #0]
 800d6b0:	1d19      	adds	r1, r3, #4
 800d6b2:	6029      	str	r1, [r5, #0]
 800d6b4:	0601      	lsls	r1, r0, #24
 800d6b6:	d501      	bpl.n	800d6bc <_printf_i+0xec>
 800d6b8:	681e      	ldr	r6, [r3, #0]
 800d6ba:	e002      	b.n	800d6c2 <_printf_i+0xf2>
 800d6bc:	0646      	lsls	r6, r0, #25
 800d6be:	d5fb      	bpl.n	800d6b8 <_printf_i+0xe8>
 800d6c0:	881e      	ldrh	r6, [r3, #0]
 800d6c2:	4854      	ldr	r0, [pc, #336]	; (800d814 <_printf_i+0x244>)
 800d6c4:	2f6f      	cmp	r7, #111	; 0x6f
 800d6c6:	bf0c      	ite	eq
 800d6c8:	2308      	moveq	r3, #8
 800d6ca:	230a      	movne	r3, #10
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6d2:	6865      	ldr	r5, [r4, #4]
 800d6d4:	60a5      	str	r5, [r4, #8]
 800d6d6:	2d00      	cmp	r5, #0
 800d6d8:	bfa2      	ittt	ge
 800d6da:	6821      	ldrge	r1, [r4, #0]
 800d6dc:	f021 0104 	bicge.w	r1, r1, #4
 800d6e0:	6021      	strge	r1, [r4, #0]
 800d6e2:	b90e      	cbnz	r6, 800d6e8 <_printf_i+0x118>
 800d6e4:	2d00      	cmp	r5, #0
 800d6e6:	d04d      	beq.n	800d784 <_printf_i+0x1b4>
 800d6e8:	4615      	mov	r5, r2
 800d6ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6ee:	fb03 6711 	mls	r7, r3, r1, r6
 800d6f2:	5dc7      	ldrb	r7, [r0, r7]
 800d6f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6f8:	4637      	mov	r7, r6
 800d6fa:	42bb      	cmp	r3, r7
 800d6fc:	460e      	mov	r6, r1
 800d6fe:	d9f4      	bls.n	800d6ea <_printf_i+0x11a>
 800d700:	2b08      	cmp	r3, #8
 800d702:	d10b      	bne.n	800d71c <_printf_i+0x14c>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	07de      	lsls	r6, r3, #31
 800d708:	d508      	bpl.n	800d71c <_printf_i+0x14c>
 800d70a:	6923      	ldr	r3, [r4, #16]
 800d70c:	6861      	ldr	r1, [r4, #4]
 800d70e:	4299      	cmp	r1, r3
 800d710:	bfde      	ittt	le
 800d712:	2330      	movle	r3, #48	; 0x30
 800d714:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d71c:	1b52      	subs	r2, r2, r5
 800d71e:	6122      	str	r2, [r4, #16]
 800d720:	f8cd a000 	str.w	sl, [sp]
 800d724:	464b      	mov	r3, r9
 800d726:	aa03      	add	r2, sp, #12
 800d728:	4621      	mov	r1, r4
 800d72a:	4640      	mov	r0, r8
 800d72c:	f7ff fee2 	bl	800d4f4 <_printf_common>
 800d730:	3001      	adds	r0, #1
 800d732:	d14c      	bne.n	800d7ce <_printf_i+0x1fe>
 800d734:	f04f 30ff 	mov.w	r0, #4294967295
 800d738:	b004      	add	sp, #16
 800d73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d73e:	4835      	ldr	r0, [pc, #212]	; (800d814 <_printf_i+0x244>)
 800d740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d744:	6829      	ldr	r1, [r5, #0]
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	f851 6b04 	ldr.w	r6, [r1], #4
 800d74c:	6029      	str	r1, [r5, #0]
 800d74e:	061d      	lsls	r5, r3, #24
 800d750:	d514      	bpl.n	800d77c <_printf_i+0x1ac>
 800d752:	07df      	lsls	r7, r3, #31
 800d754:	bf44      	itt	mi
 800d756:	f043 0320 	orrmi.w	r3, r3, #32
 800d75a:	6023      	strmi	r3, [r4, #0]
 800d75c:	b91e      	cbnz	r6, 800d766 <_printf_i+0x196>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	f023 0320 	bic.w	r3, r3, #32
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	2310      	movs	r3, #16
 800d768:	e7b0      	b.n	800d6cc <_printf_i+0xfc>
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	f043 0320 	orr.w	r3, r3, #32
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	2378      	movs	r3, #120	; 0x78
 800d774:	4828      	ldr	r0, [pc, #160]	; (800d818 <_printf_i+0x248>)
 800d776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d77a:	e7e3      	b.n	800d744 <_printf_i+0x174>
 800d77c:	0659      	lsls	r1, r3, #25
 800d77e:	bf48      	it	mi
 800d780:	b2b6      	uxthmi	r6, r6
 800d782:	e7e6      	b.n	800d752 <_printf_i+0x182>
 800d784:	4615      	mov	r5, r2
 800d786:	e7bb      	b.n	800d700 <_printf_i+0x130>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	6826      	ldr	r6, [r4, #0]
 800d78c:	6961      	ldr	r1, [r4, #20]
 800d78e:	1d18      	adds	r0, r3, #4
 800d790:	6028      	str	r0, [r5, #0]
 800d792:	0635      	lsls	r5, r6, #24
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	d501      	bpl.n	800d79c <_printf_i+0x1cc>
 800d798:	6019      	str	r1, [r3, #0]
 800d79a:	e002      	b.n	800d7a2 <_printf_i+0x1d2>
 800d79c:	0670      	lsls	r0, r6, #25
 800d79e:	d5fb      	bpl.n	800d798 <_printf_i+0x1c8>
 800d7a0:	8019      	strh	r1, [r3, #0]
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	6123      	str	r3, [r4, #16]
 800d7a6:	4615      	mov	r5, r2
 800d7a8:	e7ba      	b.n	800d720 <_printf_i+0x150>
 800d7aa:	682b      	ldr	r3, [r5, #0]
 800d7ac:	1d1a      	adds	r2, r3, #4
 800d7ae:	602a      	str	r2, [r5, #0]
 800d7b0:	681d      	ldr	r5, [r3, #0]
 800d7b2:	6862      	ldr	r2, [r4, #4]
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f7f2 fd2a 	bl	8000210 <memchr>
 800d7bc:	b108      	cbz	r0, 800d7c2 <_printf_i+0x1f2>
 800d7be:	1b40      	subs	r0, r0, r5
 800d7c0:	6060      	str	r0, [r4, #4]
 800d7c2:	6863      	ldr	r3, [r4, #4]
 800d7c4:	6123      	str	r3, [r4, #16]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7cc:	e7a8      	b.n	800d720 <_printf_i+0x150>
 800d7ce:	6923      	ldr	r3, [r4, #16]
 800d7d0:	462a      	mov	r2, r5
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	47d0      	blx	sl
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d0ab      	beq.n	800d734 <_printf_i+0x164>
 800d7dc:	6823      	ldr	r3, [r4, #0]
 800d7de:	079b      	lsls	r3, r3, #30
 800d7e0:	d413      	bmi.n	800d80a <_printf_i+0x23a>
 800d7e2:	68e0      	ldr	r0, [r4, #12]
 800d7e4:	9b03      	ldr	r3, [sp, #12]
 800d7e6:	4298      	cmp	r0, r3
 800d7e8:	bfb8      	it	lt
 800d7ea:	4618      	movlt	r0, r3
 800d7ec:	e7a4      	b.n	800d738 <_printf_i+0x168>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	47d0      	blx	sl
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d09b      	beq.n	800d734 <_printf_i+0x164>
 800d7fc:	3501      	adds	r5, #1
 800d7fe:	68e3      	ldr	r3, [r4, #12]
 800d800:	9903      	ldr	r1, [sp, #12]
 800d802:	1a5b      	subs	r3, r3, r1
 800d804:	42ab      	cmp	r3, r5
 800d806:	dcf2      	bgt.n	800d7ee <_printf_i+0x21e>
 800d808:	e7eb      	b.n	800d7e2 <_printf_i+0x212>
 800d80a:	2500      	movs	r5, #0
 800d80c:	f104 0619 	add.w	r6, r4, #25
 800d810:	e7f5      	b.n	800d7fe <_printf_i+0x22e>
 800d812:	bf00      	nop
 800d814:	0800ecab 	.word	0x0800ecab
 800d818:	0800ecbc 	.word	0x0800ecbc

0800d81c <_sbrk_r>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	4d06      	ldr	r5, [pc, #24]	; (800d838 <_sbrk_r+0x1c>)
 800d820:	2300      	movs	r3, #0
 800d822:	4604      	mov	r4, r0
 800d824:	4608      	mov	r0, r1
 800d826:	602b      	str	r3, [r5, #0]
 800d828:	f7f8 fea2 	bl	8006570 <_sbrk>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	d102      	bne.n	800d836 <_sbrk_r+0x1a>
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	b103      	cbz	r3, 800d836 <_sbrk_r+0x1a>
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	bd38      	pop	{r3, r4, r5, pc}
 800d838:	2000179c 	.word	0x2000179c

0800d83c <__swbuf_r>:
 800d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83e:	460e      	mov	r6, r1
 800d840:	4614      	mov	r4, r2
 800d842:	4605      	mov	r5, r0
 800d844:	b118      	cbz	r0, 800d84e <__swbuf_r+0x12>
 800d846:	6983      	ldr	r3, [r0, #24]
 800d848:	b90b      	cbnz	r3, 800d84e <__swbuf_r+0x12>
 800d84a:	f000 f9d9 	bl	800dc00 <__sinit>
 800d84e:	4b21      	ldr	r3, [pc, #132]	; (800d8d4 <__swbuf_r+0x98>)
 800d850:	429c      	cmp	r4, r3
 800d852:	d12b      	bne.n	800d8ac <__swbuf_r+0x70>
 800d854:	686c      	ldr	r4, [r5, #4]
 800d856:	69a3      	ldr	r3, [r4, #24]
 800d858:	60a3      	str	r3, [r4, #8]
 800d85a:	89a3      	ldrh	r3, [r4, #12]
 800d85c:	071a      	lsls	r2, r3, #28
 800d85e:	d52f      	bpl.n	800d8c0 <__swbuf_r+0x84>
 800d860:	6923      	ldr	r3, [r4, #16]
 800d862:	b36b      	cbz	r3, 800d8c0 <__swbuf_r+0x84>
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	6820      	ldr	r0, [r4, #0]
 800d868:	1ac0      	subs	r0, r0, r3
 800d86a:	6963      	ldr	r3, [r4, #20]
 800d86c:	b2f6      	uxtb	r6, r6
 800d86e:	4283      	cmp	r3, r0
 800d870:	4637      	mov	r7, r6
 800d872:	dc04      	bgt.n	800d87e <__swbuf_r+0x42>
 800d874:	4621      	mov	r1, r4
 800d876:	4628      	mov	r0, r5
 800d878:	f000 f92e 	bl	800dad8 <_fflush_r>
 800d87c:	bb30      	cbnz	r0, 800d8cc <__swbuf_r+0x90>
 800d87e:	68a3      	ldr	r3, [r4, #8]
 800d880:	3b01      	subs	r3, #1
 800d882:	60a3      	str	r3, [r4, #8]
 800d884:	6823      	ldr	r3, [r4, #0]
 800d886:	1c5a      	adds	r2, r3, #1
 800d888:	6022      	str	r2, [r4, #0]
 800d88a:	701e      	strb	r6, [r3, #0]
 800d88c:	6963      	ldr	r3, [r4, #20]
 800d88e:	3001      	adds	r0, #1
 800d890:	4283      	cmp	r3, r0
 800d892:	d004      	beq.n	800d89e <__swbuf_r+0x62>
 800d894:	89a3      	ldrh	r3, [r4, #12]
 800d896:	07db      	lsls	r3, r3, #31
 800d898:	d506      	bpl.n	800d8a8 <__swbuf_r+0x6c>
 800d89a:	2e0a      	cmp	r6, #10
 800d89c:	d104      	bne.n	800d8a8 <__swbuf_r+0x6c>
 800d89e:	4621      	mov	r1, r4
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	f000 f919 	bl	800dad8 <_fflush_r>
 800d8a6:	b988      	cbnz	r0, 800d8cc <__swbuf_r+0x90>
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ac:	4b0a      	ldr	r3, [pc, #40]	; (800d8d8 <__swbuf_r+0x9c>)
 800d8ae:	429c      	cmp	r4, r3
 800d8b0:	d101      	bne.n	800d8b6 <__swbuf_r+0x7a>
 800d8b2:	68ac      	ldr	r4, [r5, #8]
 800d8b4:	e7cf      	b.n	800d856 <__swbuf_r+0x1a>
 800d8b6:	4b09      	ldr	r3, [pc, #36]	; (800d8dc <__swbuf_r+0xa0>)
 800d8b8:	429c      	cmp	r4, r3
 800d8ba:	bf08      	it	eq
 800d8bc:	68ec      	ldreq	r4, [r5, #12]
 800d8be:	e7ca      	b.n	800d856 <__swbuf_r+0x1a>
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	f000 f80c 	bl	800d8e0 <__swsetup_r>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d0cb      	beq.n	800d864 <__swbuf_r+0x28>
 800d8cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d8d0:	e7ea      	b.n	800d8a8 <__swbuf_r+0x6c>
 800d8d2:	bf00      	nop
 800d8d4:	0800ecf0 	.word	0x0800ecf0
 800d8d8:	0800ed10 	.word	0x0800ed10
 800d8dc:	0800ecd0 	.word	0x0800ecd0

0800d8e0 <__swsetup_r>:
 800d8e0:	4b32      	ldr	r3, [pc, #200]	; (800d9ac <__swsetup_r+0xcc>)
 800d8e2:	b570      	push	{r4, r5, r6, lr}
 800d8e4:	681d      	ldr	r5, [r3, #0]
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	b125      	cbz	r5, 800d8f6 <__swsetup_r+0x16>
 800d8ec:	69ab      	ldr	r3, [r5, #24]
 800d8ee:	b913      	cbnz	r3, 800d8f6 <__swsetup_r+0x16>
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f000 f985 	bl	800dc00 <__sinit>
 800d8f6:	4b2e      	ldr	r3, [pc, #184]	; (800d9b0 <__swsetup_r+0xd0>)
 800d8f8:	429c      	cmp	r4, r3
 800d8fa:	d10f      	bne.n	800d91c <__swsetup_r+0x3c>
 800d8fc:	686c      	ldr	r4, [r5, #4]
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d904:	0719      	lsls	r1, r3, #28
 800d906:	d42c      	bmi.n	800d962 <__swsetup_r+0x82>
 800d908:	06dd      	lsls	r5, r3, #27
 800d90a:	d411      	bmi.n	800d930 <__swsetup_r+0x50>
 800d90c:	2309      	movs	r3, #9
 800d90e:	6033      	str	r3, [r6, #0]
 800d910:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d914:	81a3      	strh	r3, [r4, #12]
 800d916:	f04f 30ff 	mov.w	r0, #4294967295
 800d91a:	e03e      	b.n	800d99a <__swsetup_r+0xba>
 800d91c:	4b25      	ldr	r3, [pc, #148]	; (800d9b4 <__swsetup_r+0xd4>)
 800d91e:	429c      	cmp	r4, r3
 800d920:	d101      	bne.n	800d926 <__swsetup_r+0x46>
 800d922:	68ac      	ldr	r4, [r5, #8]
 800d924:	e7eb      	b.n	800d8fe <__swsetup_r+0x1e>
 800d926:	4b24      	ldr	r3, [pc, #144]	; (800d9b8 <__swsetup_r+0xd8>)
 800d928:	429c      	cmp	r4, r3
 800d92a:	bf08      	it	eq
 800d92c:	68ec      	ldreq	r4, [r5, #12]
 800d92e:	e7e6      	b.n	800d8fe <__swsetup_r+0x1e>
 800d930:	0758      	lsls	r0, r3, #29
 800d932:	d512      	bpl.n	800d95a <__swsetup_r+0x7a>
 800d934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d936:	b141      	cbz	r1, 800d94a <__swsetup_r+0x6a>
 800d938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d93c:	4299      	cmp	r1, r3
 800d93e:	d002      	beq.n	800d946 <__swsetup_r+0x66>
 800d940:	4630      	mov	r0, r6
 800d942:	f7ff fa41 	bl	800cdc8 <_free_r>
 800d946:	2300      	movs	r3, #0
 800d948:	6363      	str	r3, [r4, #52]	; 0x34
 800d94a:	89a3      	ldrh	r3, [r4, #12]
 800d94c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d950:	81a3      	strh	r3, [r4, #12]
 800d952:	2300      	movs	r3, #0
 800d954:	6063      	str	r3, [r4, #4]
 800d956:	6923      	ldr	r3, [r4, #16]
 800d958:	6023      	str	r3, [r4, #0]
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	f043 0308 	orr.w	r3, r3, #8
 800d960:	81a3      	strh	r3, [r4, #12]
 800d962:	6923      	ldr	r3, [r4, #16]
 800d964:	b94b      	cbnz	r3, 800d97a <__swsetup_r+0x9a>
 800d966:	89a3      	ldrh	r3, [r4, #12]
 800d968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d96c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d970:	d003      	beq.n	800d97a <__swsetup_r+0x9a>
 800d972:	4621      	mov	r1, r4
 800d974:	4630      	mov	r0, r6
 800d976:	f000 fa09 	bl	800dd8c <__smakebuf_r>
 800d97a:	89a0      	ldrh	r0, [r4, #12]
 800d97c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d980:	f010 0301 	ands.w	r3, r0, #1
 800d984:	d00a      	beq.n	800d99c <__swsetup_r+0xbc>
 800d986:	2300      	movs	r3, #0
 800d988:	60a3      	str	r3, [r4, #8]
 800d98a:	6963      	ldr	r3, [r4, #20]
 800d98c:	425b      	negs	r3, r3
 800d98e:	61a3      	str	r3, [r4, #24]
 800d990:	6923      	ldr	r3, [r4, #16]
 800d992:	b943      	cbnz	r3, 800d9a6 <__swsetup_r+0xc6>
 800d994:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d998:	d1ba      	bne.n	800d910 <__swsetup_r+0x30>
 800d99a:	bd70      	pop	{r4, r5, r6, pc}
 800d99c:	0781      	lsls	r1, r0, #30
 800d99e:	bf58      	it	pl
 800d9a0:	6963      	ldrpl	r3, [r4, #20]
 800d9a2:	60a3      	str	r3, [r4, #8]
 800d9a4:	e7f4      	b.n	800d990 <__swsetup_r+0xb0>
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	e7f7      	b.n	800d99a <__swsetup_r+0xba>
 800d9aa:	bf00      	nop
 800d9ac:	200001f8 	.word	0x200001f8
 800d9b0:	0800ecf0 	.word	0x0800ecf0
 800d9b4:	0800ed10 	.word	0x0800ed10
 800d9b8:	0800ecd0 	.word	0x0800ecd0

0800d9bc <abort>:
 800d9bc:	b508      	push	{r3, lr}
 800d9be:	2006      	movs	r0, #6
 800d9c0:	f000 faa2 	bl	800df08 <raise>
 800d9c4:	2001      	movs	r0, #1
 800d9c6:	f7f8 fd5b 	bl	8006480 <_exit>
	...

0800d9cc <__sflush_r>:
 800d9cc:	898a      	ldrh	r2, [r1, #12]
 800d9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	0710      	lsls	r0, r2, #28
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	d458      	bmi.n	800da8c <__sflush_r+0xc0>
 800d9da:	684b      	ldr	r3, [r1, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dc05      	bgt.n	800d9ec <__sflush_r+0x20>
 800d9e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	dc02      	bgt.n	800d9ec <__sflush_r+0x20>
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9ee:	2e00      	cmp	r6, #0
 800d9f0:	d0f9      	beq.n	800d9e6 <__sflush_r+0x1a>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d9f8:	682f      	ldr	r7, [r5, #0]
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	d032      	beq.n	800da64 <__sflush_r+0x98>
 800d9fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	075a      	lsls	r2, r3, #29
 800da04:	d505      	bpl.n	800da12 <__sflush_r+0x46>
 800da06:	6863      	ldr	r3, [r4, #4]
 800da08:	1ac0      	subs	r0, r0, r3
 800da0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da0c:	b10b      	cbz	r3, 800da12 <__sflush_r+0x46>
 800da0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da10:	1ac0      	subs	r0, r0, r3
 800da12:	2300      	movs	r3, #0
 800da14:	4602      	mov	r2, r0
 800da16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da18:	6a21      	ldr	r1, [r4, #32]
 800da1a:	4628      	mov	r0, r5
 800da1c:	47b0      	blx	r6
 800da1e:	1c43      	adds	r3, r0, #1
 800da20:	89a3      	ldrh	r3, [r4, #12]
 800da22:	d106      	bne.n	800da32 <__sflush_r+0x66>
 800da24:	6829      	ldr	r1, [r5, #0]
 800da26:	291d      	cmp	r1, #29
 800da28:	d82c      	bhi.n	800da84 <__sflush_r+0xb8>
 800da2a:	4a2a      	ldr	r2, [pc, #168]	; (800dad4 <__sflush_r+0x108>)
 800da2c:	40ca      	lsrs	r2, r1
 800da2e:	07d6      	lsls	r6, r2, #31
 800da30:	d528      	bpl.n	800da84 <__sflush_r+0xb8>
 800da32:	2200      	movs	r2, #0
 800da34:	6062      	str	r2, [r4, #4]
 800da36:	04d9      	lsls	r1, r3, #19
 800da38:	6922      	ldr	r2, [r4, #16]
 800da3a:	6022      	str	r2, [r4, #0]
 800da3c:	d504      	bpl.n	800da48 <__sflush_r+0x7c>
 800da3e:	1c42      	adds	r2, r0, #1
 800da40:	d101      	bne.n	800da46 <__sflush_r+0x7a>
 800da42:	682b      	ldr	r3, [r5, #0]
 800da44:	b903      	cbnz	r3, 800da48 <__sflush_r+0x7c>
 800da46:	6560      	str	r0, [r4, #84]	; 0x54
 800da48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da4a:	602f      	str	r7, [r5, #0]
 800da4c:	2900      	cmp	r1, #0
 800da4e:	d0ca      	beq.n	800d9e6 <__sflush_r+0x1a>
 800da50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da54:	4299      	cmp	r1, r3
 800da56:	d002      	beq.n	800da5e <__sflush_r+0x92>
 800da58:	4628      	mov	r0, r5
 800da5a:	f7ff f9b5 	bl	800cdc8 <_free_r>
 800da5e:	2000      	movs	r0, #0
 800da60:	6360      	str	r0, [r4, #52]	; 0x34
 800da62:	e7c1      	b.n	800d9e8 <__sflush_r+0x1c>
 800da64:	6a21      	ldr	r1, [r4, #32]
 800da66:	2301      	movs	r3, #1
 800da68:	4628      	mov	r0, r5
 800da6a:	47b0      	blx	r6
 800da6c:	1c41      	adds	r1, r0, #1
 800da6e:	d1c7      	bne.n	800da00 <__sflush_r+0x34>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d0c4      	beq.n	800da00 <__sflush_r+0x34>
 800da76:	2b1d      	cmp	r3, #29
 800da78:	d001      	beq.n	800da7e <__sflush_r+0xb2>
 800da7a:	2b16      	cmp	r3, #22
 800da7c:	d101      	bne.n	800da82 <__sflush_r+0xb6>
 800da7e:	602f      	str	r7, [r5, #0]
 800da80:	e7b1      	b.n	800d9e6 <__sflush_r+0x1a>
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da88:	81a3      	strh	r3, [r4, #12]
 800da8a:	e7ad      	b.n	800d9e8 <__sflush_r+0x1c>
 800da8c:	690f      	ldr	r7, [r1, #16]
 800da8e:	2f00      	cmp	r7, #0
 800da90:	d0a9      	beq.n	800d9e6 <__sflush_r+0x1a>
 800da92:	0793      	lsls	r3, r2, #30
 800da94:	680e      	ldr	r6, [r1, #0]
 800da96:	bf08      	it	eq
 800da98:	694b      	ldreq	r3, [r1, #20]
 800da9a:	600f      	str	r7, [r1, #0]
 800da9c:	bf18      	it	ne
 800da9e:	2300      	movne	r3, #0
 800daa0:	eba6 0807 	sub.w	r8, r6, r7
 800daa4:	608b      	str	r3, [r1, #8]
 800daa6:	f1b8 0f00 	cmp.w	r8, #0
 800daaa:	dd9c      	ble.n	800d9e6 <__sflush_r+0x1a>
 800daac:	6a21      	ldr	r1, [r4, #32]
 800daae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dab0:	4643      	mov	r3, r8
 800dab2:	463a      	mov	r2, r7
 800dab4:	4628      	mov	r0, r5
 800dab6:	47b0      	blx	r6
 800dab8:	2800      	cmp	r0, #0
 800daba:	dc06      	bgt.n	800daca <__sflush_r+0xfe>
 800dabc:	89a3      	ldrh	r3, [r4, #12]
 800dabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dac2:	81a3      	strh	r3, [r4, #12]
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	e78e      	b.n	800d9e8 <__sflush_r+0x1c>
 800daca:	4407      	add	r7, r0
 800dacc:	eba8 0800 	sub.w	r8, r8, r0
 800dad0:	e7e9      	b.n	800daa6 <__sflush_r+0xda>
 800dad2:	bf00      	nop
 800dad4:	20400001 	.word	0x20400001

0800dad8 <_fflush_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	690b      	ldr	r3, [r1, #16]
 800dadc:	4605      	mov	r5, r0
 800dade:	460c      	mov	r4, r1
 800dae0:	b913      	cbnz	r3, 800dae8 <_fflush_r+0x10>
 800dae2:	2500      	movs	r5, #0
 800dae4:	4628      	mov	r0, r5
 800dae6:	bd38      	pop	{r3, r4, r5, pc}
 800dae8:	b118      	cbz	r0, 800daf2 <_fflush_r+0x1a>
 800daea:	6983      	ldr	r3, [r0, #24]
 800daec:	b90b      	cbnz	r3, 800daf2 <_fflush_r+0x1a>
 800daee:	f000 f887 	bl	800dc00 <__sinit>
 800daf2:	4b14      	ldr	r3, [pc, #80]	; (800db44 <_fflush_r+0x6c>)
 800daf4:	429c      	cmp	r4, r3
 800daf6:	d11b      	bne.n	800db30 <_fflush_r+0x58>
 800daf8:	686c      	ldr	r4, [r5, #4]
 800dafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d0ef      	beq.n	800dae2 <_fflush_r+0xa>
 800db02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db04:	07d0      	lsls	r0, r2, #31
 800db06:	d404      	bmi.n	800db12 <_fflush_r+0x3a>
 800db08:	0599      	lsls	r1, r3, #22
 800db0a:	d402      	bmi.n	800db12 <_fflush_r+0x3a>
 800db0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db0e:	f000 f915 	bl	800dd3c <__retarget_lock_acquire_recursive>
 800db12:	4628      	mov	r0, r5
 800db14:	4621      	mov	r1, r4
 800db16:	f7ff ff59 	bl	800d9cc <__sflush_r>
 800db1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db1c:	07da      	lsls	r2, r3, #31
 800db1e:	4605      	mov	r5, r0
 800db20:	d4e0      	bmi.n	800dae4 <_fflush_r+0xc>
 800db22:	89a3      	ldrh	r3, [r4, #12]
 800db24:	059b      	lsls	r3, r3, #22
 800db26:	d4dd      	bmi.n	800dae4 <_fflush_r+0xc>
 800db28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db2a:	f000 f908 	bl	800dd3e <__retarget_lock_release_recursive>
 800db2e:	e7d9      	b.n	800dae4 <_fflush_r+0xc>
 800db30:	4b05      	ldr	r3, [pc, #20]	; (800db48 <_fflush_r+0x70>)
 800db32:	429c      	cmp	r4, r3
 800db34:	d101      	bne.n	800db3a <_fflush_r+0x62>
 800db36:	68ac      	ldr	r4, [r5, #8]
 800db38:	e7df      	b.n	800dafa <_fflush_r+0x22>
 800db3a:	4b04      	ldr	r3, [pc, #16]	; (800db4c <_fflush_r+0x74>)
 800db3c:	429c      	cmp	r4, r3
 800db3e:	bf08      	it	eq
 800db40:	68ec      	ldreq	r4, [r5, #12]
 800db42:	e7da      	b.n	800dafa <_fflush_r+0x22>
 800db44:	0800ecf0 	.word	0x0800ecf0
 800db48:	0800ed10 	.word	0x0800ed10
 800db4c:	0800ecd0 	.word	0x0800ecd0

0800db50 <std>:
 800db50:	2300      	movs	r3, #0
 800db52:	b510      	push	{r4, lr}
 800db54:	4604      	mov	r4, r0
 800db56:	e9c0 3300 	strd	r3, r3, [r0]
 800db5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db5e:	6083      	str	r3, [r0, #8]
 800db60:	8181      	strh	r1, [r0, #12]
 800db62:	6643      	str	r3, [r0, #100]	; 0x64
 800db64:	81c2      	strh	r2, [r0, #14]
 800db66:	6183      	str	r3, [r0, #24]
 800db68:	4619      	mov	r1, r3
 800db6a:	2208      	movs	r2, #8
 800db6c:	305c      	adds	r0, #92	; 0x5c
 800db6e:	f7ff f88d 	bl	800cc8c <memset>
 800db72:	4b05      	ldr	r3, [pc, #20]	; (800db88 <std+0x38>)
 800db74:	6263      	str	r3, [r4, #36]	; 0x24
 800db76:	4b05      	ldr	r3, [pc, #20]	; (800db8c <std+0x3c>)
 800db78:	62a3      	str	r3, [r4, #40]	; 0x28
 800db7a:	4b05      	ldr	r3, [pc, #20]	; (800db90 <std+0x40>)
 800db7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db7e:	4b05      	ldr	r3, [pc, #20]	; (800db94 <std+0x44>)
 800db80:	6224      	str	r4, [r4, #32]
 800db82:	6323      	str	r3, [r4, #48]	; 0x30
 800db84:	bd10      	pop	{r4, pc}
 800db86:	bf00      	nop
 800db88:	0800df41 	.word	0x0800df41
 800db8c:	0800df63 	.word	0x0800df63
 800db90:	0800df9b 	.word	0x0800df9b
 800db94:	0800dfbf 	.word	0x0800dfbf

0800db98 <_cleanup_r>:
 800db98:	4901      	ldr	r1, [pc, #4]	; (800dba0 <_cleanup_r+0x8>)
 800db9a:	f000 b8af 	b.w	800dcfc <_fwalk_reent>
 800db9e:	bf00      	nop
 800dba0:	0800dad9 	.word	0x0800dad9

0800dba4 <__sfmoreglue>:
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	2268      	movs	r2, #104	; 0x68
 800dba8:	1e4d      	subs	r5, r1, #1
 800dbaa:	4355      	muls	r5, r2
 800dbac:	460e      	mov	r6, r1
 800dbae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dbb2:	f7ff f975 	bl	800cea0 <_malloc_r>
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	b140      	cbz	r0, 800dbcc <__sfmoreglue+0x28>
 800dbba:	2100      	movs	r1, #0
 800dbbc:	e9c0 1600 	strd	r1, r6, [r0]
 800dbc0:	300c      	adds	r0, #12
 800dbc2:	60a0      	str	r0, [r4, #8]
 800dbc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dbc8:	f7ff f860 	bl	800cc8c <memset>
 800dbcc:	4620      	mov	r0, r4
 800dbce:	bd70      	pop	{r4, r5, r6, pc}

0800dbd0 <__sfp_lock_acquire>:
 800dbd0:	4801      	ldr	r0, [pc, #4]	; (800dbd8 <__sfp_lock_acquire+0x8>)
 800dbd2:	f000 b8b3 	b.w	800dd3c <__retarget_lock_acquire_recursive>
 800dbd6:	bf00      	nop
 800dbd8:	20001799 	.word	0x20001799

0800dbdc <__sfp_lock_release>:
 800dbdc:	4801      	ldr	r0, [pc, #4]	; (800dbe4 <__sfp_lock_release+0x8>)
 800dbde:	f000 b8ae 	b.w	800dd3e <__retarget_lock_release_recursive>
 800dbe2:	bf00      	nop
 800dbe4:	20001799 	.word	0x20001799

0800dbe8 <__sinit_lock_acquire>:
 800dbe8:	4801      	ldr	r0, [pc, #4]	; (800dbf0 <__sinit_lock_acquire+0x8>)
 800dbea:	f000 b8a7 	b.w	800dd3c <__retarget_lock_acquire_recursive>
 800dbee:	bf00      	nop
 800dbf0:	2000179a 	.word	0x2000179a

0800dbf4 <__sinit_lock_release>:
 800dbf4:	4801      	ldr	r0, [pc, #4]	; (800dbfc <__sinit_lock_release+0x8>)
 800dbf6:	f000 b8a2 	b.w	800dd3e <__retarget_lock_release_recursive>
 800dbfa:	bf00      	nop
 800dbfc:	2000179a 	.word	0x2000179a

0800dc00 <__sinit>:
 800dc00:	b510      	push	{r4, lr}
 800dc02:	4604      	mov	r4, r0
 800dc04:	f7ff fff0 	bl	800dbe8 <__sinit_lock_acquire>
 800dc08:	69a3      	ldr	r3, [r4, #24]
 800dc0a:	b11b      	cbz	r3, 800dc14 <__sinit+0x14>
 800dc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc10:	f7ff bff0 	b.w	800dbf4 <__sinit_lock_release>
 800dc14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc18:	6523      	str	r3, [r4, #80]	; 0x50
 800dc1a:	4b13      	ldr	r3, [pc, #76]	; (800dc68 <__sinit+0x68>)
 800dc1c:	4a13      	ldr	r2, [pc, #76]	; (800dc6c <__sinit+0x6c>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc22:	42a3      	cmp	r3, r4
 800dc24:	bf04      	itt	eq
 800dc26:	2301      	moveq	r3, #1
 800dc28:	61a3      	streq	r3, [r4, #24]
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f000 f820 	bl	800dc70 <__sfp>
 800dc30:	6060      	str	r0, [r4, #4]
 800dc32:	4620      	mov	r0, r4
 800dc34:	f000 f81c 	bl	800dc70 <__sfp>
 800dc38:	60a0      	str	r0, [r4, #8]
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 f818 	bl	800dc70 <__sfp>
 800dc40:	2200      	movs	r2, #0
 800dc42:	60e0      	str	r0, [r4, #12]
 800dc44:	2104      	movs	r1, #4
 800dc46:	6860      	ldr	r0, [r4, #4]
 800dc48:	f7ff ff82 	bl	800db50 <std>
 800dc4c:	68a0      	ldr	r0, [r4, #8]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	2109      	movs	r1, #9
 800dc52:	f7ff ff7d 	bl	800db50 <std>
 800dc56:	68e0      	ldr	r0, [r4, #12]
 800dc58:	2202      	movs	r2, #2
 800dc5a:	2112      	movs	r1, #18
 800dc5c:	f7ff ff78 	bl	800db50 <std>
 800dc60:	2301      	movs	r3, #1
 800dc62:	61a3      	str	r3, [r4, #24]
 800dc64:	e7d2      	b.n	800dc0c <__sinit+0xc>
 800dc66:	bf00      	nop
 800dc68:	0800ebe8 	.word	0x0800ebe8
 800dc6c:	0800db99 	.word	0x0800db99

0800dc70 <__sfp>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	4607      	mov	r7, r0
 800dc74:	f7ff ffac 	bl	800dbd0 <__sfp_lock_acquire>
 800dc78:	4b1e      	ldr	r3, [pc, #120]	; (800dcf4 <__sfp+0x84>)
 800dc7a:	681e      	ldr	r6, [r3, #0]
 800dc7c:	69b3      	ldr	r3, [r6, #24]
 800dc7e:	b913      	cbnz	r3, 800dc86 <__sfp+0x16>
 800dc80:	4630      	mov	r0, r6
 800dc82:	f7ff ffbd 	bl	800dc00 <__sinit>
 800dc86:	3648      	adds	r6, #72	; 0x48
 800dc88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	d503      	bpl.n	800dc98 <__sfp+0x28>
 800dc90:	6833      	ldr	r3, [r6, #0]
 800dc92:	b30b      	cbz	r3, 800dcd8 <__sfp+0x68>
 800dc94:	6836      	ldr	r6, [r6, #0]
 800dc96:	e7f7      	b.n	800dc88 <__sfp+0x18>
 800dc98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc9c:	b9d5      	cbnz	r5, 800dcd4 <__sfp+0x64>
 800dc9e:	4b16      	ldr	r3, [pc, #88]	; (800dcf8 <__sfp+0x88>)
 800dca0:	60e3      	str	r3, [r4, #12]
 800dca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dca6:	6665      	str	r5, [r4, #100]	; 0x64
 800dca8:	f000 f847 	bl	800dd3a <__retarget_lock_init_recursive>
 800dcac:	f7ff ff96 	bl	800dbdc <__sfp_lock_release>
 800dcb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dcb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dcb8:	6025      	str	r5, [r4, #0]
 800dcba:	61a5      	str	r5, [r4, #24]
 800dcbc:	2208      	movs	r2, #8
 800dcbe:	4629      	mov	r1, r5
 800dcc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dcc4:	f7fe ffe2 	bl	800cc8c <memset>
 800dcc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd4:	3468      	adds	r4, #104	; 0x68
 800dcd6:	e7d9      	b.n	800dc8c <__sfp+0x1c>
 800dcd8:	2104      	movs	r1, #4
 800dcda:	4638      	mov	r0, r7
 800dcdc:	f7ff ff62 	bl	800dba4 <__sfmoreglue>
 800dce0:	4604      	mov	r4, r0
 800dce2:	6030      	str	r0, [r6, #0]
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d1d5      	bne.n	800dc94 <__sfp+0x24>
 800dce8:	f7ff ff78 	bl	800dbdc <__sfp_lock_release>
 800dcec:	230c      	movs	r3, #12
 800dcee:	603b      	str	r3, [r7, #0]
 800dcf0:	e7ee      	b.n	800dcd0 <__sfp+0x60>
 800dcf2:	bf00      	nop
 800dcf4:	0800ebe8 	.word	0x0800ebe8
 800dcf8:	ffff0001 	.word	0xffff0001

0800dcfc <_fwalk_reent>:
 800dcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd00:	4606      	mov	r6, r0
 800dd02:	4688      	mov	r8, r1
 800dd04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd08:	2700      	movs	r7, #0
 800dd0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd0e:	f1b9 0901 	subs.w	r9, r9, #1
 800dd12:	d505      	bpl.n	800dd20 <_fwalk_reent+0x24>
 800dd14:	6824      	ldr	r4, [r4, #0]
 800dd16:	2c00      	cmp	r4, #0
 800dd18:	d1f7      	bne.n	800dd0a <_fwalk_reent+0xe>
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd20:	89ab      	ldrh	r3, [r5, #12]
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d907      	bls.n	800dd36 <_fwalk_reent+0x3a>
 800dd26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	d003      	beq.n	800dd36 <_fwalk_reent+0x3a>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	4630      	mov	r0, r6
 800dd32:	47c0      	blx	r8
 800dd34:	4307      	orrs	r7, r0
 800dd36:	3568      	adds	r5, #104	; 0x68
 800dd38:	e7e9      	b.n	800dd0e <_fwalk_reent+0x12>

0800dd3a <__retarget_lock_init_recursive>:
 800dd3a:	4770      	bx	lr

0800dd3c <__retarget_lock_acquire_recursive>:
 800dd3c:	4770      	bx	lr

0800dd3e <__retarget_lock_release_recursive>:
 800dd3e:	4770      	bx	lr

0800dd40 <__swhatbuf_r>:
 800dd40:	b570      	push	{r4, r5, r6, lr}
 800dd42:	460e      	mov	r6, r1
 800dd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd48:	2900      	cmp	r1, #0
 800dd4a:	b096      	sub	sp, #88	; 0x58
 800dd4c:	4614      	mov	r4, r2
 800dd4e:	461d      	mov	r5, r3
 800dd50:	da08      	bge.n	800dd64 <__swhatbuf_r+0x24>
 800dd52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	602a      	str	r2, [r5, #0]
 800dd5a:	061a      	lsls	r2, r3, #24
 800dd5c:	d410      	bmi.n	800dd80 <__swhatbuf_r+0x40>
 800dd5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd62:	e00e      	b.n	800dd82 <__swhatbuf_r+0x42>
 800dd64:	466a      	mov	r2, sp
 800dd66:	f000 f951 	bl	800e00c <_fstat_r>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	dbf1      	blt.n	800dd52 <__swhatbuf_r+0x12>
 800dd6e:	9a01      	ldr	r2, [sp, #4]
 800dd70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dd74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dd78:	425a      	negs	r2, r3
 800dd7a:	415a      	adcs	r2, r3
 800dd7c:	602a      	str	r2, [r5, #0]
 800dd7e:	e7ee      	b.n	800dd5e <__swhatbuf_r+0x1e>
 800dd80:	2340      	movs	r3, #64	; 0x40
 800dd82:	2000      	movs	r0, #0
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	b016      	add	sp, #88	; 0x58
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dd8c <__smakebuf_r>:
 800dd8c:	898b      	ldrh	r3, [r1, #12]
 800dd8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd90:	079d      	lsls	r5, r3, #30
 800dd92:	4606      	mov	r6, r0
 800dd94:	460c      	mov	r4, r1
 800dd96:	d507      	bpl.n	800dda8 <__smakebuf_r+0x1c>
 800dd98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	6123      	str	r3, [r4, #16]
 800dda0:	2301      	movs	r3, #1
 800dda2:	6163      	str	r3, [r4, #20]
 800dda4:	b002      	add	sp, #8
 800dda6:	bd70      	pop	{r4, r5, r6, pc}
 800dda8:	ab01      	add	r3, sp, #4
 800ddaa:	466a      	mov	r2, sp
 800ddac:	f7ff ffc8 	bl	800dd40 <__swhatbuf_r>
 800ddb0:	9900      	ldr	r1, [sp, #0]
 800ddb2:	4605      	mov	r5, r0
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f7ff f873 	bl	800cea0 <_malloc_r>
 800ddba:	b948      	cbnz	r0, 800ddd0 <__smakebuf_r+0x44>
 800ddbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddc0:	059a      	lsls	r2, r3, #22
 800ddc2:	d4ef      	bmi.n	800dda4 <__smakebuf_r+0x18>
 800ddc4:	f023 0303 	bic.w	r3, r3, #3
 800ddc8:	f043 0302 	orr.w	r3, r3, #2
 800ddcc:	81a3      	strh	r3, [r4, #12]
 800ddce:	e7e3      	b.n	800dd98 <__smakebuf_r+0xc>
 800ddd0:	4b0d      	ldr	r3, [pc, #52]	; (800de08 <__smakebuf_r+0x7c>)
 800ddd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ddd4:	89a3      	ldrh	r3, [r4, #12]
 800ddd6:	6020      	str	r0, [r4, #0]
 800ddd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dddc:	81a3      	strh	r3, [r4, #12]
 800ddde:	9b00      	ldr	r3, [sp, #0]
 800dde0:	6163      	str	r3, [r4, #20]
 800dde2:	9b01      	ldr	r3, [sp, #4]
 800dde4:	6120      	str	r0, [r4, #16]
 800dde6:	b15b      	cbz	r3, 800de00 <__smakebuf_r+0x74>
 800dde8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddec:	4630      	mov	r0, r6
 800ddee:	f000 f91f 	bl	800e030 <_isatty_r>
 800ddf2:	b128      	cbz	r0, 800de00 <__smakebuf_r+0x74>
 800ddf4:	89a3      	ldrh	r3, [r4, #12]
 800ddf6:	f023 0303 	bic.w	r3, r3, #3
 800ddfa:	f043 0301 	orr.w	r3, r3, #1
 800ddfe:	81a3      	strh	r3, [r4, #12]
 800de00:	89a0      	ldrh	r0, [r4, #12]
 800de02:	4305      	orrs	r5, r0
 800de04:	81a5      	strh	r5, [r4, #12]
 800de06:	e7cd      	b.n	800dda4 <__smakebuf_r+0x18>
 800de08:	0800db99 	.word	0x0800db99

0800de0c <memmove>:
 800de0c:	4288      	cmp	r0, r1
 800de0e:	b510      	push	{r4, lr}
 800de10:	eb01 0402 	add.w	r4, r1, r2
 800de14:	d902      	bls.n	800de1c <memmove+0x10>
 800de16:	4284      	cmp	r4, r0
 800de18:	4623      	mov	r3, r4
 800de1a:	d807      	bhi.n	800de2c <memmove+0x20>
 800de1c:	1e43      	subs	r3, r0, #1
 800de1e:	42a1      	cmp	r1, r4
 800de20:	d008      	beq.n	800de34 <memmove+0x28>
 800de22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de2a:	e7f8      	b.n	800de1e <memmove+0x12>
 800de2c:	4402      	add	r2, r0
 800de2e:	4601      	mov	r1, r0
 800de30:	428a      	cmp	r2, r1
 800de32:	d100      	bne.n	800de36 <memmove+0x2a>
 800de34:	bd10      	pop	{r4, pc}
 800de36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de3e:	e7f7      	b.n	800de30 <memmove+0x24>

0800de40 <__malloc_lock>:
 800de40:	4801      	ldr	r0, [pc, #4]	; (800de48 <__malloc_lock+0x8>)
 800de42:	f7ff bf7b 	b.w	800dd3c <__retarget_lock_acquire_recursive>
 800de46:	bf00      	nop
 800de48:	20001798 	.word	0x20001798

0800de4c <__malloc_unlock>:
 800de4c:	4801      	ldr	r0, [pc, #4]	; (800de54 <__malloc_unlock+0x8>)
 800de4e:	f7ff bf76 	b.w	800dd3e <__retarget_lock_release_recursive>
 800de52:	bf00      	nop
 800de54:	20001798 	.word	0x20001798

0800de58 <_realloc_r>:
 800de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5c:	4680      	mov	r8, r0
 800de5e:	4614      	mov	r4, r2
 800de60:	460e      	mov	r6, r1
 800de62:	b921      	cbnz	r1, 800de6e <_realloc_r+0x16>
 800de64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de68:	4611      	mov	r1, r2
 800de6a:	f7ff b819 	b.w	800cea0 <_malloc_r>
 800de6e:	b92a      	cbnz	r2, 800de7c <_realloc_r+0x24>
 800de70:	f7fe ffaa 	bl	800cdc8 <_free_r>
 800de74:	4625      	mov	r5, r4
 800de76:	4628      	mov	r0, r5
 800de78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de7c:	f000 f8fa 	bl	800e074 <_malloc_usable_size_r>
 800de80:	4284      	cmp	r4, r0
 800de82:	4607      	mov	r7, r0
 800de84:	d802      	bhi.n	800de8c <_realloc_r+0x34>
 800de86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de8a:	d812      	bhi.n	800deb2 <_realloc_r+0x5a>
 800de8c:	4621      	mov	r1, r4
 800de8e:	4640      	mov	r0, r8
 800de90:	f7ff f806 	bl	800cea0 <_malloc_r>
 800de94:	4605      	mov	r5, r0
 800de96:	2800      	cmp	r0, #0
 800de98:	d0ed      	beq.n	800de76 <_realloc_r+0x1e>
 800de9a:	42bc      	cmp	r4, r7
 800de9c:	4622      	mov	r2, r4
 800de9e:	4631      	mov	r1, r6
 800dea0:	bf28      	it	cs
 800dea2:	463a      	movcs	r2, r7
 800dea4:	f7fe fee4 	bl	800cc70 <memcpy>
 800dea8:	4631      	mov	r1, r6
 800deaa:	4640      	mov	r0, r8
 800deac:	f7fe ff8c 	bl	800cdc8 <_free_r>
 800deb0:	e7e1      	b.n	800de76 <_realloc_r+0x1e>
 800deb2:	4635      	mov	r5, r6
 800deb4:	e7df      	b.n	800de76 <_realloc_r+0x1e>

0800deb6 <_raise_r>:
 800deb6:	291f      	cmp	r1, #31
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	4604      	mov	r4, r0
 800debc:	460d      	mov	r5, r1
 800debe:	d904      	bls.n	800deca <_raise_r+0x14>
 800dec0:	2316      	movs	r3, #22
 800dec2:	6003      	str	r3, [r0, #0]
 800dec4:	f04f 30ff 	mov.w	r0, #4294967295
 800dec8:	bd38      	pop	{r3, r4, r5, pc}
 800deca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800decc:	b112      	cbz	r2, 800ded4 <_raise_r+0x1e>
 800dece:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ded2:	b94b      	cbnz	r3, 800dee8 <_raise_r+0x32>
 800ded4:	4620      	mov	r0, r4
 800ded6:	f000 f831 	bl	800df3c <_getpid_r>
 800deda:	462a      	mov	r2, r5
 800dedc:	4601      	mov	r1, r0
 800dede:	4620      	mov	r0, r4
 800dee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dee4:	f000 b818 	b.w	800df18 <_kill_r>
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d00a      	beq.n	800df02 <_raise_r+0x4c>
 800deec:	1c59      	adds	r1, r3, #1
 800deee:	d103      	bne.n	800def8 <_raise_r+0x42>
 800def0:	2316      	movs	r3, #22
 800def2:	6003      	str	r3, [r0, #0]
 800def4:	2001      	movs	r0, #1
 800def6:	e7e7      	b.n	800dec8 <_raise_r+0x12>
 800def8:	2400      	movs	r4, #0
 800defa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800defe:	4628      	mov	r0, r5
 800df00:	4798      	blx	r3
 800df02:	2000      	movs	r0, #0
 800df04:	e7e0      	b.n	800dec8 <_raise_r+0x12>
	...

0800df08 <raise>:
 800df08:	4b02      	ldr	r3, [pc, #8]	; (800df14 <raise+0xc>)
 800df0a:	4601      	mov	r1, r0
 800df0c:	6818      	ldr	r0, [r3, #0]
 800df0e:	f7ff bfd2 	b.w	800deb6 <_raise_r>
 800df12:	bf00      	nop
 800df14:	200001f8 	.word	0x200001f8

0800df18 <_kill_r>:
 800df18:	b538      	push	{r3, r4, r5, lr}
 800df1a:	4d07      	ldr	r5, [pc, #28]	; (800df38 <_kill_r+0x20>)
 800df1c:	2300      	movs	r3, #0
 800df1e:	4604      	mov	r4, r0
 800df20:	4608      	mov	r0, r1
 800df22:	4611      	mov	r1, r2
 800df24:	602b      	str	r3, [r5, #0]
 800df26:	f7f8 fa9b 	bl	8006460 <_kill>
 800df2a:	1c43      	adds	r3, r0, #1
 800df2c:	d102      	bne.n	800df34 <_kill_r+0x1c>
 800df2e:	682b      	ldr	r3, [r5, #0]
 800df30:	b103      	cbz	r3, 800df34 <_kill_r+0x1c>
 800df32:	6023      	str	r3, [r4, #0]
 800df34:	bd38      	pop	{r3, r4, r5, pc}
 800df36:	bf00      	nop
 800df38:	2000179c 	.word	0x2000179c

0800df3c <_getpid_r>:
 800df3c:	f7f8 ba88 	b.w	8006450 <_getpid>

0800df40 <__sread>:
 800df40:	b510      	push	{r4, lr}
 800df42:	460c      	mov	r4, r1
 800df44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df48:	f000 f89c 	bl	800e084 <_read_r>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	bfab      	itete	ge
 800df50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df52:	89a3      	ldrhlt	r3, [r4, #12]
 800df54:	181b      	addge	r3, r3, r0
 800df56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df5a:	bfac      	ite	ge
 800df5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800df5e:	81a3      	strhlt	r3, [r4, #12]
 800df60:	bd10      	pop	{r4, pc}

0800df62 <__swrite>:
 800df62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df66:	461f      	mov	r7, r3
 800df68:	898b      	ldrh	r3, [r1, #12]
 800df6a:	05db      	lsls	r3, r3, #23
 800df6c:	4605      	mov	r5, r0
 800df6e:	460c      	mov	r4, r1
 800df70:	4616      	mov	r6, r2
 800df72:	d505      	bpl.n	800df80 <__swrite+0x1e>
 800df74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df78:	2302      	movs	r3, #2
 800df7a:	2200      	movs	r2, #0
 800df7c:	f000 f868 	bl	800e050 <_lseek_r>
 800df80:	89a3      	ldrh	r3, [r4, #12]
 800df82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df8a:	81a3      	strh	r3, [r4, #12]
 800df8c:	4632      	mov	r2, r6
 800df8e:	463b      	mov	r3, r7
 800df90:	4628      	mov	r0, r5
 800df92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df96:	f000 b817 	b.w	800dfc8 <_write_r>

0800df9a <__sseek>:
 800df9a:	b510      	push	{r4, lr}
 800df9c:	460c      	mov	r4, r1
 800df9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfa2:	f000 f855 	bl	800e050 <_lseek_r>
 800dfa6:	1c43      	adds	r3, r0, #1
 800dfa8:	89a3      	ldrh	r3, [r4, #12]
 800dfaa:	bf15      	itete	ne
 800dfac:	6560      	strne	r0, [r4, #84]	; 0x54
 800dfae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dfb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dfb6:	81a3      	strheq	r3, [r4, #12]
 800dfb8:	bf18      	it	ne
 800dfba:	81a3      	strhne	r3, [r4, #12]
 800dfbc:	bd10      	pop	{r4, pc}

0800dfbe <__sclose>:
 800dfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfc2:	f000 b813 	b.w	800dfec <_close_r>
	...

0800dfc8 <_write_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d07      	ldr	r5, [pc, #28]	; (800dfe8 <_write_r+0x20>)
 800dfcc:	4604      	mov	r4, r0
 800dfce:	4608      	mov	r0, r1
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	602a      	str	r2, [r5, #0]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	f7f8 fa79 	bl	80064ce <_write>
 800dfdc:	1c43      	adds	r3, r0, #1
 800dfde:	d102      	bne.n	800dfe6 <_write_r+0x1e>
 800dfe0:	682b      	ldr	r3, [r5, #0]
 800dfe2:	b103      	cbz	r3, 800dfe6 <_write_r+0x1e>
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	bd38      	pop	{r3, r4, r5, pc}
 800dfe8:	2000179c 	.word	0x2000179c

0800dfec <_close_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4d06      	ldr	r5, [pc, #24]	; (800e008 <_close_r+0x1c>)
 800dff0:	2300      	movs	r3, #0
 800dff2:	4604      	mov	r4, r0
 800dff4:	4608      	mov	r0, r1
 800dff6:	602b      	str	r3, [r5, #0]
 800dff8:	f7f8 fa85 	bl	8006506 <_close>
 800dffc:	1c43      	adds	r3, r0, #1
 800dffe:	d102      	bne.n	800e006 <_close_r+0x1a>
 800e000:	682b      	ldr	r3, [r5, #0]
 800e002:	b103      	cbz	r3, 800e006 <_close_r+0x1a>
 800e004:	6023      	str	r3, [r4, #0]
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	2000179c 	.word	0x2000179c

0800e00c <_fstat_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	4d07      	ldr	r5, [pc, #28]	; (800e02c <_fstat_r+0x20>)
 800e010:	2300      	movs	r3, #0
 800e012:	4604      	mov	r4, r0
 800e014:	4608      	mov	r0, r1
 800e016:	4611      	mov	r1, r2
 800e018:	602b      	str	r3, [r5, #0]
 800e01a:	f7f8 fa80 	bl	800651e <_fstat>
 800e01e:	1c43      	adds	r3, r0, #1
 800e020:	d102      	bne.n	800e028 <_fstat_r+0x1c>
 800e022:	682b      	ldr	r3, [r5, #0]
 800e024:	b103      	cbz	r3, 800e028 <_fstat_r+0x1c>
 800e026:	6023      	str	r3, [r4, #0]
 800e028:	bd38      	pop	{r3, r4, r5, pc}
 800e02a:	bf00      	nop
 800e02c:	2000179c 	.word	0x2000179c

0800e030 <_isatty_r>:
 800e030:	b538      	push	{r3, r4, r5, lr}
 800e032:	4d06      	ldr	r5, [pc, #24]	; (800e04c <_isatty_r+0x1c>)
 800e034:	2300      	movs	r3, #0
 800e036:	4604      	mov	r4, r0
 800e038:	4608      	mov	r0, r1
 800e03a:	602b      	str	r3, [r5, #0]
 800e03c:	f7f8 fa7f 	bl	800653e <_isatty>
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d102      	bne.n	800e04a <_isatty_r+0x1a>
 800e044:	682b      	ldr	r3, [r5, #0]
 800e046:	b103      	cbz	r3, 800e04a <_isatty_r+0x1a>
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	bd38      	pop	{r3, r4, r5, pc}
 800e04c:	2000179c 	.word	0x2000179c

0800e050 <_lseek_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4d07      	ldr	r5, [pc, #28]	; (800e070 <_lseek_r+0x20>)
 800e054:	4604      	mov	r4, r0
 800e056:	4608      	mov	r0, r1
 800e058:	4611      	mov	r1, r2
 800e05a:	2200      	movs	r2, #0
 800e05c:	602a      	str	r2, [r5, #0]
 800e05e:	461a      	mov	r2, r3
 800e060:	f7f8 fa78 	bl	8006554 <_lseek>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_lseek_r+0x1e>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_lseek_r+0x1e>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	2000179c 	.word	0x2000179c

0800e074 <_malloc_usable_size_r>:
 800e074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e078:	1f18      	subs	r0, r3, #4
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	bfbc      	itt	lt
 800e07e:	580b      	ldrlt	r3, [r1, r0]
 800e080:	18c0      	addlt	r0, r0, r3
 800e082:	4770      	bx	lr

0800e084 <_read_r>:
 800e084:	b538      	push	{r3, r4, r5, lr}
 800e086:	4d07      	ldr	r5, [pc, #28]	; (800e0a4 <_read_r+0x20>)
 800e088:	4604      	mov	r4, r0
 800e08a:	4608      	mov	r0, r1
 800e08c:	4611      	mov	r1, r2
 800e08e:	2200      	movs	r2, #0
 800e090:	602a      	str	r2, [r5, #0]
 800e092:	461a      	mov	r2, r3
 800e094:	f7f8 f9fe 	bl	8006494 <_read>
 800e098:	1c43      	adds	r3, r0, #1
 800e09a:	d102      	bne.n	800e0a2 <_read_r+0x1e>
 800e09c:	682b      	ldr	r3, [r5, #0]
 800e09e:	b103      	cbz	r3, 800e0a2 <_read_r+0x1e>
 800e0a0:	6023      	str	r3, [r4, #0]
 800e0a2:	bd38      	pop	{r3, r4, r5, pc}
 800e0a4:	2000179c 	.word	0x2000179c

0800e0a8 <_init>:
 800e0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0aa:	bf00      	nop
 800e0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ae:	bc08      	pop	{r3}
 800e0b0:	469e      	mov	lr, r3
 800e0b2:	4770      	bx	lr

0800e0b4 <_fini>:
 800e0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b6:	bf00      	nop
 800e0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ba:	bc08      	pop	{r3}
 800e0bc:	469e      	mov	lr, r3
 800e0be:	4770      	bx	lr
